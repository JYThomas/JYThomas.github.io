<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo博客配置</title>
    <link href="/2022/01/11/Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/01/11/Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客配置"><a href="#Hexo博客配置" class="headerlink" title="Hexo博客配置"></a>Hexo博客配置</h1><h2 id="一、Hexo主题美化"><a href="#一、Hexo主题美化" class="headerlink" title="一、Hexo主题美化"></a>一、Hexo主题美化</h2><ol><li><p>进入Hexo中文官网：<a href="https://hexo.io/zh-cn/%EF%BC%8C%E5%AE%98%E7%BD%91%E5%BA%95%E9%83%A8%E6%9C%89%E4%B8%BB%E9%A2%98%E9%80%89%E6%8B%A9%EF%BC%8C%E6%9C%AC%E9%A2%98%E4%BB%A5Fluid%E4%B8%BA%E4%BE%8B%EF%BC%8C%E8%BF%9B%E5%85%A5Fluid%E7%9A%84Github%E4%BB%93%E5%BA%93(%E4%BB%93%E5%BA%93%E4%B8%8B%E6%9C%89%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%8C%E9%A2%84%E8%A7%88%E7%BD%91%E5%9D%80%EF%BC%9Ahttps://hexo.fluid-dev.com/)">https://hexo.io/zh-cn/，官网底部有主题选择，本题以Fluid为例，进入Fluid的Github仓库(仓库下有安装教程，预览网址：https://hexo.fluid-dev.com/)</a></p></li><li><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录(Blog)执行命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>然后在博客目录下手动创建 <code>_config.fluid.yml</code>文件，将这个网址：<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml</a> 中的代码内容复制到手动创建的<code>_config.fluid.yml</code>文件中</p></li><li><p>指定主题：</p><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>(注意不是自己手动创建的yml文件)：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure></li><li><p>进入Blog文件目录，进入cmd命令行执行下面的命令，最后访问本地调试的预览页面就可以看见新的主题引用到了原蓝landscape主题的hexo博客上 显示新的Fluid主题</p></li></ol><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo clean<br>hexo s <span class="hljs-meta">#这里好像默认使用的端口号是4000</span><br><br>要想指定端口号可以使用<br>hexo <span class="hljs-keyword">server</span> -p <span class="hljs-number">5000</span> 指定端口号(解决端口被占用的问题)<br></code></pre></td></tr></table></figure><p><img src="/2022/01/11/Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/image-20220111123634657.png" alt="image-20220111123634657"></p><h2 id="二、Hexo主题配置"><a href="#二、Hexo主题配置" class="headerlink" title="二、Hexo主题配置"></a>二、Hexo主题配置</h2><p>​        同样的这里以Fluid主题为例，主要的配置还是参照Fluid的官方文档：<a href="https://hexo.fluid-dev.com/docs/start/">https://hexo.fluid-dev.com/docs/start/</a>  以及配置指南：  <a href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97">https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97</a></p><ol><li><h4 id="在配置指南里面的tip的定义要看明白，这说明的是文档下面的配置操作的是什么文件"><a href="#在配置指南里面的tip的定义要看明白，这说明的是文档下面的配置操作的是什么文件" class="headerlink" title="在配置指南里面的tip的定义要看明白，这说明的是文档下面的配置操作的是什么文件"></a>在配置指南里面的tip的定义要看明白，这说明的是文档下面的配置操作的是什么文件</h4><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">TIP<br>致主题的新用户：<br>- 本指南经过数个版本打磨，绝大部分的功能都有详细说明，请仔细阅读，节约自己和他人的时间；<br>- 本指南中提到的：<span class="hljs-string">&quot;博客配置&quot;</span> 指的 Hexo 博客目录下的 `_config.yml`，<span class="hljs-string">&quot;主题配置&quot;</span> 指的是 `theme/fluid/_config.yml` 或者 `_config.fluid.yml` ，注意区分；<br>- 本指南中提到的 `source` 目录都指的是博客目录下的 `source` 文件夹，不推荐修改主题内 `source` 目录；<br>- 每次无论 `hexo g` 或 `hexo s`，都最好先使用 `hexo clean`；<br>- 页面结果以本地 `hexo s` 为准，部署后的异常大部分是缓存原因，在确认没有报错的情况下，等待若干时间后即可正常；<br>- 由于主题的不同版本会存在配置差异，本指南以最新版本为准。<br></code></pre></td></tr></table></figure></li><li><h4 id="页面顶部大图"><a href="#页面顶部大图" class="headerlink" title="页面顶部大图"></a>页面顶部大图</h4><p>主题配置中(_config.fluid.yml文件中)，每个页面都有名为 <code>banner_img</code> 的属性，可以使用本地图片的相对路径，也可以为外站链接，比如指向本地图片：</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/example.jpg</span> <br><span class="hljs-comment"># 对应存放在 /source/img/bg/example.jpg，对应的文件夹自行创建，对应上就行</span><br><span class="hljs-comment"># 如果是本地图片，目录文件夹可自定义，但必须在 source 目录下，博客与主题的 source 目录最终会合并，因此优先选择博客的 source。</span><br><span class="hljs-comment"># 图片大小建议压缩到 1MB 以内，否则会严重拖慢页面加载</span><br></code></pre></td></tr></table></figure><ol start="3"><li><h4 id="页面左上角的博客标题"><a href="#页面左上角的博客标题" class="headerlink" title="页面左上角的博客标题"></a>页面左上角的博客标题</h4><p>默认使用<strong>博客配置</strong>中的 <code>title</code>，这个配置同时控制着网页在浏览器标签中的标题。</p><p>如需单独区别设置，可在<strong>主题配置</strong>中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">navbar:</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">博客标题</span><br></code></pre></td></tr></table></figure></li></ol><p><img src="/2022/01/11/Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/image-20220111124731378.png" alt="image-20220111124731378"></p><ol start="4"><li><h4 id="Slogan打字机"><a href="#Slogan打字机" class="headerlink" title="Slogan打字机"></a>Slogan打字机</h4><p>首页大图中的标题文字，可在  **主题配置 ** (_config.fluid.yml文件中) 中设定是否开启： </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;睡觉能解决一半的烦恼.&quot;</span><br>    <span class="hljs-attr">api:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://v1.hitokoto.cn/&quot;</span><br>      <span class="hljs-attr">method:</span> <span class="hljs-string">&quot;GET&quot;</span><br>      <span class="hljs-attr">headers:</span> &#123;&#125;<br>      <span class="hljs-attr">keys:</span> [<span class="hljs-string">&quot;hitokoto&quot;</span>]<br></code></pre></td></tr></table></figure><p>如果 <code>text</code> 为空则按<strong>博客配置</strong>的 <code>subtitle</code> 显示。</p></li></ol><h2 id="三、Hexo发布文章"><a href="#三、Hexo发布文章" class="headerlink" title="三、Hexo发布文章"></a>三、Hexo发布文章</h2><p>I、创建文章命令：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">Hexo <span class="hljs-keyword">new</span> <span class="hljs-type"></span>文章名<br></code></pre></td></tr></table></figure><p><img src="/2022/01/11/Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/image-20220111130750040.png" alt="image-20220111130750040"></p><p>事先说明：在刚开始摸怎么发布文章的时候，如果文章中有图片的话这会是有一个棘手的问题，因为我的文章是在Typora中写好的，然后Typora的图片保存设置如下</p><p><img src="/2022/01/11/Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/image-20220111125703629.png" alt="image-20220111125703629"></p><p>这个是保存在对应的Typora文件同名的文件夹下面。当时我将写好的文章拷贝到 hexo new 文件名 命令创建好的md文件中后，保存 运行命令进行本地预览的时候发现文章中的图片显示不出来。这就是为什么在发布文章之前要说这一段事先说明。以下是我的解决方法：</p><ol><li><p>以后写文章记笔记的话直接在hexo new 文章名 创建的md文件下写(有点捆绑销售的感觉，写好的文章一定就要准备发出来的状态，但是这是解决图片显示问题最简单粗暴的方法，虽然显得有点不太友好)，这个操作接下来要设置一下</p><p>(1)安装插件，在hexo根目录打开Git Bash,执行</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">npm install hexo-asset-<span class="hljs-built_in">image</span> --<span class="hljs-built_in">save</span><br></code></pre></td></tr></table></figure><p>(2)打开hexo的配置文件_config.yml , 找到 post_asset_folder，把这个选项从false改成true,这样的话之后使用命令创建的md文章会有一个同名文件夹，在创建好的md文件下直接写笔记，插入的图片会自动插入到这个伴随生成保存图片的文件夹，之后预览或者hexo d上传到仓库发布到互联网上都可以看见图片显示已正常</p></li><li><p>在本地的其他文件夹下写好文章，然后使用命令创建md文章，最后将写好的文章图片复制到伴随着命令生成md文件对应的文件夹下，复制方式如下</p></li></ol><p><img src="/2022/01/11/Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/image-20220111131235024.png" alt="image-20220111131235024"></p><p>鼠标放到图片的小图标上，右击鼠标，选择 复制图片到 将图片复制到对应的博客图片文件夹中，这时在将要发布的md文件中显示的是有 ../../ 的一个图片路径，将图片路径删除掉前面的一部分直到保存图片的文件夹，就像上图中的那样格式就可以看见图片在typora中显示出来了，这样操作后的图片在本地预览和发布的时候也能看见图片</p><ol start="3"><li>还有一种就是设置配置文件的方式，我试过了好像没啥作用，感兴趣的可以康康这篇的操作：<a href="https://www.jianshu.com/p/f72aaad7b852">https://www.jianshu.com/p/f72aaad7b852</a></li></ol><p>II、设置文章信息</p><p>设置文章的信息可以直接在hexo new命令创建的md文件中配置Front-matter中设置(文件最顶部的那几行小字)</p><p>一般的配置信息如下：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: HTML笔记  #文章的标题<br>date: 2022<span class="hljs-string">-01</span><span class="hljs-string">-10</span> 19:08:58<br><span class="hljs-keyword">tags:</span> HTML  #文章标签<br>index_img: /index_img/HTML5.jpg  #在文章列表中显示的文章图片<br>banner_img: /text_headerImg/TextHeader_img.jpg  #文章详情中显示的顶部图片<br>excerpt: 这是文章简述。 #文章简述，显示在文章列表中<br></code></pre></td></tr></table></figure><p>注意图片的路径，和 Banner(博客的首页) 配置相同，<code>/img/example.jpg</code> 对应的是存放在 <code>/source/img/example.jpg</code> 目录下的图片（目录也可自定义，但必须在 source 目录下）。</p><p>III、创建关于页</p><p>(1) 首次使用主题的「关于页」需要手动创建(在Blog文件下进入cmd)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里可以写正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span> <span class="hljs-string">啥也不写的话就啥也不显式</span><br></code></pre></td></tr></table></figure><p>WARNING： <code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p><p>(2) 关于信息</p><p>在关于页介绍自己的基础信息，可以在<strong>主题配置</strong>中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/avatar.png</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Fluid&quot;</span><br>  <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;An elegant theme for Hexo&quot;</span><br></code></pre></td></tr></table></figure><p>到这 一个属于自己的个人博客就差不多做好了 包括了日常的写文章遇到的问题，还想接着美化的话可以自己学学Fluid的官方文章，注意操作哪个文件就行，不难；有帮助到你的话希望可以分享给身边跟多的朋友，有哪里说的不够好的话可以发送邮件到 <a href="mailto:&#x31;&#55;&#x34;&#x31;&#54;&#56;&#54;&#54;&#x30;&#x39;&#x40;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;">&#x31;&#55;&#x34;&#x31;&#54;&#56;&#54;&#54;&#x30;&#x39;&#x40;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;</a> 提出批评意见</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建Hexo博客</title>
    <link href="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo搭配Github搭建个人博客"><a href="#Hexo搭配Github搭建个人博客" class="headerlink" title="Hexo搭配Github搭建个人博客"></a>Hexo搭配Github搭建个人博客</h1><p>参考视频：<a href="https://www.bilibili.com/video/BV1mU4y1j72n">https://www.bilibili.com/video/BV1mU4y1j72n</a></p><h2 id="一、设置搭建所需的环境"><a href="#一、设置搭建所需的环境" class="headerlink" title="一、设置搭建所需的环境"></a>一、设置搭建所需的环境</h2><ol><li><p>安装Node.js</p><p>参考链接：<a href="https://blog.csdn.net/qq_40712862/article/details/120231621">https://blog.csdn.net/qq_40712862/article/details/120231621</a></p></li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span> <br>npm -v<br>检查是否安装成功node.js和npm<br></code></pre></td></tr></table></figure><ol start="2"><li>安装git</li></ol><p>​    参考链接：<a href="https://blog.csdn.net/eno_yang/article/details/114782695">https://blog.csdn.net/eno_yang/article/details/114782695</a></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git --<span class="hljs-keyword">version</span> <span class="hljs-comment">#检查版本号 判断是否安装成功</span><br></code></pre></td></tr></table></figure><ol start="3"><li>下载Hexo：win+r键打开命令行输入cmd，下载hexo。下载完之后出现版本号表明安装成功</li></ol><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g <span class="hljs-meta">#安装hexo脚手架 注意全局安装 -g 不要漏了</span><br>hexo -v <span class="hljs-meta">#检查版本号 确认是否安装成功</span><br></code></pre></td></tr></table></figure><h2 id="二、搭建仓库"><a href="#二、搭建仓库" class="headerlink" title="二、搭建仓库"></a>二、搭建仓库</h2><ol><li>注册github账号</li><li>记住注册名、注册邮箱、注册密码(后面的命令需要用到)</li><li>进入个人主页之后找到your profile，找到Repositories，然后点击绿色的new创建仓库</li></ol><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220110232255985.png" alt="image-20220110232255985"></p><ol start="4"><li>设置仓库名：github账号名.github.io,然后勾选下面的 Add a ReadMe file，最后点击 Create repository创建仓库（我的仓库已经创建好了 所以提示该仓库已经创建好了而已）</li></ol><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220110232558971.png" alt="image-20220110232558971"></p><h2 id="三、生成SSH-Keys"><a href="#三、生成SSH-Keys" class="headerlink" title="三、生成SSH Keys"></a>三、生成SSH Keys</h2><ol><li><p>这是为了将Github与本地进行绑定 为的是以后在本地运行配置hexo博客发布好文章或者配置好博客之后更新到github仓库上，然后使用github的方式访问博客</p></li><li><p>进入任何一个文件夹，在空白处右键点击Git Bash Here进入Git，然后输入ssh检查是否已经安装有ssh(ssh在安装git的时候一般会默认安装好) 这里的Git命令行不要关 后面还有用。</p></li><li><p>输入  ssh-keygen -t rsa -C “注册邮箱”  （此处的””中是注册github账号时使用的邮箱 ） 然后按四次回车</p></li><li><p>打开c盘，Users，你自己电脑的用户名文件夹(Administrator之类的)，找到 .ssh 文件夹 打开会见到一个 .pub 文件 使用记事本打开它，复制里面的全部内容</p></li><li><p>打开github，点击右上角的个人圆形头像找到settings &gt; 找到 SSH and GPG Keys</p></li></ol><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220110234035703.png" alt="image-20220110234035703"></p><ol start="6"><li>创建SSH keys，然后将复制的公钥(pub文件里面的那一大堆)粘贴到Key中(不要做任何改动) 最后点击SSH Key。</li></ol><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220110234140849.png" alt="image-20220110234140849"></p><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220110234312762.png" alt="image-20220110234312762"></p><ol start="7"><li>将刚刚的git命令行打开，输入： ssh -T <a href="mailto:&#103;&#x69;&#x74;&#64;&#103;&#x69;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;">&#103;&#x69;&#x74;&#64;&#103;&#x69;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;</a>  。最后出现下图提示的内容就说明绑定号了秘钥</li></ol><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220110234740207.png" alt="image-20220110234740207"></p><h2 id="四、本地生成博客内容"><a href="#四、本地生成博客内容" class="headerlink" title="四、本地生成博客内容"></a>四、本地生成博客内容</h2><ol><li>在本地盘中创建一个Blog文件夹，进入Blog文件夹 右键点击Git Bash Here进入git</li><li>输入 hexo init 初始化 hexo (有时候会出现FATAL错误，这是因为github是国外的网站 网络连接的问题 再试几次就行)。初始化成功的标志是出现 start blogging with hexo</li></ol><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220110235408416.png" alt="image-20220110235408416"></p><ol start="3"><li>打开Blog文件夹会看见生成的博客配置文件，在git界面输入 hexo s (hexo server的简写)，命令行中出现的ip就可以用浏览器访问看见有一个本地的网页可以生成了</li><li><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220110235800510.png" alt="image-20220110235800510"></li></ol><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220110235731738.png" alt="image-20220110235731738"></p><h2 id="五、发布博客"><a href="#五、发布博客" class="headerlink" title="五、发布博客"></a>五、发布博客</h2><ol><li>进入Blog文件夹看到 _config.yml 文件，打开拉到最下面把deploy和其下面的全都删掉修改配置文件；repository的内容是仓库的地址，配置好之后保存yml文件。</li></ol><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">deploy:</span>  <br><span class="hljs-symbol">type:</span> git<br><span class="hljs-symbol">repository:</span> https://github.com/JYThomas/JYThomas.github.io.git  <span class="hljs-meta">#仓库地址 </span><br><span class="hljs-symbol">branch:</span> main<br><span class="hljs-meta">###注意这里是英文的冒号 冒号后面要打一个空格再输入内容(这点很重要 后面配置博客文章的时候也要用到这个细节)</span><br></code></pre></td></tr></table></figure><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220111002236645.png" alt="image-20220111002236645"></p><ol start="2"><li>在Blog文件夹下右键点击Git Bash Here打开git，安装hexo自动部署发布工具：hexo-deployer-git，输入</li></ol><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br><br>hexo g <span class="hljs-comment">#生成页面</span><br><br>hexo d <br><span class="hljs-comment">#将本地的文件上传到github仓库上，出现FATAL报错的话可能是网络问题 多试几次</span><br></code></pre></td></tr></table></figure><p>之后会出现要求输入github账号和密码，账号可以输入github用户名或者是注册邮箱(是一个白色的弹窗，上面是用户名，下面是密码，或者是一个弹窗 先要求输入用户名，然后再要求输入秘钥)。</p><p>密码一栏注意不是输入github账号的密码，而是将密码换成令牌token，进入github，点击右上角账号头像找到settings之后找到 Developer settings</p><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220111003303479.png" alt="image-20220111003303479"></p><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220111003408839.png" alt="image-20220111003408839"></p><p>点击Generate new token，然后打钩的全选上，最后点击 Generate token，最后出现的序列号就是令牌，用来代替前面的密码(令牌的有效期是30天 只出现一次 第一次生成的时候 最好将它保留下来)</p><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220111003541965.png" alt="image-20220111003541965"></p><p>最后就会看见本地的文件夹全部上传到github仓库上了，可以通过仓库的网址来访问网站博客(默认样式)</p><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220111003713156.png" alt="image-20220111003713156"></p><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220111004118434.png" alt="image-20220111004118434"></p><h2 id="六、注意事项"><a href="#六、注意事项" class="headerlink" title="六、注意事项"></a>六、注意事项</h2><ol><li>如果执行hexo s命令发现端口被占用可以指定使用那个端口</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hexo</span> server -p <span class="hljs-number">5000</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在配置好本地博客内容以及配置文件之后 将其上传到github仓库前使用如下顺序(同步本地Hexo到Github)</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">hexo clean  <span class="hljs-regexp">//</span> clean本地项目，防止缓存<br>hexo g      <span class="hljs-regexp">//</span> 根据你编辑的md格式的博客，生成静态网页<br>hexo d      <span class="hljs-regexp">//</span> 将本地博客发布到github<br></code></pre></td></tr></table></figure><ol start="3"><li>在本地做修改 用如下命令进行预览，配置好文件之后再将其上传到github仓库</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">本地测试预览：<br>hexo clean<br>hexo s<br><br>上传本地文件到github<br>hexo clean  <span class="hljs-regexp">//</span> clean本地项目，防止缓存<br>hexo g      <span class="hljs-regexp">//</span> 根据你编辑的md格式的博客，生成静态网页<br>hexo d      <span class="hljs-regexp">//</span> 将本地博客发布到github <br><span class="hljs-regexp">//</span>最后这一步还是有可能会有网络连接的问题 (显示FATAL错误) 多试几次就能上传到github仓库<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Css笔记</title>
    <link href="/2022/01/10/Css%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/01/10/Css%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS知识点复习"><a href="#CSS知识点复习" class="headerlink" title="CSS知识点复习"></a>CSS知识点复习</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>**<code>CSS</code>**（层叠样式表）：用于控制网页的表现。</p><p>优点：</p><ol><li>实现表现和内容相分离（方便维护、错误修改、界面调整更加容易）。</li><li>便于页面风格的统一和修改（样式重用、高效率开发）。</li><li>简化网页，提高页面浏览速度（减少文件量，降低服务器带宽成本，加快网页解析速度，有利于SEO）。</li></ol><hr><hr><hr><h2 id="二、在html中使用CSS的四种方法"><a href="#二、在html中使用CSS的四种方法" class="headerlink" title="二、在html中使用CSS的四种方法"></a>二、在html中使用CSS的四种方法</h2><h3 id="1-行内样式：混合在HTML标记里使用，对每个元素单独定义样式。"><a href="#1-行内样式：混合在HTML标记里使用，对每个元素单独定义样式。" class="headerlink" title="1. 行内样式：混合在HTML标记里使用，对每个元素单独定义样式。"></a>1. <strong>行内样式</strong>：混合在HTML标记里使用，对每个元素单独定义样式。</h3><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:blue&quot;</span>&gt;</span>文字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>虽然这种方法比较直接，在制作页面的时候需要为很多的标签设置 **<code>style </code>**属性，所以会导致HTML页面不够纯净，文件体积过大，不利于搜索蜘蛛爬行，而且会导致后期维护成本高。</p><hr><h3 id="2-页面内部样式：在HTML的头部标签-lt-head-gt-与-lt-head-gt-之间添加样式。"><a href="#2-页面内部样式：在HTML的头部标签-lt-head-gt-与-lt-head-gt-之间添加样式。" class="headerlink" title="2. 页面内部样式：在HTML的头部标签 **&lt;head&gt;与&lt;/head&gt; **之间添加样式。"></a>2. <strong>页面内部样式</strong>：在HTML的头部标签 **<code>&lt;head&gt;与&lt;/head&gt; </code>**之间添加样式。</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">color</span>:blue;&#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果一个网站页面很多，每一个文件都会变大，重用性差，后期维护难度不小，如果文件很少，CSS代码也不多，这种方式还是很不错的。</p><hr><h3 id="3-链入外部样式：把样式表保存为一个样式表文件，然后在页面中使用-标签链接到这个CSS文件。"><a href="#3-链入外部样式：把样式表保存为一个样式表文件，然后在页面中使用-标签链接到这个CSS文件。" class="headerlink" title="3. 链入外部样式：把样式表保存为一个样式表文件，然后在页面中使用  标签链接到这个CSS文件。"></a>3. <strong>链入外部样式</strong>：把样式表保存为一个样式表文件，然后在页面中使用 <link> 标签链接到这个CSS文件。</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>= <span class="hljs-string">&quot;CSS文件URL&quot;</span> <span class="hljs-attr">type</span>= <span class="hljs-string">&quot;text/css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这种方式将HTML文件和CSS文件彻底分成两个或者多个文件，实现了页面框架HTML代码与表现CSS代码的完全分离，使得前期制作和后期维护都十分方便，并且如果要保持页面风格统一，只需要把这些公共的CSS文件单独保存成一个文件，其他的页面就可以分别调用自身的CSS文件，如果需要改变网站风格，叧需要修改公共CSS文件就可以了，非常的方便，这才是html+CSS制作页面提倡的方式。</p><hr><h3 id="4-导入外部样式：导入样式和链接样式比较相似，采用-import方式导入CSS样式表（可以将css分成小模块），但兼容性以及用户体验的问题，建议使用链接样式-。"><a href="#4-导入外部样式：导入样式和链接样式比较相似，采用-import方式导入CSS样式表（可以将css分成小模块），但兼容性以及用户体验的问题，建议使用链接样式-。" class="headerlink" title="4. 导入外部样式：导入样式和链接样式比较相似，采用**import方式导入CSS样式表（可以将css分成小模块），但兼容性以及用户体验的问题，建议使用链接样式**。"></a>4. <strong>导入外部样式</strong>：导入样式和链接样式比较相似，采用**<code>import</code><strong>方式导入CSS样式表（可以将css分成小模块），但兼容性以及用户体验的问题，建议使用</strong>链接样式**。</h3><p>四种样式的优先级按照“就近原则”：<strong>行内样式&gt;页面内部样式&gt;链接样式&gt;导入样式</strong>。</p><hr><hr><hr><h2 id="三、CSS的基本语法"><a href="#三、CSS的基本语法" class="headerlink" title="三、CSS的基本语法"></a>三、CSS的基本语法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">选择符&#123;属性<span class="hljs-number">1</span>:值<span class="hljs-number">1</span>;属性<span class="hljs-number">2</span>:值<span class="hljs-number">2</span>;……&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227104648705-1433258351-16418180272911.png" alt="img"></p><p><strong>CSS选择器：</strong></p><h3 id="1-HTML标签选择器（HTML标记）："><a href="#1-HTML标签选择器（HTML标记）：" class="headerlink" title="1. HTML标签选择器（HTML标记）："></a><strong>1. HTML标签选择器（HTML标记）：</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">h1 &#123;font-size:32px;&#125;<br></code></pre></td></tr></table></figure><p>HTML选择器很方便，但是一下就把整个页面的所有相应的标记都改变了样式，但是不好细节控制，显得不够灵活。</p><h3 id="2-类选择器：允许同一元素有不同样式-通过选择类实现"><a href="#2-类选择器：允许同一元素有不同样式-通过选择类实现" class="headerlink" title="2. 类选择器：允许同一元素有不同样式(通过选择类实现)"></a>2. 类选择器：允许同一元素有不同样式(通过选择类实现)</h3><p>定义：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">.redone&#123;color:red;&#125;<br></code></pre></td></tr></table></figure><p>应用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;redone&quot;</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;redone&quot;</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-id选择器：id选择器可以在html标记中定位元素，但是相同的id号只能使用一次，不能重复，这与-class-不同。"><a href="#3-id选择器：id选择器可以在html标记中定位元素，但是相同的id号只能使用一次，不能重复，这与-class-不同。" class="headerlink" title="3. id选择器：id选择器可以在html标记中定位元素，但是相同的id号只能使用一次，不能重复，这与 **class **不同。"></a>3. id选择器：id选择器可以在html标记中定位元素，但是相同的id号只能使用一次，不能重复，这与 **<code>class </code>**不同。</h3><p>定义：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">#header&#123;width:960px;border:1px solid #666;&#125;<br></code></pre></td></tr></table></figure><p> 应用：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;我的网站&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="4-通用选择器：-表示所有的html标签。"><a href="#4-通用选择器：-表示所有的html标签。" class="headerlink" title="4. 通用选择器：**\* **表示所有的html标签。"></a>4. 通用选择器：**<code>\* </code>**表示所有的html标签。</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">*&#123;<span class="hljs-attribute">margin</span>:<span class="hljs-number">0px</span>;<span class="hljs-attribute">padding</span>:<span class="hljs-number">0px</span>;&#125;<br></code></pre></td></tr></table></figure><h3 id="5、分组选择器："><a href="#5、分组选择器：" class="headerlink" title="5、分组选择器："></a>5、分组选择器：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">h1,h2,h3,h4,h5,h6&#123;color:#900;&#125;<br></code></pre></td></tr></table></figure><h3 id="6-后代选择器：通过依据元素在其位置的上下文关系来定义样式，可以使标记更加简洁。"><a href="#6-后代选择器：通过依据元素在其位置的上下文关系来定义样式，可以使标记更加简洁。" class="headerlink" title="6. 后代选择器：通过依据元素在其位置的上下文关系来定义样式，可以使标记更加简洁。"></a>6. 后代选择器：通过依据元素在其位置的上下文关系来定义样式，可以使标记更加简洁。</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#div1</span> <span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">a</span>&#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#900</span>;&#125; <span class="hljs-comment">/*意思是在ID为div1内的p标签内的链接a标签的文字颜色为红色*/</span><br></code></pre></td></tr></table></figure><h3 id="7-子选择器：选择父元素的直接子元素。"><a href="#7-子选择器：选择父元素的直接子元素。" class="headerlink" title="7. 子选择器：选择父元素的直接子元素。"></a>7. 子选择器：选择父元素的直接子元素。</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">a</span>&#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#f00</span>;&#125; <span class="hljs-comment">/*将div元素下的a子元素设置为红色的*/</span><br></code></pre></td></tr></table></figure><h3 id="8-属性选择器：选择属性匹配的元素。"><a href="#8-属性选择器：选择属性匹配的元素。" class="headerlink" title="8. 属性选择器：选择属性匹配的元素。"></a>8. 属性选择器：选择属性匹配的元素。</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[title]</span> <span class="hljs-comment">//选择带有title属性的a标记</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[title=详细信息]</span> <span class="hljs-comment">//选择title属性的值为详细信息的a标记</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[href^=http]</span> <span class="hljs-comment">//选择herf属性以http开头的a标记</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[href$=.pdf]</span> <span class="hljs-comment">//选择herf属性以pdf结尾的a标记</span><br></code></pre></td></tr></table></figure><hr><hr><hr><h2 id="四、多重样式CSS权重计算"><a href="#四、多重样式CSS权重计算" class="headerlink" title="四、多重样式CSS权重计算"></a>四、多重样式CSS权重计算</h2><p>Css<strong>权重</strong>决定了哪一条规则会被浏览器应用在元素上</p><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227155040455-1344923007.png" alt="img"></p><p>\1.  内联样式表的权值最高 1000。</p><p>\2.  ID 选择器的权值为 100。</p><p>\3.  Class 类选择器的权值为 10。</p><p>\4.  HTML 标签选择器的权值为1。</p><p>对于多重样式CSS权重，由上述规则计算而得，权重越大越优先，但是要注意标有 “<strong>!important”</strong> 规则的优先级最大。</p><p>默认样式&lt;标签选择器&lt;类选择器&lt;id选择器&lt;行内样式&lt;!important</p><p>   0       1       10     100     1000    1000以上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">color</span>:red;&#125; <span class="hljs-comment">/*标签，权值为1*/</span><br><span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">span</span>&#123;<span class="hljs-attribute">color</span>:green;&#125; <span class="hljs-comment">/*两个标签，权值为1+1=2*/</span><br><span class="hljs-selector-tag">p</span>&gt;<span class="hljs-selector-tag">span</span>&#123;<span class="hljs-attribute">color</span>:purple;&#125;<span class="hljs-comment">/*权值与上面的相同，因此采取就近原则*/</span><br><span class="hljs-selector-class">.warning</span>&#123;<span class="hljs-attribute">color</span>:white;&#125; <span class="hljs-comment">/*类选择符，权值为10*/</span><br><span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-class">.warning</span>&#123;<span class="hljs-attribute">color</span>:purple;&#125; <span class="hljs-comment">/*权值为1+1+10=12*/</span><br><span class="hljs-selector-id">#footer</span> <span class="hljs-selector-class">.note</span> <span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">color</span>:yellow;&#125; <span class="hljs-comment">/*权值为100+10+1=111*/</span><br><span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">color</span>:red<span class="hljs-meta">!important</span>; &#125;      <span class="hljs-comment">/*!important要写在分号前,优先级最高*/</span><br></code></pre></td></tr></table></figure><p>css权重指的是css6大基础选择符的优先级，优先级高的css样式会覆盖优先级底的css样式，优先级越高说明权重越高，反之亦然。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">a</span>）、<span class="hljs-selector-tag">id</span>选择器(#box&#123;&#125;)<br><span class="hljs-selector-tag">b</span>）、类选择器(.box&#123;&#125;)<br><span class="hljs-selector-tag">c</span>）、属性选择器(a[href=<span class="hljs-string">&quot;http://www.xxx.com&quot;</span>])<br><span class="hljs-selector-tag">d</span>）、伪类和伪对象选择器(:hoevr&#123;&#125;和::after&#123;&#125;)<br><span class="hljs-selector-tag">e</span>）、标签类型选择器(p&#123;&#125;)<br><span class="hljs-selector-tag">f</span>）、通配符选择器(*&#123;&#125;)<br></code></pre></td></tr></table></figure><hr><hr><hr><h2 id="五、常用伪类"><a href="#五、常用伪类" class="headerlink" title="五、常用伪类"></a>五、常用伪类</h2><p><strong><code>:focus</code></strong> 将样式添加到被选中的元素。</p><p><strong><code>:hover</code></strong> 当鼠标悬浮在元素上方时，向元素添加样式。</p><hr><hr><hr><h2 id="六、CSS属性"><a href="#六、CSS属性" class="headerlink" title="六、CSS属性"></a>六、CSS属性</h2><h3 id="1-字体属性"><a href="#1-字体属性" class="headerlink" title="1. 字体属性:"></a><strong>1. 字体属性</strong>:</h3><table><thead><tr><th>属性</th><th>属性含义</th><th>属性值</th></tr></thead><tbody><tr><td>font-family</td><td>使用什么字体</td><td>所有字体</td></tr><tr><td>font-style</td><td>字体是否斜体</td><td>normal,italic,oblique</td></tr><tr><td>font-weight</td><td>字体的粗细</td><td>normal,bold</td></tr><tr><td>font-size</td><td>字体的大小</td><td>绝对大小</td></tr></tbody></table><h3 id><a href="#" class="headerlink" title></a></h3><p>说明：</p><p>1）不建议在 **<code>font-family </code>**中设置超过宋体/黑体之外的字体，会导致未装字体的计算机显示不正常，也可以采用一</p><p>个字体系列，当某种字体不存在时，用后面的字体，由于中文文字的复杂性，点阵装的字体并不是全都适合于浏览器</p><p>观看，因此推荐使用标准的宋体或微软雅黑用于中文文字的显示，如果需要其他装饰性字体，应当多使用图片方式来</p><p>替代纯文本的显示。</p><p>2）字体大小的单位，绝对单位：in，cm，mm，pt；相对单位：em，ex，px，%；浏览器默认文字大小为<strong>16px</strong>。</p><hr><h3 id="2-文本属性"><a href="#2-文本属性" class="headerlink" title="2. 文本属性:"></a><strong>2. 文本属性:</strong></h3><table><thead><tr><th>属性</th><th>属性含义</th><th>属性值</th></tr></thead><tbody><tr><td>color</td><td>设置文本颜色</td><td>#xxx rgb() rgba()</td></tr><tr><td>text-indent</td><td>设置文本首行缩进</td><td>缩进值</td></tr><tr><td>text-align</td><td>文本对齐</td><td>left,right,center,justify</td></tr><tr><td>word-spacing</td><td>单词间距</td><td>间距值</td></tr><tr><td>letter-spacing</td><td>字母间距</td><td>间距值</td></tr><tr><td>text-decoration</td><td>文本修饰</td><td>none,underline,overline,line-through,blink</td></tr><tr><td>line-height</td><td>设置行高</td><td></td></tr><tr><td>vertical-align</td><td>垂直对齐</td><td>baseline,top,bottom,middle等</td></tr></tbody></table><hr><h3 id="3-背景属性"><a href="#3-背景属性" class="headerlink" title="3. 背景属性:"></a><strong>3. 背景属性:</strong></h3><table><thead><tr><th>属性</th><th>属性含义</th><th>属性值</th></tr></thead><tbody><tr><td>background-color</td><td>定义背景图</td><td>颜色</td></tr><tr><td>background-image</td><td>定义背景图案</td><td>图片路径 例：body{background-image:url(.jpg)}</td></tr><tr><td>background-repeat</td><td>背景图案重复方式</td><td>Repeat-x, Repeat-y, no-repeat</td></tr><tr><td>background-attachment</td><td>背景图案的初始位置</td><td>Scroll, Fixed（背景固定）</td></tr><tr><td>background-position</td><td>背景图案的初始位置</td><td>百分数，长度值，top, left, right, bottom, center等</td></tr><tr><td>background</td><td>合集</td><td>color image repeat attachment position</td></tr></tbody></table><hr><h3 id="4-列表属性"><a href="#4-列表属性" class="headerlink" title="4. 列表属性:"></a><strong>4. 列表属性:</strong></h3><table><thead><tr><th>属性</th><th>属性含义</th><th>属性值</th></tr></thead><tbody><tr><td>list-style-image</td><td>将图像设置为列表标志</td><td>ul li {list-style-image: url(xxx.gif)}</td></tr><tr><td>list-style-position</td><td>设置列表中列表项标志的位置</td><td>inside, outside</td></tr><tr><td>list-style-type</td><td>设置列表项标志的类型</td><td>disc, circle, square, decimal等</td></tr><tr><td>list-style</td><td>简写属性。(用于所有列表的属性设置于一个声明中)</td><td>合集 type position image</td></tr></tbody></table><hr><h3 id="5-表格属性"><a href="#5-表格属性" class="headerlink" title="*5. 表格属性*:"></a><strong><em>*5. 表格属性*</em>:</strong></h3><table><thead><tr><th>属性</th><th>属性含义</th><th>属性值</th></tr></thead><tbody><tr><td>border-collapse</td><td>设置是否把表格边框合并为单一的边框</td><td>separate, collapse</td></tr></tbody></table><hr><h3 id="6-尺寸属性"><a href="#6-尺寸属性" class="headerlink" title="*6. 尺寸属性:*"></a><em><strong>*6. 尺寸属性:*</strong></em></h3><table><thead><tr><th>属性</th><th>属性含义</th><th>属性值</th></tr></thead><tbody><tr><td>width</td><td>宽度</td><td>width: 960px;</td></tr><tr><td>min-width</td><td>最小宽度</td><td></td></tr><tr><td>max-width</td><td>最大宽度</td><td></td></tr><tr><td>height</td><td>高度</td><td>height:100px;</td></tr><tr><td>min-height</td><td>最小高度</td><td></td></tr><tr><td>max-height</td><td>最大高度</td><td></td></tr></tbody></table><p>需要明确元素盒子默认的宽度与高度。</p><p><strong>块级元素</strong>，默认宽度100%，高度由内容决定。</p><p><strong>行内元素</strong>，默认宽度与高度由内容决定。</p><hr><h3 id="7-边框属性"><a href="#7-边框属性" class="headerlink" title="7. 边框属性:"></a><strong>7. 边框属性:</strong></h3><h4 id="1）每个元素外面都可以有一个边框。"><a href="#1）每个元素外面都可以有一个边框。" class="headerlink" title="1）每个元素外面都可以有一个边框。"></a>1）每个元素外面都可以有一个边框。</h4><h4 id="2）边框可分为上，下，左，右，四个边框。"><a href="#2）边框可分为上，下，左，右，四个边框。" class="headerlink" title="2）边框可分为上，下，左，右，四个边框。"></a>2）边框可分为上，下，左，右，四个边框。</h4><h4 id="3）每个边框可以有颜色（-color），样式（style）、宽度（width-）三种属性。"><a href="#3）每个边框可以有颜色（-color），样式（style）、宽度（width-）三种属性。" class="headerlink" title="3）每个边框可以有颜色（**color），样式（style）、宽度（width**）三种属性。"></a>3）每个边框可以有颜色（**<code>color</code><strong>），样式（</strong><code>style</code><strong>）、宽度（</strong><code>width</code>**）三种属性。</h4><table><thead><tr><th>属性</th><th>属性描述</th><th>属性值</th></tr></thead><tbody><tr><td>border-style</td><td>边框样式</td><td>solid | none | dotted | dashed | double等</td></tr><tr><td>border-width</td><td>边框宽度</td><td>border-width: 2px;</td></tr><tr><td>border-color</td><td>边框颜色</td><td>颜色值</td></tr></tbody></table><hr><hr><hr><h2 id="七、盒模型"><a href="#七、盒模型" class="headerlink" title="七、盒模型"></a>七、盒模型</h2><h3 id="1-盒模型是-xhtml-css-布局页面中的核心。"><a href="#1-盒模型是-xhtml-css-布局页面中的核心。" class="headerlink" title="1. 盒模型是 **xhtml+css **布局页面中的核心。"></a>1. 盒模型是 **<code>xhtml+css </code>**布局页面中的核心。</h3><p>每个HTML元素都可以看作一个装了东西的盒子，盒子具有宽度（**<code>width</code><strong>）和高度（</strong><code>height</code>**），盒子里面的内容到盒</p><p>子的边框之间的距离即填充（**<code>padding</code><strong>），盒子本身有边框（</strong><code>border</code>**），而盒子边框外和其他盒子之间，还有边界</p><p>（**<code>margin</code>**）。</p><hr><h3 id="2-盒模型的四要素：content（内容）、padding（内边距）、border（边框）、margin（外边距）。"><a href="#2-盒模型的四要素：content（内容）、padding（内边距）、border（边框）、margin（外边距）。" class="headerlink" title="2. 盒模型的四要素：content（内容）、padding（内边距）、border（边框）、margin（外边距）。"></a>2. 盒模型的四要素：<strong>content（内容）、padding（内边距）、border（边框）、margin（外边距）</strong>。</h3><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227203543990-1747529267.png" alt="img"></p><p>**<code>margin</code>**：是盒子外面与其他元素的距离，用1到4个值来设置元素的外边距，每一个值都是长度、百分比或 **<code>auto</code>**，</p><p>允许使用负值。还可以使用**<code>margin-top</code><strong>、</strong><code>margin-right</code><strong>、</strong><code>margin-bottom</code><strong>、</strong><code>margin-left</code>**，外边距顺序依次是</p><p>上、右、下、左。</p><p>**<code>padding</code>**：内边距，指文本边框与文本之间的距离，使用方法和 **<code>margin </code>**相同。</p><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227203716740-46683690.gif" alt="img"></p><p>在 CSS 中，**<code>width</code>** 和 **<code>height </code>**指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，</p><p>但是会增加元素框的尺寸。</p><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227203815419-659688704.gif" alt="img"></p><p>如果有如下的CSS定义：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">#box&#123;<br>    width:70px;<br>    margin:10px;<br>    padding:5px;<br>   &#125;<br></code></pre></td></tr></table></figure><p> 则整个盒子占用的空间计算如下：</p><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227203940524-1496078203.jpg" alt="img"></p><hr><h3 id="3-IE6兼容性问题："><a href="#3-IE6兼容性问题：" class="headerlink" title="3. IE6兼容性问题："></a>3. IE6兼容性问题：</h3><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227204025987-170562459.jpg" alt="img"></p><hr><hr><hr><h2 id="八、块级元素与行内元素"><a href="#八、块级元素与行内元素" class="headerlink" title="八、块级元素与行内元素"></a>八、块级元素与行内元素</h2><p><strong>1. 块级元素（<code>block</code>）</strong>：一般是其他元素的容器，可容纳内联元素和其他块级元素，块级元素独占一行，宽度(<strong><code>width</code></strong>)默认为100%，高度(<strong><code>height</code></strong>)由内容决定(自行设置高度控制)。常见块级元素为**<code>div</code>和 <code>p</code>，<code>h</code>，**<code>**ul**。</code></p><hr><p><strong>2. 内联元素（<code>inline</code>）</strong>：内联元素只能容纳文本或者其他行内元素，它允许其他行内元素与其位于同一行，但宽度(<strong><code>width</code></strong>)和高度(<strong><code>height</code></strong>)不起作用，元素的宽度就是它包含的文字或图片的宽度，不可改变。常见的行内元素为**<code>a</code>**和 **<code>span</code>**。</p><p>块级元素和行内元素可通过 **<code>display </code>**属性进行强制转换：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">display : <span class="hljs-keyword">block</span> || <span class="hljs-keyword">inline</span> || none || <span class="hljs-keyword">inline</span>-<span class="hljs-keyword">block</span><br></code></pre></td></tr></table></figure><hr><p><strong>3. 内联块状元素（<code>inline-block</code>）</strong>就是同时具备内联元素、块状元素的特点，代码 **<code>display:inline-block</code><strong>就是将元素设置为内联块状元素。，</strong><code>&lt;img&gt;</code><strong>、</strong><code>&lt;input&gt; </code><strong>标签就是这种内联块状标签。</strong><code>inline-block</code>**元素特点：1、和其他元素都在一行上(内联特点)；2、元素的高度、宽度、行高以及顶和底边距都可设置(块状特点)。</p><hr><hr><hr><h2 id="九、CSS定位"><a href="#九、CSS定位" class="headerlink" title="九、CSS定位"></a>九、CSS定位</h2><p>CSS 有三种基本的定位机制：普通流、浮动和绝对定位（固定）。</p><h3 id="1-普通流"><a href="#1-普通流" class="headerlink" title="1. 普通流"></a><strong>1. 普通流</strong></h3><p>除非专门指定，否则所有框都在<strong>普通流</strong>中定位。也就是说，普通流中的元素的位置由元素在 X(HTML) 中的位置决定。</p><p>块级框从上到下一个接一个地排列，框之间的垂直距离是由框的垂直外边距计算出来。</p><hr><h3 id="2-浮动"><a href="#2-浮动" class="headerlink" title="2. 浮动"></a><strong>2. 浮动</strong></h3><p><strong>浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。</strong></p><p><strong>由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。</strong></p><p>浮动的元素<strong>脱离文档流</strong>，之前占用<strong>空间会释放</strong>。</p><p><strong>浮动定位</strong>：可以设置元素的**<code>float </code>**属性为 <code>left </code>或 **<code>right </code>**，才设置元素浮动，使得块级元素可以 并排显示。</p><p>但一定注意，设置浮动的同时一定要先设置块状元素的宽度(先设置大的框)，且需要浮动的几个元素宽度加起来一定要<strong>小于</strong>容器元素的宽度。</p><p>请看下图，当把框 1 向右浮动时，它脱离文档流并且向右移动，直到它的右边缘碰到包含框的右边缘：</p><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227205538346-295491566.png" alt="img"></p><p>再看下图，当框 1 向左浮动时，它脱离文档流并且向左移动，直到它的左边缘碰到包含框的左边缘。因为它不再处于文档流中，所以它不占据空间，实际上覆盖住了框 2，使框 2 从视图中消失。**(脱离文档流:不受普通流从上到下的管控)**</p><p>如果把所有三个框都向左移动，那么框 1 向左浮动直到碰到包含框，另外两个框向左浮动直到碰到前一个浮动框。</p><p> <img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227205634961-540188892.png" alt="img"></p><p>如下图所示，如果包含框太窄，无法容纳水平排列的三个浮动元素，那么其它浮动块向下移动，直到有足够的空间。如果浮动元素的高度不同，那么当它们向下移动时可能被其它浮动元素“卡住”：</p><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227205700722-2036155830.png" alt="img"></p><hr><h3 id="3-行框和清理"><a href="#3-行框和清理" class="headerlink" title="3. 行框和清理"></a><strong>3. 行框和清理</strong></h3><p><code>float</code>属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使<strong>文本围绕在图像周围</strong></p><p>浮动框旁边的行框被缩短，从而给浮动框留出空间，行框围绕浮动框。</p><p>因此，创建浮动框可以使文本围绕图像：<img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/image-20220106110627366.png" alt="image-20220106110627366"></p><p>要想阻止行框围绕浮动框(围绕浮动框会使浮动起来的部分盖住下面的文档流中元素内容？不是 是下面的块级元素的文字会贴着图片环绕显示 但是要想用文字不饶图片 例如块级元素p使用clear可以清除环绕)，需要对该框应用 <strong><code>clear</code></strong> 属性。clear 属性的值可以是 <strong><code>left</code><strong>、</strong><code>right</code><strong>、</strong><code>both</code></strong> 或 **<code>none</code>**，它表示框的哪些边不应该挨着浮动框。</p><p>为了实现这种效果，在被清理的元素的上外边距上添加足够的空间，使元素的顶边缘垂直下降到浮动框下面：</p><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/image-20220106110606624.png" alt="image-20220106110606624"></p><p>浮动本来是用来实现图文混排的，可是在具体实践中，常常用来将纵向排列的块级元素变成水平排列，但是浮动有一个缺陷，就是浮动元素会脱离文档流，从而造成父元素的塌陷，为了使得父元素也能包裹浮动元素，需要做浮动的清理。</p><p>清理浮动的方法1：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sidebar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 额外标签法 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;clear:both&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 清理浮动的方法2：使父元素形成BFC</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 通过父元素overflow:hidden来形成BFC --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;overflow: hidden;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sidebar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><hr><h3 id="4-相对、绝对定位"><a href="#4-相对、绝对定位" class="headerlink" title="4. 相对、绝对定位"></a><strong>4. 相对、绝对定位</strong></h3><p>定位属性</p><p>**<code>position </code>**属性：</p><p>**<code>static</code>**：position的默认值，一般不设置position属性时，会按照正常的文档流进行排列。</p><p><strong><code>relative</code><strong>：元素框相对于</strong>原本的位置</strong>偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。</p><p>**<code>absolute</code><strong>：当元素的父对象(或曾祖父，只要是父级对象)<strong>parent</strong> 的</strong><code>position</code><strong>属性不是默认值的情况，此时按照这个parent来进行定位，如果没有这个对象，相对</strong><code>body</code>**元素定位（元素将脱离文档流）。</p><p>**<code>fixed</code><strong>：总是以</strong><code>body</code>**为定位对象的，按照浏览器的窗口进行定位，元素将脱离文档流。</p><table><thead><tr><th>属性</th><th>属性描述</th><th>属性值</th></tr></thead><tbody><tr><td>position</td><td>把元素放置到一个静态的、相对的、绝对的、或固定的位置中。</td><td><strong>absolute/fixed/relative/static</strong></td></tr><tr><td>top</td><td>定义了一个定位元素的上外边距边界与其包含块上边界之间的偏移。</td><td></td></tr><tr><td>right</td><td>定义了定位元素右外边距边界与其包含块右边界之间的偏移。</td><td></td></tr><tr><td>bottom</td><td>定义了定位元素下外边距边界与其包含块下边界之间的偏移。</td><td></td></tr><tr><td>left</td><td>定义了定位元素左外边距边界与其包含块左边界之间的偏移。</td><td></td></tr><tr><td>overflow</td><td>设置当元素的内容溢出其区域时发生的事情。</td><td><strong>visible/hidden/scroll/auto</strong></td></tr><tr><td>clip</td><td>设置元素的形状。元素被剪入这个形状之中，然后显示出来。</td><td><em><strong>*rect（top, right, bottom, left）*</strong></em></td></tr><tr><td>z-index</td><td>设置元素的堆叠顺序。</td><td>如果为正数，则离用户更近，为负数则表示离用户更远</td></tr></tbody></table><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><table><thead><tr><th>属性</th><th>属性描述</th><th>属性值</th></tr></thead><tbody><tr><td>visibility</td><td>规定元素是否可见（不脱离文档流）</td><td><strong>visible/hidden</strong></td></tr><tr><td>display</td><td>设置为none值，元素不可见（脱离文档流）</td><td><strong>none/block/inline/inline-block</strong></td></tr></tbody></table><p>**<code>float </code>**浮动与清除参考：</p><p><a href="http://www.w3school.com.cn/css/css_positioning_floating.asp">http://www.w3school.com.cn/css/css_positioning_floating.asp</a></p><p><a href="https://zhuanlan.zhihu.com/p/159461355">https://zhuanlan.zhihu.com/p/159461355</a></p><h2 id="十、清除网页默认样式"><a href="#十、清除网页默认样式" class="headerlink" title="十、清除网页默认样式"></a>十、清除网页默认样式</h2><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">*&#123;<br><span class="hljs-string">margin</span>：<span class="hljs-string">0</span>；<br><span class="hljs-string">padding</span>：<span class="hljs-string">0</span><br>&#125;<br> <span class="hljs-string">li</span>&#123;<br>  <span class="hljs-built_in">list-style:none;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>复杂项目可用<strong>reset.css</strong>清除css默认样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html">html, body, div, span, applet, object, iframe,<br>h1, h2, h3, h4, h5, h6, p, blockquote, pre,<br>a, abbr, acronym, address, big, cite, code,<br>del, dfn, em, img, ins, kbd, q, s, samp,<br>small, strike, strong, sub, sup, tt, var,<br>b, u, i, center,<br>dl, dt, dd, ol, ul, li,<br>fieldset, form, label, legend,<br>table, caption, tbody, tfoot, thead, tr, th, td,<br>article, aside, canvas, details, embed, <br>figure, figcaption, footer, header, hgroup, <br>menu, nav, output, ruby, section, summary,<br>time, mark, audio, video &#123;<br>margin: 0;<br>padding: 0;<br>border: 0;<br>font-size: 100%;<br>font: inherit;<br>vertical-align: baseline;<br>&#125;<br>/* HTML5 display-role reset for older browsers */<br>article, aside, details, figcaption, figure, <br>footer, header, hgroup, menu, nav, section &#123;<br>display: block;<br>&#125;<br>body &#123;<br>line-height: 1;<br>&#125;<br>ol, ul &#123;<br>list-style: none;<br>&#125;<br>blockquote, q &#123;<br>quotes: none;<br>&#125;<br>blockquote:before, blockquote:after,<br>q:before, q:after &#123;<br>content: &#x27;&#x27;;<br>content: none;<br>&#125;<br>table &#123;<br>border-collapse: collapse;<br>border-spacing: 0;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML笔记</title>
    <link href="/2022/01/10/HTML%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/01/10/HTML%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="一、head标签"><a href="#一、head标签" class="headerlink" title="一、head标签"></a>一、head标签</h3><p>1.作用：head标签用于保存页面的元数据</p><p>2.包含的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs html">1. <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>我的测试站点<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> 它可以为文档添加标题<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">2. 元数据：<span class="hljs-tag">&lt;<span class="hljs-name">meta</span>&gt;</span>元素<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> 指定文档中字符的编码<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span>&gt;</span> 元素包含了name 和 content 特性：<br>name 指定了meta 元素的类型； 说明该元素包含了什么类型的信息。<br>content 指定了实际的元数据内容。<br><br><span class="hljs-comment">&lt;!-- &lt;meta http-equiv=&quot;refresh&quot; content=&quot;3&quot;&gt;  每隔三秒刷新一次当前页面 --&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">3. 应用CSS和JavaScript<br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span>&gt;</span> 元素经常位于文档的头部。这个link元素有2个属性，rel=&quot;stylesheet&quot;表明这是文档的样式表，而 href包含了样式表文件的路径：<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;my-css-file.css&quot;</span>&gt;</span><br>连接外部的Css样式表<br><br>js脚本位于 <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span> 与 <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> 标签之间。<br>在HTML body部分中的JavaScripts会在页面加载的时候被执行。<br>在HTML head部分中的JavaScripts会在被调用的时候才执行。<br></code></pre></td></tr></table></figure><h3 id="二、img标签"><a href="#二、img标签" class="headerlink" title="二、img标签"></a>二、img标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;some_text&quot;</span>&gt;</span> <br>1. 源属性（Src）<br>URL 指存储图像的位置。如果名为 &quot;pulpit.jpg&quot; 的图像位于 www.runoob.com 的 images 目录中，那么其 URL 为 http://www.runoob.com/images/pulpit.jpg。 <br><br>2. Alt属性<br>在浏览器无法载入图像时，替换文本属性告诉读者她们失去的信息<br><br>3. 设置图片的宽高<br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;pulpit.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Pulpit rock&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;304&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;228&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="三、Table表格"><a href="#三、Table表格" class="headerlink" title="三、Table表格"></a>三、Table表格</h3><p>表格由 <table> 标签来定义。每个表格均有若干行（由 <tr> 标签定义），每行被分割为若干单元格（由  <td> 标签定义）。字母 td 指表格数据（table  data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等</td></tr></table></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Header 1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Header 2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 1, cell 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 1, cell 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 2, cell 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 2, cell 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>一行行排列 每行里面有td(table data)单元格 th为表头<br></code></pre></td></tr></table></figure><h3 id="四、List列表"><a href="#四、List列表" class="headerlink" title="四、List列表"></a>四、List列表</h3><p>List列表分为有序列表<ol></ol>  无序列表<ul></ul>  定义列表<dl></dl></p><ol><li>有序列表<ol></ol></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span> <br><br>列表前有个圆点<br>Coffee<br>Milk<br><br></code></pre></td></tr></table></figure><ol start="2"><li>无序列表<ul></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span> <br><br><br>1. Coffee<br>2. Milk<br><br></code></pre></td></tr></table></figure><ol start="3"><li>定义列表<dl></dl></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>- black hot drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>- white cold drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span> <br><br><br>Coffee<br>    - black hot drink<br>Milk<br>    - white cold drink <br></code></pre></td></tr></table></figure><h3 id="五、div-和span"><a href="#五、div-和span" class="headerlink" title="五、div 和span"></a>五、div 和span</h3><h3 id="六、表单元素"><a href="#六、表单元素" class="headerlink" title="六、表单元素"></a>六、表单元素</h3><ol><li>表单元素</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>.<br>input 元素<br>.<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>表单内部元素</li></ol><p>文本域（Text Fields）输入框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>First name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;firstname&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>Last name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastname&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span> 密码暗文<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>单选按钮（Radio Buttons）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>Male<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>Female<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>复选框（Checkboxes）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;vehicle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Bike&quot;</span>&gt;</span>I have a bike<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;vehicle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Car&quot;</span>&gt;</span>I have a car<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>提交按钮(Submit Button)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span> 定义了提交按钮.<br><br>当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收到的输入数据进行相关的处理。<br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;input&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;html_form_action.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>Username: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span> <br></code></pre></td></tr></table></figure><p><img src="/2022/01/10/HTML%E7%AC%94%E8%AE%B0/image-20220105165430266-16418131253401.png" alt="image-20220105165430266"></p><p><img src="/2022/01/10/HTML%E7%AC%94%E8%AE%B0/image-20220105165455417-16418131253472.png" alt="image-20220105165455417"></p><h3 id="七、Css"><a href="#七、Css" class="headerlink" title="七、Css"></a>七、Css</h3><p>Css的使用有三种方法：</p><p>1.内联样式在标签内部使用style属性设置标签的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-family:arial;color:red;font-size:20px;&quot;</span>&gt;</span>一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.内部样式表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">在<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> 部分通过 <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="xml">标签定义内部样式表</span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml"><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-color</span>:yellow;&#125;</span></span><br><span class="css"><span class="xml"><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">color</span>:blue;&#125;</span></span><br><span class="css"><span class="xml"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.外部样式表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mystyle.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>CSS样式按照优先级排序如下：一、内联式：使用当前元素的style属性进行样式设置。只作用于当前元素，对于另一个同名的元素则不起作用。二、内嵌式：在HTML文档头部定义多个style元素，实现多个样式。三、外部引用式</p><h3 id="八、Javascript"><a href="#八、Javascript" class="headerlink" title="八、Javascript"></a>八、Javascript</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html">javascript代码可以写在：<br>1、用script标签，写在Html网页的Body部分中；<br>2、用script标签，写在Html网页的head部分中<br><br>3、写在后缀名为“.js”的文本文件里，并用script标签的src属性引入Html网页。<br>Javascript写在外部js文件中<br>将Javascript程序放到一个后缀名为.js的文本文件里。<br>在HTML里引用外部文件里的Javascript，应在Head里写一句，其中src的值，就是Javascript所在文件的文件路径。<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/001.js&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br><br>js脚本位于 <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span> 与 <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> 标签之间。<br>在HTML body部分中的JavaScripts会在 页面加载 的时候被执行。通常被用来生成页面的内容<br>在HTML head部分中的JavaScripts会在 被调用 的时候才执行。把脚本放在head中时，可以保证脚本在任何调用之前被加载。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
