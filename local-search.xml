<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Javascript_事件冒泡与事件委托</title>
    <link href="/2022/02/05/Javascript-%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
    <url>/2022/02/05/Javascript-%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Javascript事件冒泡与事件委托"><a href="#Javascript事件冒泡与事件委托" class="headerlink" title="Javascript事件冒泡与事件委托"></a>Javascript事件冒泡与事件委托</h1><p>​        用户与网页发生交互的时候会发生事件，这些事件触发了以后并不会简单的结束，还会触发事件流。某个元素被触发事件的时候该元素处于文档之中，单个元素被触发之后处于文档中的其他元素也会被影响。</p><h2 id="一、事件冒泡"><a href="#一、事件冒泡" class="headerlink" title="一、事件冒泡"></a>一、事件冒泡</h2><p>当网页中的元素触发事件之后，会以冒泡的形式从底层向顶层传播</p><h2 id="二、事件捕获"><a href="#二、事件捕获" class="headerlink" title="二、事件捕获"></a>二、事件捕获</h2><p>网页中的元素触发事件之后，目标元素不会马上被触发，而是由顶层向底层逐步捕获目标元素</p><h2 id="三、DOM事件流"><a href="#三、DOM事件流" class="headerlink" title="三、DOM事件流"></a>三、DOM事件流</h2><p>在DOM2中规定，事件流会有三个阶段：事件捕获阶段、处于目标阶段、事件冒泡阶段</p><p><img src="/2022/02/05/Javascript-%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/image-20220204173631043.png" alt="image-20220204173631043"></p><h2 id="四、事件处理程序"><a href="#四、事件处理程序" class="headerlink" title="四、事件处理程序"></a>四、事件处理程序</h2><p>​        事件处理程序是当事件触发时所要作出什么反应的程序函数，可以通过不同的方式进行事件绑定。(写好一个函数，当什么元素触发什么事件的时候将写好的函数给到对应的事件处理属性）。分为 <strong>HTML事件处理程序</strong> 、<strong>DOM0级事件处理程序</strong> 、 <strong>DOM2级事件处理程序</strong> .</p><p>​        <strong>不同的事件处理程序使用的事件流顺序不同</strong> ，HTML事件处理程序与DOM0级事件处理程序都是采用事件冒泡、DOM2可以指定使用哪种事件流处理方式(默认也是事件冒泡方式) </p><p>例如下面的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;grandmother&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 200px; width: 200px; border: 2px solid black;&quot;</span>&gt;</span>grandmother<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mother&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 120px; width: 120px; border: 2px solid black;&quot;</span>&gt;</span>mother<br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 80px; width: 80px; border: 2px solid black;&quot;</span>&gt;</span>son<br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;baby&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 50px; width: 50px; border: 2px solid black;&quot;</span>&gt;</span>baby<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> grandmother = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;grandmother&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">        <span class="hljs-keyword">var</span> mother = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;mother&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">        <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;son&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">        <span class="hljs-keyword">var</span> baby = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;baby&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayName</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;I am &quot;</span> + <span class="hljs-built_in">this</span>.className);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        baby.addEventListener(<span class="hljs-string">&quot;click&quot;</span>,sayName,<span class="hljs-literal">false</span>); <span class="hljs-comment">//冒泡</span></span><br><span class="javascript">        son.addEventListener(<span class="hljs-string">&quot;click&quot;</span>,sayName,<span class="hljs-literal">true</span>); <span class="hljs-comment">//捕获</span></span><br><span class="javascript">        mother.addEventListener(<span class="hljs-string">&quot;click&quot;</span>,sayName,<span class="hljs-literal">true</span>); <span class="hljs-comment">//捕获</span></span><br><span class="javascript">        grandmother.onclick = sayName; <span class="hljs-comment">//冒泡</span></span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//点击baby输出 mother、son、baby、grandmother</span></span><br><span class="javascript"></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/02/05/Javascript-%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/image-20220204181207818.png" alt="image-20220204181207818"></p><p>​        解释：上面的例子使用了不同的时间处理程序来执行，可以对比出事件捕获与事件冒泡的过程与优先级。从事件流的三个阶段来看，事件捕获是最先的，所以使输出son和mother这两个，而事件捕获是先从外层再到内层，所以先输出mother再输出son；之后到了事件冒泡，所以输出的是baby和grandmother，而事件冒泡是由底层再到外层，所以先输出baby再输出grandmother。</p><p>​        顺序是 <strong>先捕获(先外层再内层)再冒泡(先内层再外层)</strong></p><h2 id="五、事件委托"><a href="#五、事件委托" class="headerlink" title="五、事件委托"></a>五、事件委托</h2><h2 id="（一）、为什么要使用事件委托"><a href="#（一）、为什么要使用事件委托" class="headerlink" title="（一）、为什么要使用事件委托"></a>（一）、为什么要使用事件委托</h2><p>​        要理解事件委托，首先要理解为什么要使用事件委托。因为Javascript在关于性能调优上的直观思想就是减少DOM操作，减少内存开销。比如下面这个例子：</p><p>​        当要实现点击li结点输出结点的文字时，常规思路是使用循环的方式为每个li结点绑定点击事件，然后再输出对应的文字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>岛田庄司<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>鲇川哲也<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>柯南道尔<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>阿加莎克里斯蒂<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> lis = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;li&quot;</span>);</span><br><span class="javascript">        <span class="hljs-comment">//循环绑定事件</span></span><br><span class="javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;lis.length;i++)&#123;</span><br><span class="javascript">            lis[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(lis[i].innerHTML);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/02/05/Javascript-%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/image-20220205102324701.png" alt="image-20220205102324701"></p><p>上面这种做法为每个li结点都绑定了点击事件，四个li对应着四个不同的function对象(Object类型)，这种情况当然允许这样写代码，但是在li的数目变多的时候，这对页面性能的开销是十分巨大的。为了解决类似问题，引入了事件委托这种操作。</p><h2 id="（二）、什么是事件委托及原理"><a href="#（二）、什么是事件委托及原理" class="headerlink" title="（二）、什么是事件委托及原理"></a>（二）、什么是事件委托及原理</h2><p>​        事件委托的理解是 <strong>本来应该加在子元素身上的事件，我们却把事件加在了其父级身上</strong> .委托父级元素统一处理某一类问题。</p><p>​        原理：理解事件委托涉及 事件冒泡 与 事件对象 的属性target。</p><p>​        有一个问题：子元素的事件添加到了父元素身上，那如何区分事件本来属于哪个子元素呢。这就要用到事件对象event 。事件对象记录着事件发生的所有信息，其中的event.target属性代表真实是哪个DOM结点触发了事件。</p><p>​        将原理整合起来的理解就是： <strong>将各类子元素所涉及的事件利用事件冒泡统一委托给父级元素(集中管理)，然后利用event.target定位具体是哪个子元素触发了事件，然后进行关于该子元素的需要触发对应的事件。</strong></p><h2 id="（三）、事件委托的实现"><a href="#（三）、事件委托的实现" class="headerlink" title="（三）、事件委托的实现"></a>（三）、事件委托的实现</h2><p>​        将上述的 li 例子使用事件委托的方式进行优化如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>岛田庄司<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>鲇川哲也<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>柯南道尔<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>阿加莎克里斯蒂<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">       <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;ul&quot;</span>); <span class="hljs-comment">//获取父级元素</span></span><br><span class="javascript">       <span class="hljs-comment">//为父级元素绑定点击事件，然后赋值事件处理函数</span></span><br><span class="javascript">       ul.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript">           <span class="hljs-comment">//使用事件对象target属性定位具体点击了谁</span></span><br><span class="javascript">           <span class="hljs-built_in">console</span>.log(event.target.innerHTML);</span><br><span class="javascript">       &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​        上面使用了事件委托的方式对代码进行了优化，实现同样的功能但是由原来的四个事件绑定减少为一个事件绑定。函数减少了对应的内存占用得到优化。</p><h2 id="（四）、兼容性"><a href="#（四）、兼容性" class="headerlink" title="（四）、兼容性"></a>（四）、兼容性</h2><p>​        Event对象提供了一个属性叫target，可以返回事件的目标节点，我们成为事件源，也就是说，target就可以表示为当前的事件操作的dom。这个是有兼容性的，标准浏览器用event.target，IE浏览器用event.srcElement.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript_事件</title>
    <link href="/2022/02/05/Javascript-%E4%BA%8B%E4%BB%B6/"/>
    <url>/2022/02/05/Javascript-%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Javascript事件"><a href="#Javascript事件" class="headerlink" title="Javascript事件"></a>Javascript事件</h1><p>​        javascript中 <strong>事件</strong> 用于实现HTML元素与Javascript之间的交互，当浏览器窗口或文档中发生一些特定交互的瞬间。例如在页面加载完成、点击某个按钮、文本框输入文字等。当在这些事件发生的时候希望做一些事情(跳转页面、文本输入有效性等)，可以用JS来实现。</p><p>​        事件可以是<strong>浏览器行为</strong>也可以是<strong>用户行为</strong>。</p><h2 id="一、事件流"><a href="#一、事件流" class="headerlink" title="一、事件流"></a>一、事件流</h2><p>​        事件流描述的是从页面中接收事件的顺序，因为页面文档中的HTML元素不是单独存在的，而是一个嵌套结构。所以当某个页面元素A触发某个事件的时候，不仅仅是直观上的某个元素触发了事件，包含元素A的容器元素也触发了相同的事件(比如点击了页面中的某个div触发点击事件后，实际上也点击了包含div的body元素，然后再一直往外扩散)。</p><p>​        <strong>事件冒泡</strong> 是目前大多数浏览器都支持的事件流(也是最常用的)，即事件开始是有具体的元素接收然后逐级向上传播到较为不具体的元素(由内及外)。<strong>事件捕获</strong> 的思想与事件冒泡的思想 <strong>相反</strong> (由外及里)</p><p><img src="/2022/02/05/Javascript-%E4%BA%8B%E4%BB%B6/image-20220204101610438-16440662296361.png" alt="image-20220204101610438"></p><p><img src="/2022/02/05/Javascript-%E4%BA%8B%E4%BB%B6/image-20220204101624279-16440662296372.png" alt="image-20220204101624279"></p><p>事件冒泡的顺序：</p><p><img src="/2022/02/05/Javascript-%E4%BA%8B%E4%BB%B6/image-20220204101655051-16440662296383.png" alt="image-20220204101655051"></p><h2 id="二、事件处理程序"><a href="#二、事件处理程序" class="headerlink" title="二、事件处理程序"></a>二、事件处理程序</h2><p>​        事件是用户或浏览器自身执行的某种动作，<strong>响应</strong> 这个事件的 <strong>函数</strong> 就是事件处理程序。事件处理程序函数的开头都是on开头(点击事件的onclick、加载事件的onload)。而为事件指定处理程序的方式(JS代码和触发事件的HTML元素之间的绑定方式)有如下几种：</p><h3 id="（一）、HTML事件处理程序"><a href="#（一）、HTML事件处理程序" class="headerlink" title="（一）、HTML事件处理程序"></a>（一）、HTML事件处理程序</h3><p>HTML元素内有对应的 <strong>属性</strong> 支持该HTML元素触发相应的事件处理程序，有两种写法。</p><p>1、直接在对应的事件里面写JS代码触发响应动作。</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;Hello&#x27;)&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Show Message&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、写好JS代码，然后属性绑定写好的JS函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;showMessage()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Show Message&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showMessage</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        alert(<span class="hljs-string">&quot;hello&quot;</span>);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> showMess = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        alert(<span class="hljs-string">&quot;hello&quot;</span>);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-comment">//两种函数定义方式在使用HTML事件处理程序绑定HTML元素的时候都要加上()</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>缺点</strong> : 计算机的编译顺序是由上至下的，如果JS函数定义在按钮之后而在解析JS函数之前就点击了按钮，这个时候会引发错误(按钮中的onclick属性绑定的函数还未定义)</p><h3 id="（二）、DOM0-级事件处理程序"><a href="#（二）、DOM0-级事件处理程序" class="headerlink" title="（二）、DOM0 级事件处理程序"></a>（二）、DOM0 级事件处理程序</h3><p>​        这种方式是将一个函数赋值给一个事件处理程序属性(拿到元素引用，用点运算符访问事件处理程序属性，然后将函数赋值给属性)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Show Message&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> showMess = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            alert(<span class="hljs-string">&quot;hello&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="javascript">        btn.onclick = showMess; <span class="hljs-comment">//函数赋值给属性</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="（三）、DOM2-级事件处理程序"><a href="#（三）、DOM2-级事件处理程序" class="headerlink" title="（三）、DOM2 级事件处理程序"></a>（三）、DOM2 级事件处理程序</h3><p>​        DOM2 级事件指定了两个方法用于处理 <strong>指定</strong> 和 <strong>删除</strong> 事件处理程序的操作：<code>addEventListner()</code> 与 <code>removeEventListner()</code> 。<code>addEventListner()</code> 用于注册元素事件， <code>removeEventListner()</code> 用于移除使用add方法注册的事件。 </p><p>​        这个函数接收三个参数：要处理的事件名(click、hover等)、事件处理程序函数(Object类型)、布尔值(不写默认false使用冒泡)。最后的布尔值指定的是ture代表在 <strong>捕获阶段</strong> 调用事件处理程序、false代表在 <strong>冒泡阶段</strong> 调用事件处理程序。(不建议使用true在捕获阶段调用事件处理程序)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Show Message&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        </span><br><span class="javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> hander = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//this这里指的是btn引用本身，在IE事件处理程序中this代表的是window对象</span></span><br><span class="javascript">            <span class="hljs-comment">//跨浏览器时得区分处理</span></span><br><span class="javascript">            alert(<span class="hljs-built_in">this</span>.id); </span><br><span class="javascript">            alert(<span class="hljs-string">&quot;hello&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        btn.addEventListener(<span class="hljs-string">&quot;click&quot;</span>,hander,<span class="hljs-literal">false</span>);</span><br><span class="javascript">        <span class="hljs-comment">// btn.removeEventListener(&quot;click&quot;,hander,false);</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是使用匿名函数会遇到无法删除事件的情况，原因是使用匿名函数的时候 事件处理程序函数 对应的是一个引用类型的Object对象，虽然代码一样但是在内存中对应着两个不同的引用，故无法删除事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Show Message&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        </span><br><span class="javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="javascript">        </span><br><span class="javascript">        btn.addEventListener(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            alert(<span class="hljs-built_in">this</span>.id);</span><br><span class="javascript">            alert(<span class="hljs-string">&quot;hello&quot;</span>);</span><br><span class="javascript">        &#125;,<span class="hljs-literal">false</span>);</span><br><span class="javascript"></span><br><span class="javascript">        btn.removeEventListener(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            alert(<span class="hljs-built_in">this</span>.id);</span><br><span class="javascript">            alert(<span class="hljs-string">&quot;hello&quot;</span>);</span><br><span class="javascript">        &#125;,<span class="hljs-literal">false</span>);</span><br><span class="javascript">        <span class="hljs-comment">//两个匿名函数对应着不同的引用，代码一样但是内存中引用不一样，故无法删除事件</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="（四）、IE事件处理程序"><a href="#（四）、IE事件处理程序" class="headerlink" title="（四）、IE事件处理程序"></a>（四）、IE事件处理程序</h3><p>类比于DOM2事件处理程序的两个方法：attachEvent() 与 detachEvent() 。</p><p>IE事件流使用事件冒泡，所以只有两个函数参数：事件处理程序名称 与 事件处理程序函数</p><p>使用attach加上的只能detach删除，注意点也同上述的DOM2的匿名函数一样。</p><p>只在IE和Opera浏览器支持</p><h3 id="（五）、跨浏览器的事件处理程序"><a href="#（五）、跨浏览器的事件处理程序" class="headerlink" title="（五）、跨浏览器的事件处理程序"></a>（五）、跨浏览器的事件处理程序</h3><p>编写条件判断对不同浏览器所支持的事件处理程序进行分类处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> EventUtil=&#123;<br>            <span class="hljs-attr">addHandler</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">element,type,hander</span>)</span>&#123;<br>                <span class="hljs-keyword">if</span>(element.addEventListener)&#123;<br>                    element.addEventListener(type,hander,<span class="hljs-literal">false</span>);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(element,attachEvent)&#123;<br>                    element.attachEvent(<span class="hljs-string">&quot;on&quot;</span>+type,hander);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    element[<span class="hljs-string">&quot;on&quot;</span>+type]=hander;<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">removeHandler</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">element,type,hander</span>)</span>&#123;<br>                <span class="hljs-keyword">if</span>(element.removeEventListener)&#123;<br>                    element.removeEventListener(type,hander,<span class="hljs-literal">false</span>);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(element.detachEvent)&#123;<br>                    element.detachEvent(<span class="hljs-string">&quot;on&quot;</span>+type,hander);<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    element[<span class="hljs-string">&quot;on&quot;</span>+type]=<span class="hljs-literal">null</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>调用时 EventUntil.addhander();</p><h2 id="三、事件对象"><a href="#三、事件对象" class="headerlink" title="三、事件对象"></a>三、事件对象</h2><p>​        在触发DOM上的某个事件时，会产生一个事件对象event。当一个事件发生的时候，和当前这个对象发生的这个事件有关的一些详细信息（包括导致事件的元素、事件的类型、以及其它与特定事件相关的信息等。这个对象是在执行事件时，浏览器通过函数传递过来的。）都会被临时保存到一个指定的地方——event对象，供我们在需要的时候调用。</p><h3 id="（一）、DOM中的事件对象"><a href="#（一）、DOM中的事件对象" class="headerlink" title="（一）、DOM中的事件对象"></a>（一）、DOM中的事件对象</h3><p>​        当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递进响应函数，但是这个事件对象是看不见的，用形参来接收再使用。 <strong>事件对象中封装了当前事件相关的一切信息</strong> (鼠标坐标、键盘按键哪个有被按下等)</p><p>​        <strong>与相应事件有关的信息都保存在浏览器传入事件处理函数的事件对象中</strong>，常用DOM0方式操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;areaDiv&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 2px solid black;height: 50px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;MsgDiv&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 2px solid black;height: 30px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 获取大Div</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> areaDiv = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;areaDiv&quot;</span>);</span><br><span class="javascript">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="javascript">            在DOM结点调用事件属性的时候，</span></span><br><span class="hljs-comment"><span class="javascript">            赋值给属性的事件处理函数中浏览器会传入一个事件对象进事件处理函数中，</span></span><br><span class="hljs-comment"><span class="javascript">            包含了该事件属性在时间触发时的一切信息</span></span><br><span class="hljs-comment"><span class="javascript">        */</span> </span><br><span class="javascript">        areaDiv.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">// alert(event.clientX); //事件对象的属性，显示鼠标的横坐标</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> x = event.clientX;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> y = event.clientY;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> MsgDiv = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;MsgDiv&quot;</span>);</span><br><span class="javascript">            MsgDiv.innerHTML = <span class="hljs-string">&quot;x:&quot;</span> + x + <span class="hljs-string">&quot;,y:&quot;</span> + y; </span><br><span class="javascript">            <span class="hljs-comment">//显示鼠标在areaDiv中移动时鼠标位置的坐标(这个信息保存在浏览器传入的事件对象中)</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/02/05/Javascript-%E4%BA%8B%E4%BB%B6/image-20220204153333411-16440662296384.png" alt="image-20220204153333411"></p><h3 id="（二）、IE中的事件对象"><a href="#（二）、IE中的事件对象" class="headerlink" title="（二）、IE中的事件对象"></a>（二）、IE中的事件对象</h3><p>​        与DOM中的事件对象不一样，IE浏览器早期版本IE8以前，event对象不是传入到事件处理函数中的实参，event对象保存在window对象下作为全局变量使用，这里考虑到的是浏览器的兼容性问题，区别于DOM的事件对象。(下面是IE8不兼容的情况)</p><p><img src="/2022/02/05/Javascript-%E4%BA%8B%E4%BB%B6/image-20220204154321003-16440662296385.png" alt="image-20220204154321003"></p><p>解决办法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> x = <span class="hljs-built_in">window</span>.event.clientX;<br><span class="hljs-keyword">var</span> y = <span class="hljs-built_in">window</span>.event.clientY;<br></code></pre></td></tr></table></figure><h3 id="（三）、跨浏览器的事件对象"><a href="#（三）、跨浏览器的事件对象" class="headerlink" title="（三）、跨浏览器的事件对象"></a>（三）、跨浏览器的事件对象</h3><p>​        使用条件判断处理浏览器兼容性问题解决事件对象形式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">areaDiv.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;<br>event = event || <span class="hljs-built_in">window</span>.event; <span class="hljs-comment">//处理兼容问题</span><br>...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（四）、事件对象的属性（target与currentTarget）"><a href="#（四）、事件对象的属性（target与currentTarget）" class="headerlink" title="（四）、事件对象的属性（target与currentTarget）"></a>（四）、事件对象的属性（target与currentTarget）</h3><p>事件对象有两个常用的属性：target与currentTarget；</p><p>​        target代表的是真正发生的事件的DOM结点(你点击了什么target就代表什么)，currentTarget代表的是当前事件发生在哪个DOM结点上(由于事件冒泡的原因，由内层往外层冒泡的过程中，会涉及到多个DOM结点，这个时候使用currentTarget定位到目前具体到哪个DOM结点上了)，这里的target属性在 <strong>事件委托</strong> 上会用到。</p><p><strong>区分点</strong> ：event.target 与 this </p><p>event.target返回的是触发事件的对象(元素)，this返回的是绑定事件的对象(元素)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>岛田庄司<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>鲇川哲也<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>柯南道尔<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>阿加莎克里斯蒂<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;ul&quot;</span>);</span><br><span class="javascript">        <span class="hljs-comment">// DOM2级写法,为ul绑定事件</span></span><br><span class="javascript">        ul.addEventListener(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(event.target); <span class="hljs-comment">//输出触发事件的元素 li</span></span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//输出绑定事件的元素 ul</span></span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/02/05/Javascript-%E4%BA%8B%E4%BB%B6/image-20220205210232245.png" alt="image-20220205210232245"></p><h2 id="四、事件类型"><a href="#四、事件类型" class="headerlink" title="四、事件类型"></a>四、事件类型</h2><p>​        浏览器中发生的事件类型大致上有UI(user interface)事件、焦点事件、鼠标事件、滚轮事件、文本事件、键盘事件、合成事件、变动事件</p><h3 id="（一）、UI事件（用户与页面元素交互时触发）"><a href="#（一）、UI事件（用户与页面元素交互时触发）" class="headerlink" title="（一）、UI事件（用户与页面元素交互时触发）"></a>（一）、UI事件（用户与页面元素交互时触发）</h3><p>UI事件往下有几种分支：load、unload、abort、error、select、resize、scroll</p><ol><li><p>load：页面完全加载后触发</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//自行封装</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> EventUtil = &#123;</span><br><span class="javascript">        <span class="hljs-attr">addHandler</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">element, type, handler</span>)</span>&#123; </span><br><span class="javascript">            <span class="hljs-keyword">if</span> (element.addEventListener)&#123; </span><br><span class="javascript">                element.addEventListener(type, handler, <span class="hljs-literal">false</span>); </span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element.attachEvent)&#123; </span><br><span class="javascript">                element.attachEvent(<span class="hljs-string">&quot;on&quot;</span> + type, handler); </span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123; </span><br><span class="javascript">                element[<span class="hljs-string">&quot;on&quot;</span> + type] = handler; </span><br><span class="javascript">            &#125; </span><br><span class="javascript">        &#125;, </span><br><span class="javascript">        <span class="hljs-attr">removeHandler</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">element, type, handler</span>)</span>&#123; </span><br><span class="javascript">            <span class="hljs-keyword">if</span> (element.removeEventListener)&#123; </span><br><span class="javascript">                element.removeEventListener(type, handler, <span class="hljs-literal">false</span>); </span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element.detachEvent)&#123; </span><br><span class="javascript">                element.detachEvent(<span class="hljs-string">&quot;on&quot;</span> + type, handler); </span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123; </span><br><span class="javascript">                element[<span class="hljs-string">&quot;on&quot;</span> + type] = <span class="hljs-literal">null</span>; </span><br><span class="javascript">            &#125; </span><br><span class="javascript">        &#125; </span><br><span class="javascript">        &#125;;</span><br><span class="javascript">    <span class="hljs-comment">//调用方法</span></span><br><span class="javascript">        EventUtil.addHandler(<span class="hljs-built_in">window</span>,<span class="hljs-string">&quot;resize&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript">            alert(<span class="hljs-string">&quot;resized&quot;</span>);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>unload: 页面文档被完全卸载时触发，多用于清除引用，以防内存泄漏。</p></li><li><p>resize: 浏览器窗口大小调整时触发</p></li><li><p>scroll：滚动鼠标时触发</p></li></ol><h3 id="（二）、焦点事件（元素获得或者失去焦点时触发）"><a href="#（二）、焦点事件（元素获得或者失去焦点时触发）" class="headerlink" title="（二）、焦点事件（元素获得或者失去焦点时触发）"></a>（二）、焦点事件（元素获得或者失去焦点时触发）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> t = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;text&quot;</span>);</span><br><span class="javascript">        t.onfocus = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;focused&quot;</span>); <span class="hljs-comment">//点击文本框获取焦点输出</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">        t.onblur = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;blured&quot;</span>); <span class="hljs-comment">//点击文本框后点击空白处失去焦点输出</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="（三）、鼠标与滚轮事件"><a href="#（三）、鼠标与滚轮事件" class="headerlink" title="（三）、鼠标与滚轮事件"></a>（三）、鼠标与滚轮事件</h3><ul><li>click—用户单击鼠标左键<strong>或按下回车键</strong>触发</li><li>dbclick—用户双击鼠标左键触发。</li><li>mousedown—在用户<strong>按下了任意鼠标按钮</strong>时触发。</li><li>mouseenter—在鼠标<strong>光标从元素外部首次移动到元素范围内</strong>时触发。此事件<strong>不冒泡</strong>。</li><li>mouseleave—元素上方的<strong>光标移动到元素范围之外</strong>时触发。<strong>不冒泡</strong>。</li><li>mousemove—<strong>光标在元素的内部不断的移动</strong>时触发。</li><li>mouseover—鼠标指针位于一个元素外部，然后用户将首次移动到另一个元素边界之内时触发。</li><li>mouseout—用户将光标从一个元素上方移动到另一个元素时触发。  </li><li>mouseup—在用户<strong>释放鼠标按钮时</strong>触发。</li></ul><p>​        与具体的DOM0属性用法类似，但要注意的是鼠标所处的位置坐标有说法：<strong>客户区坐标位置</strong> 与 <strong>页面坐标位置</strong> 还有 <strong>屏幕坐标位置</strong></p><p>​        1. 客户区坐标位置：视口(特殊的指定位置(某个div内))中鼠标的坐标.</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">clientX</span><br><span class="hljs-attribute">clientY</span><br></code></pre></td></tr></table></figure><p>​        2. 页面坐标位置：具体页面中鼠标的坐标。当页面很长的时候需要滚动，这个时候鼠标相对于这个较长的页面所处的坐标值</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pageX</span><br><span class="hljs-attribute">pageY</span><br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">    3. 屏幕坐标位置：(显示屏大小的位置)中鼠标的坐标.（以左上角为坐标原点）</code></pre></div><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-built_in">screenX</span><br><span class="hljs-built_in">screenY</span><br></code></pre></td></tr></table></figure><h3 id="（四）、键盘与文本事件"><a href="#（四）、键盘与文本事件" class="headerlink" title="（四）、键盘与文本事件"></a>（四）、键盘与文本事件</h3><p>keydown：当用户按下键盘上的<strong>任意键</strong>时触发。按住不放，会重复触发。</p><p>keypress:当用户按下键盘上的字符键时触发。按住不放，会重复触发。</p><p>keyup:当用户释放键盘上的键时触发。</p><h2 id="五、内存与性能"><a href="#五、内存与性能" class="headerlink" title="五、内存与性能"></a>五、内存与性能</h2><p>​        在JavaScript中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能，因为需要不断的与dom节点进行交互，访问dom的次数越多，引起浏览器重绘与重排的次数也就越多，就会延长整个页面的交互就绪时间，这就是为什么性能优化的主要思想之一就是减少DOM操作的原因；如果要用事件委托，就会将所有的操作放到js程序里面，与dom的操作就只需要交互一次，这样就能大大的减少与dom的交互次数，提高性能；</p><p>​        JS的事件处理程序在事件触发的时候执行，然而当一个JS函数存在多个事件的时候会涉及到多个函数，这对内存的消耗是十分巨大的。对于事件处理程序过多的解决办法是利用 <strong>事件委托</strong> 。事件委托利用了 <strong>事件冒泡</strong> ，只使用一个事件处理程序就可以管理一种类型的所有事件 。详见另篇 <strong>事件冒泡与事件委托</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo访问优化</title>
    <link href="/2022/01/22/Hexo%E8%AE%BF%E9%97%AE%E4%BC%98%E5%8C%96/"/>
    <url>/2022/01/22/Hexo%E8%AE%BF%E9%97%AE%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客访问优化"><a href="#Hexo博客访问优化" class="headerlink" title="Hexo博客访问优化"></a>Hexo博客访问优化</h1><p>之前发现在网络号的情况访问博客的时候随着图片以及文章的增加，访问速度似乎出现了变慢的情况，甚至访问的时候首页大图加载还出现了需要短暂等待才能加载完成的情况。解决这种问题可以通过gulp插件来对博客所涉及的html、css以及js文件进行压缩，以提升网站性能。</p><h2 id="一、安装依赖"><a href="#一、安装依赖" class="headerlink" title="一、安装依赖"></a>一、安装依赖</h2><p>进入博客根目录打开命令行输入下面的命令</p><figure class="highlight cmake"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> gulp<br></code></pre></td></tr></table></figure><h2 id="二、安装模块"><a href="#二、安装模块" class="headerlink" title="二、安装模块"></a>二、安装模块</h2><p>要实现gulp压缩需要安装以下五个模块：</p><ul><li><p>gulp-htmlclean // 清理html</p></li><li><p>gulp-htmlmin // 压缩html</p></li><li><p>gulp-minify-css // 压缩css</p></li><li><p>gulp-uglify // 混淆js</p></li><li><p>gulp-imagemin // 压缩图片</p></li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><h2 id="三、博客的根目录下创建gulpfile-js"><a href="#三、博客的根目录下创建gulpfile-js" class="headerlink" title="三、博客的根目录下创建gulpfile.js"></a>三、博客的根目录下创建gulpfile.js</h2><p>在博客根目录下创建gulpfile.js文件，内容为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>);<br><span class="hljs-keyword">var</span> minifycss = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-minify-css&#x27;</span>);<br><span class="hljs-keyword">var</span> uglify = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-uglify&#x27;</span>);<br><span class="hljs-keyword">var</span> htmlmin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-htmlmin&#x27;</span>);<br><span class="hljs-keyword">var</span> htmlclean = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-htmlclean&#x27;</span>);<br><span class="hljs-keyword">var</span> imagemin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-imagemin&#x27;</span>);<br><br><span class="hljs-comment">// 压缩html</span><br>gulp.task(<span class="hljs-string">&#x27;minify-html&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;./public/**/*.html&#x27;</span>)<br>        .pipe(htmlclean())<br>        .pipe(htmlmin(&#123;<br>            <span class="hljs-attr">removeComments</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">minifyJS</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">minifyCSS</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">minifyURLs</span>: <span class="hljs-literal">true</span>,<br>        &#125;))<br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;./public&#x27;</span>))<br>&#125;);<br><span class="hljs-comment">// 压缩css</span><br>gulp.task(<span class="hljs-string">&#x27;minify-css&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;./public/**/*.css&#x27;</span>)<br>        .pipe(minifycss(&#123;<br>            <span class="hljs-attr">compatibility</span>: <span class="hljs-string">&#x27;ie8&#x27;</span><br>        &#125;))<br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;./public&#x27;</span>));<br>&#125;);<br><span class="hljs-comment">// 压缩js</span><br>gulp.task(<span class="hljs-string">&#x27;minify-js&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;./public/js/**/*.js&#x27;</span>)<br>        .pipe(uglify())<br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;./public&#x27;</span>));<br>&#125;);<br><span class="hljs-comment">// 压缩图片</span><br>gulp.task(<span class="hljs-string">&#x27;minify-images&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;./public/images/**/*.*&#x27;</span>)<br>        .pipe(imagemin(<br>        [imagemin.gifsicle(&#123;<span class="hljs-string">&#x27;optimizationLevel&#x27;</span>: <span class="hljs-number">3</span>&#125;), <br>        imagemin.jpegtran(&#123;<span class="hljs-string">&#x27;progressive&#x27;</span>: <span class="hljs-literal">true</span>&#125;), <br>        imagemin.optipng(&#123;<span class="hljs-string">&#x27;optimizationLevel&#x27;</span>: <span class="hljs-number">7</span>&#125;), <br>        imagemin.svgo()],<br>        &#123;<span class="hljs-string">&#x27;verbose&#x27;</span>: <span class="hljs-literal">true</span>&#125;))<br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;./public/images&#x27;</span>))<br>&#125;);<br><span class="hljs-comment">// 默认任务</span><br>gulp.task(<span class="hljs-string">&#x27;default&#x27;</span>, [<br>    <span class="hljs-string">&#x27;minify-html&#x27;</span>,<span class="hljs-string">&#x27;minify-css&#x27;</span>,<span class="hljs-string">&#x27;minify-js&#x27;</span>,<span class="hljs-string">&#x27;minify-images&#x27;</span><br>]);<br><br></code></pre></td></tr></table></figure><h2 id="四、依次执行压缩及部署"><a href="#四、依次执行压缩及部署" class="headerlink" title="四、依次执行压缩及部署"></a>四、依次执行压缩及部署</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">hexo clean<br>hexo g <span class="hljs-meta">&amp;&amp; gulp <span class="hljs-comment">//生成静态页面之后进行静态资源压缩</span></span><br>hexo d<br><br>hexo server -p <span class="hljs-number">5000</span> 指定端口本地预览<br></code></pre></td></tr></table></figure><h2 id="五、遇到的问题"><a href="#五、遇到的问题" class="headerlink" title="五、遇到的问题"></a>五、遇到的问题</h2><p>在网上找到优化博客的教程之后，有很多的安装gulp方式都是全局安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> gulp -g<br></code></pre></td></tr></table></figure><p>但是这样子安装在我这发现当使用gulp命令压缩静态资源的时候出现报错，这个时候安装gulp就不要全局安装，进入博客的根目录下打开命令行，不执行全局安装-g即可。最后博客的访问速度有少些提升(测试的时候网络有点不稳定，网络好的时候访问速度应该有一些小的提升)</p><p><img src="/2022/01/22/Hexo%E8%AE%BF%E9%97%AE%E4%BC%98%E5%8C%96/CB%60%25XMA%7DNYVUJA3%7D%5DDQX6L.png" alt="img"><br><img src="/2022/01/22/Hexo%E8%AE%BF%E9%97%AE%E4%BC%98%E5%8C%96/Y66UZS%7BTUQVVN0L9EJ$LM$Q.png" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS_DOM</title>
    <link href="/2022/01/22/JS-DOM/"/>
    <url>/2022/01/22/JS-DOM/</url>
    
    <content type="html"><![CDATA[<h1 id="Javascript-DOM"><a href="#Javascript-DOM" class="headerlink" title="Javascript DOM"></a>Javascript DOM</h1><h2 id="一、文档对象模型DOM"><a href="#一、文档对象模型DOM" class="headerlink" title="一、文档对象模型DOM"></a>一、文档对象模型DOM</h2><h3 id="（一）理解DOM的作用"><a href="#（一）理解DOM的作用" class="headerlink" title="（一）理解DOM的作用"></a>（一）理解DOM的作用</h3><p>​        JS中的文档对象模型DOM(Document Object Model)的意义实际上是为了使用JS来操纵HTML页面，<strong>DOM将HTML文档中每个结点“映射”为一个对象</strong>，然后就可以在JS中使用面向对象的思维去操纵页面以及页面中的结点。HTML与DOM之间的关系可以理解为操作DOM就可以改变HTML页面的内容文档结构，而为HTML页面添加标签的话DOM也会作出一样的变化。<strong>将标签(HTML)“映射”为对象(JS)之后用JS操作对象的属性与方法</strong>，进而改变HTML的内容。<strong>DOM操作HTML结点，两者之间是相互映射的关系</strong></p><p>Document：整个HTML页面文档</p><p>Object：将网页的每一部分转换为了一个对象(p标签、a标签…)</p><p>Model：使用模型来表示(结点/)对象之间的关系</p><h3 id="（二）结点层次与常用结点"><a href="#（二）结点层次与常用结点" class="headerlink" title="（二）结点层次与常用结点"></a>（二）结点层次与常用结点</h3><h4 id="（1）结点层次"><a href="#（1）结点层次" class="headerlink" title="（1）结点层次"></a>（1）结点层次</h4><p>​        结点层次分为<strong>Node类型</strong>、<strong>Document类型</strong>、<strong>Element类型</strong>、<strong>Text类型</strong>、Comment类型、CDATA类型、DocumentType类型、DocumentFragment类型、Attr类型。</p><h4 id="（2）结点的属性"><a href="#（2）结点的属性" class="headerlink" title="（2）结点的属性"></a>（2）结点的属性</h4><p>每种类型的结点都会有nodeName、nodeType、nodeValue三种属性，随着结点类型的不同这三个属性的值也不尽相同。</p><h4 id="（3）常用结点"><a href="#（3）常用结点" class="headerlink" title="（3）常用结点"></a>（3）常用结点</h4><ol><li><p>文档节点：整个HTML文档</p></li><li><p>元素结点：HTML文档中的HTML标签</p></li><li><p>属性结点：元素的属性(a标签的src属性等)</p></li><li><p>文本结点：HTML标签中的文本内容</p><p><img src="/2022/01/22/JS-DOM/image-20220119164250661.png" alt="image-20220119164250661"></p></li><li><h5 id="Node类型结点"><a href="#Node类型结点" class="headerlink" title="Node类型结点"></a>Node类型结点</h5></li></ol><p>​        结点是构成网页的基本组成部分，网页中的每个部分都可以看成是一个结点，比如HTML标签、属性、文本、整个文档都可以看成一个结点。但是这些结点的具体类型是不一样的，结点的属性与方法也不一样。<strong>每个节点可以看成是一个对象</strong>。（高程三里面称这些节点是对象）</p><ol start="2"><li><h5 id="Document类型结点"><a href="#Document类型结点" class="headerlink" title="Document类型结点"></a>Document类型结点</h5><p>​        document对象是HTMLDocument(继承自Document类型)的一个<strong>实例</strong>，同时document对象是window对象的一个<strong>属性</strong>，通过文档对象可以获取页面有关的信息（获取页面title），还可以操作页面的外观（使用JS改变样式）以及操作底层结构（使用JS改变HTML文档结构）</p><p>​        document类型的查找元素是DOM最常用的一个方面，用于获取特定某个(组)元素的引用，然后再执行一些操作，通过document对象的一些方法来完成页面元素的查找。<strong>返回的是对应HTML文档对应DOM中的结点对象的引用</strong></p><p>_1：**document.getElementById() ** ，通过元素id获取结点元素</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>我是一个按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(btn.innerHTML); <span class="hljs-comment">//我是一个按钮</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(btn); <span class="hljs-comment">//&lt;button id=&quot;btn&quot;&gt;我是一个按钮&lt;/button&gt;</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> btn); <span class="hljs-comment">//object</span></span><br><span class="javascript"></span><br><span class="javascript">    btn.innerHTML = <span class="hljs-string">&quot;I&#x27;m Button&quot;</span>; <span class="hljs-comment">//按钮的内部文本改变为I&#x27;m Button</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>_2：<strong>document.getElementsByTagName()</strong> ，通过标签名获取文档中所有的该名节点元素，返回nodeList，可以通过返回的nodeList用类似数组的方式访问这些标签的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;231&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;321&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> images = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;img&quot;</span>); </span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(images);<span class="hljs-comment">//HTMLCollection(3) [img, img, img]</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(images.length);<span class="hljs-comment">//3</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(images[<span class="hljs-number">0</span>].src);<span class="hljs-comment">// 一长串的文件路径 /123</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(images.item(<span class="hljs-number">1</span>).src);<span class="hljs-comment">//  一长串的文件路径 /231</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h5 id="Element类型结点"><a href="#Element类型结点" class="headerlink" title="Element类型结点"></a>Element类型结点</h5><p>Element对象用于访问HTML元素标签名、子节点以及属性</p><p>_1：访问元素标签名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myDiv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">//使用文档类型获取div结点的引用,获取到的是Element类型的元素</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> myDiv = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;myDiv&quot;</span>); </span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(myDiv.tagName); <span class="hljs-comment">//DIV 获取标签名</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>_2：获取结点属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myDiv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">//使用文档类型获取div结点的引用,获取到的是Element类型的元素</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> myDiv = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;myDiv&quot;</span>); </span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(myDiv.tagName); <span class="hljs-comment">//DIV 获取标签名</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(myDiv.getAttribute(<span class="hljs-string">&quot;id&quot;</span>)); <span class="hljs-comment">//myDiv</span></span><br><span class="javascript">    myDiv.id = <span class="hljs-string">&quot;herDiv&quot;</span>; <span class="hljs-comment">//修改节点属性值</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(myDiv.getAttribute(<span class="hljs-string">&quot;id&quot;</span>)); <span class="hljs-comment">//herDiv</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>_3：创建元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myDiv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;div&quot;</span>); <span class="hljs-comment">//创建div结点</span></span><br><span class="javascript">    div.id = <span class="hljs-string">&quot;isDIV&quot;</span>;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(div); <span class="hljs-comment">// &lt;div id=&quot;isDIV&quot;&gt;&lt;/div&gt;</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> div); <span class="hljs-comment">// object</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(div.id); <span class="hljs-comment">//isDIV</span></span><br><span class="javascript">    <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="javascript">    理解DOM与HTML文档结点的关系：使用方法创建的div方法返回的是一个对象，</span></span><br><span class="hljs-comment"><span class="javascript">    这从另一个角度看出HTML文档的结点对应着DOM里面的一个对象</span></span><br><span class="hljs-comment"><span class="javascript">    */</span></span><br><span class="javascript">    <span class="hljs-comment">/*通过ceateElement方法创建的HTML结点元素并没有挂载到HTML页面上，</span></span><br><span class="hljs-comment"><span class="javascript">    要通过其他的方法挂载*/</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>创建结点并挂载到HTML文档</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">document</span>.body.appendChild(div);<br></code></pre></td></tr></table></figure><p>_4：元素子节点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>item 4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> myUl = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;myList&quot;</span>);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(myUl); <span class="hljs-comment">//输出HTML元素结点</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(myUl.childNodes.length); <span class="hljs-comment">//9 4个&lt;li&gt; 4个文本 还有一个空白符(空格)</span></span><br><span class="javascript">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;myUl.childNodes.length;i++)&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(myUl.childNodes[i].nodeType); <span class="hljs-comment">// 3 1 3 1 ...</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(myUl <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>); <span class="hljs-comment">//true</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(myUl.childNodes <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>); <span class="hljs-comment">//false</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> myUl.childNodes); <span class="hljs-comment">//object 并不是一个数组，而是一个对象</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h5 id="Text类型结点-纯文本内容"><a href="#Text类型结点-纯文本内容" class="headerlink" title="Text类型结点(纯文本内容)"></a>Text类型结点(纯文本内容)</h5><p>_1：创建文本结点并修改文本内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;isDIV&quot;</span>&gt;</span>Hello guys<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 创建一个元素并为这个元素添加文本结点，然后挂载到页面上</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> myDIV = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;div&quot;</span>); <span class="hljs-comment">//创建div结点</span></span><br><span class="javascript">    myDIV.className = <span class="hljs-string">&quot;myDIV&quot;</span>; <span class="hljs-comment">//设置class名</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> textNode = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&quot;Hello my friend&quot;</span>); <span class="hljs-comment">//创建结点元素</span></span><br><span class="javascript">    myDIV.appendChild(textNode); <span class="hljs-comment">//将创建好的结点元素加载到DIV里面</span></span><br><span class="javascript">    <span class="hljs-built_in">document</span>.body.appendChild(myDIV); <span class="hljs-comment">//将包装有文本结点的DIV挂载到页面上</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> isDIV = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;isDIV&quot;</span>);</span><br><span class="javascript">    isDIV.firstChild.nodeValue = <span class="hljs-string">&quot;Hello Morant！&quot;</span>; <span class="hljs-comment">//修改已有结点的text文本</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/01/22/JS-DOM/image-20220122152159674.png" alt="image-20220122152159674"></p><p>_2：分割文本结点 (将一个文本结点分裂成两个文本结点)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> tNode = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&quot;Hello Guys&quot;</span>);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(tNode.nodeValue); <span class="hljs-comment">//Hello Guys</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> _tNode = tNode.splitText(<span class="hljs-number">5</span>);</span><br><span class="javascript">    </span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(tNode); <span class="hljs-comment">// &quot;Hello&quot;</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(_tNode); <span class="hljs-comment">// &quot;Guys&quot;</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> tNode); <span class="hljs-comment">// &quot;object&quot;</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> _tNode); <span class="hljs-comment">// &quot;object&quot;</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p> <strong>Comment类型</strong>：DOM中注释也看成一个结点对象</p></li><li><p>CDATASection类型：只针对于XML文档</p></li><li><p>DocumentType类型、DocumentFragment类型。</p></li><li><p><strong>Attr类型</strong>：结点元素的属性也看做是一个对象，nodeName是属性名，nodeValue是属性值</p></li></ol><h3 id="（三）DOM操作技术"><a href="#（三）DOM操作技术" class="headerlink" title="（三）DOM操作技术"></a>（三）DOM操作技术</h3><h4 id="（1）动态脚本"><a href="#（1）动态脚本" class="headerlink" title="（1）动态脚本"></a>（1）动态脚本</h4><p>​        在页面加载时这段JS脚本是不存在的，当某些操作之后通过修改DOM触发动态生成脚本。(比如有一段JS代码需要某些操作之后才加载，这里的DOM思路是将外部写好的JS代码通过DOM动态生成HTML的script标签将其引入HTML文档中事项动态脚本)；</p><p>_1：动态加载外部JS代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;client.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>_2：上面的JS标签结点对应的DOM代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;script&quot;</span>); <span class="hljs-comment">//创建标签结点</span></span><br><span class="javascript">script.type = <span class="hljs-string">&quot;text/javascript&quot;</span>; <span class="hljs-comment">//设置标签结点的属性</span></span><br><span class="javascript">script.src = <span class="hljs-string">&quot;client.js&quot;</span>;</span><br><span class="javascript"><span class="hljs-built_in">document</span>.body.appendChild(script); <span class="hljs-comment">//挂载到HTML文档</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ps: 这里应该更加理解DOM和HTML之间的关系，而不仅仅是直到有document那几个方法，DOM和HTML之间的关系是相互”映射”之间的关系，用不同的方式描述着同样的内容，HTML加入一个结点，DOM树对应地也加入了一个结点，DOM用代码的方式也可以为HTML文档加入HTML结点标签</p><h4 id="（2）动态样式"><a href="#（2）动态样式" class="headerlink" title="（2）动态样式"></a>（2）动态样式</h4><p>同样的类似于创建动态脚本一样，也可以使用DOM来动态引入CSS样式，有两种方法，一种是类似于上面的方式外部写好的CSS动态创建标签引入样式表；另一种方式是用DOM实现嵌入式(直接写在HTML页面文档中)样式。(link引入外部CSS，style标签写嵌入式)</p><p>_1：动态加载外部样式表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;styles.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的JS标签结点对应的DOM代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> link = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;link&quot;</span>);<br>link.rel = <span class="hljs-string">&quot;stylesheet&quot;</span>;<br>link.type =  <span class="hljs-string">&quot;text/css&quot;</span>;<br>link.href =  <span class="hljs-string">&quot;styles.css&quot;</span>;<br><span class="hljs-keyword">var</span> head = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;head&quot;</span>)[<span class="hljs-number">0</span>]; <span class="hljs-comment">//获取第一个Head标签</span><br>head.appendChild(link); <span class="hljs-comment">//CSS标签要加入到head中才可以生效</span><br></code></pre></td></tr></table></figure><p>_2：DOM实现嵌入式CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style type=&quot;text/css&quot;&gt;<br><span class="hljs-selector-tag">body</span>&#123;<br><span class="hljs-attribute">background-color</span> : red;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>上面的CSS标签结点对应的DOM代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> style = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;style&quot;</span>);<br>style.type = <span class="hljs-string">&quot;text/css&quot;</span>;<br>style.appendChild(<span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&quot;body&#123; background-color : red;&#125;&quot;</span>));<br><span class="hljs-keyword">var</span> head = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;head&quot;</span>)[<span class="hljs-number">0</span>];<br>head.appendChild(style);<br></code></pre></td></tr></table></figure><h4 id="（3）操作表格"><a href="#（3）操作表格" class="headerlink" title="（3）操作表格"></a>（3）操作表格</h4><p>​        JS的DOM代码动态创建表格比直接使用HTML标签创建要多得多，感觉在日常开发中会很少用到，但是要用到的话直接上网找就好了</p><h4 id="（4）使用NodeList、NamedNodeMap、HTMLCollection"><a href="#（4）使用NodeList、NamedNodeMap、HTMLCollection" class="headerlink" title="（4）使用NodeList、NamedNodeMap、HTMLCollection"></a>（4）使用NodeList、NamedNodeMap、HTMLCollection</h4><p>​        DOM是JavaScript重要组成部分，在DOM中有三个特别的集合分别是NodeList(节点的集合),NamedNodeMap(元素属性的集合)和HTMLCollection(html元素的集合)。这三个集合有一些共同的特点：它们都可以通过中括号表达式来访问集合中元素，也有length属性。但它们并不是数组，而且它们都是动态的，会根据页面元素的变化而变化(类数组对象)</p><p><a href="https://blog.csdn.net/u012207345/article/details/78165931">https://blog.csdn.net/u012207345/article/details/78165931</a></p><p><strong>DOM操作是JS程序中开销最大的，会对程序的性能产生比较大的影响，尽量减少DOM操作</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Css行宽与清理</title>
    <link href="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/"/>
    <url>/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS浮动问题以及清除浮动"><a href="#CSS浮动问题以及清除浮动" class="headerlink" title="CSS浮动问题以及清除浮动"></a>CSS浮动问题以及清除浮动</h1><p>首先我们要知道浮动的特点：浮动的元素<strong>脱离文档流</strong>，之前占用<strong>空间会释放</strong>。</p><p><code>float</code>属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使<strong>文本围绕在图像周围</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-id">#main</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>:<span class="hljs-number">500px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>:<span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">background</span>:<span class="hljs-number">#cccccc</span>;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-id">#child1</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background</span>:<span class="hljs-number">#f000f0</span>;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-id">#child2</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background</span>:<span class="hljs-number">#0000ff</span>;</span><br><span class="css"></span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的<strong>粉色是<code>child1</code><strong>，</strong>蓝色是<code>child2</code></strong></p><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-4bed7bd1cd3f7c5280d40088cc4b847a_720w.jpg" alt="img"></p><h3 id="1】给child1加上float属性"><a href="#1】给child1加上float属性" class="headerlink" title="1】给child1加上float属性"></a>1】给<code>child1</code>加上<code>float</code>属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#child1</span>&#123;<br>    <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-comment">/*浮动的元素，脱离文档流，空间释放*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>浮动到它<strong>外部容器</strong>的最左边，且脱离文档流</p><p>粉色<code>child1</code>脱离文档流向外部容器<code>main</code>的左上角靠，蓝色<code>child2</code>向上移动（占位之前粉色child1的位置），所以此时就是粉色和蓝色<strong>重叠</strong>了，粉色的<code>child1</code>浮在上面的。</p><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-5a2d3ef8911a8896f243a31dbb034439_720w.jpg" alt="img"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#child1</span>&#123;<br>    <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:right</span>;<span class="hljs-comment">/*浮动的元素，脱离文档流，空间释放*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>浮动到它<strong>外部容器</strong>的最右边，且脱离文档流</p><p>此时粉色<code>child1</code>脱离文档流浮动到外部容器<code>main</code>的右上角，之前的空间就腾出来了，蓝色<code>child2</code>就向上移（占位之前粉色<code>child1</code>的位置）</p><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-a288f0636af142360bedfbac26f4e169_720w.jpg" alt="img"></p><h3 id="2】给child1加上float属性，后再给child2加上float属性"><a href="#2】给child1加上float属性，后再给child2加上float属性" class="headerlink" title="2】给child1加上float属性，后再给child2加上float属性"></a>2】给<code>child1</code>加上<code>float</code>属性，后再给<code>child2</code>加上<code>float</code>属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#child1</span>&#123;<br>    <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-comment">/*浮动的元素，脱离文档流，空间释放*/</span><br>&#125;<br><span class="hljs-selector-id">#child2</span>&#123;<br>    <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果<code>main</code>容器下的两个子元素都添加浮动属性，则按顺序<code>html</code>结构依次浮动。如下图，粉色<code>child1</code>向左浮动，蓝色<code>child2</code>也向左浮动且紧贴上一个浮动元素。</p><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-3cfa37db23cd03cab84fe69b8e7d9819_720w.jpg" alt="img"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#child1</span>&#123;<br>    <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-comment">/*浮动的元素，脱离文档流，空间释放*/</span><br>&#125;<br><span class="hljs-selector-id">#child2</span>&#123;<br>    <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:right</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>粉色<code>child1</code>向左浮动，蓝色<code>child2</code>向右浮动</p><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-712f06876ccafecc299b0ccb34d1ee95_720w.jpg" alt="img"></p><h3 id="清除浮动的意义：使clear清除浮动的元素的左右两边没有浮动元素，也就是说容器内使用float属性的兄弟元素依然会占去文档改占据的位置，使得该clear清除浮动的元素在下一行显示。（还原文档流）"><a href="#清除浮动的意义：使clear清除浮动的元素的左右两边没有浮动元素，也就是说容器内使用float属性的兄弟元素依然会占去文档改占据的位置，使得该clear清除浮动的元素在下一行显示。（还原文档流）" class="headerlink" title="清除浮动的意义：使clear清除浮动的元素的左右两边没有浮动元素，也就是说容器内使用float属性的兄弟元素依然会占去文档改占据的位置，使得该clear清除浮动的元素在下一行显示。（还原文档流）"></a>清除浮动的意义：使clear清除浮动的元素的左右两边没有浮动元素，也就是说容器内使用float属性的兄弟元素依然会占去文档改占据的位置，使得该clear清除浮动的元素在下一行显示。（还原文档流）</h3><p>下面是一个栗子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时是正常块级元素文档流。</p><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-fb331ee18b9657d3e1616b6b1e3a9b99_720w.jpg" alt="img"></p><p>现在我们在<code>child1</code>上面使用float属性，<code>child1</code>会脱离文档流（不会占据文档大小空间），<code>child2</code>会向上移动，所以出现右边的<strong>重叠</strong>情况。</p><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-24a7526d9d9468d42ba46cc515c4ed07_720w.jpg" alt="img"></p><p>然后我们在<code>child2</code>上面使用清除浮动<code>clear</code>属性，会还原周围兄弟元素的文档流（也就是浮动的兄弟元素又会占据文档大小空间），所以就有右边图<code>child2</code>向下移，<code>child1</code>开始占据文档大小空间。</p><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-bef0f6f0955ea36df50e4e68971a8625_720w.jpg" alt="img"></p><h2 id="浮动带来的问题："><a href="#浮动带来的问题：" class="headerlink" title="浮动带来的问题："></a>浮动带来的问题：</h2><h3 id="1】文本行框围绕浮动元素周围问题"><a href="#1】文本行框围绕浮动元素周围问题" class="headerlink" title="1】文本行框围绕浮动元素周围问题"></a>1】文本行框围绕浮动元素周围问题</h3><p>如果我们现在加入了一个<code>&lt;P&gt;</code>标签（p标签是<strong>块级元素</strong>）</p><p><code>float</code>属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使<strong>文本围绕在图像周围</strong>。</p><p>要想<strong>阻止行框围绕浮动框</strong>，需要对该框应用 <a href="https://link.zhihu.com/?target=https://www.w3school.com.cn/cssref/pr_class_clear.asp">clear 属性</a>。<code>clear</code>属性的值可以是<code>left</code>、<code>right</code>、<code>both</code> 或 <code>none</code>，它表示框的哪些边不应该挨着浮动框。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-id">#main</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>:<span class="hljs-number">500px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>:<span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">background</span>:<span class="hljs-number">#cccccc</span>;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-id">#child1</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background</span>:<span class="hljs-number">#f000f0</span>;</span><br><span class="css">        <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-id">#child2</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background</span>:<span class="hljs-number">#0000ff</span>;</span><br><span class="css">        <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span></span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-tag">p</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">background</span>: <span class="hljs-number">#00ff00</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈，呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵&lt;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时，文本行框围会绕浮动的元素，如下图：</p><p><strong>文字没有被遮挡 但是浮动的俩块下面还在文档流中的p的文字会环绕浮动块元素 清除就是为了不要文字环绕浮动起来的块级元素</strong></p><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-697929bfed8466cd38ae60da3280c5e3_720w.jpg" alt="img"></p><h3 id="1】此时可以使用clear属性来进行对文本行框进行清除浮动"><a href="#1】此时可以使用clear属性来进行对文本行框进行清除浮动" class="headerlink" title="1】此时可以使用clear属性来进行对文本行框进行清除浮动"></a>1】此时可以使用clear属性来进行对文本行框进行清除浮动</h3><p><code>clear</code>属性的值可以是 <code>left</code>、<code>right</code>、<code>both</code> 或<code>none</code>，它表示框的哪些边不应该挨着浮动框。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#00ff00</span>;<br>    <span class="hljs-attribute">clear</span>:both;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-1d35526b3349f5c8b9fe16fc063e9533_720w.jpg" alt="img"></p><h3 id="2】外部容器高度自适应，浮动内部所有元素，背景颜色受影响问题"><a href="#2】外部容器高度自适应，浮动内部所有元素，背景颜色受影响问题" class="headerlink" title="2】外部容器高度自适应，浮动内部所有元素，背景颜色受影响问题"></a>2】外部容器高度自适应，浮动内部所有元素，背景颜色受影响问题</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-id">#main</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>:<span class="hljs-number">500px</span>;</span><br><span class="css">        <span class="hljs-attribute">background</span>:<span class="hljs-number">#cccccc</span>;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-id">#child1</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background</span>:<span class="hljs-number">#f000f0</span>;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-id">#child2</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background</span>:<span class="hljs-number">#0000ff</span>;</span><br><span class="css">    &#125;</span><br><span class="css"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下图是初始状态：外部容器自适应高度（按内容高度来填充）</p><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-d1b94acd7c60894e8cfd7e14af170295_720w.jpg" alt="img"></p><p>此时在粉色<code>child1</code>和蓝色<code>child2</code>上面都添加浮动<code>float</code>属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#child1</span>&#123;<br>        <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<br>    &#125;<br>    <span class="hljs-selector-id">#child2</span>&#123;<br>        <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>粉色<code>child1</code>和蓝色<code>child2</code>都脱离文档流，外部容器的高度也变为0</p><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-cb76779a99ef4ea4f94cba92166aed85_720w.jpg" alt="img"></p><p>我们如何才能让<strong>外部容器</strong>的背景颜色<strong>保持自适应高度</strong>呢？</p><h3 id="方法一：在容器内增加一个兄弟元素，然后用它清除浮动"><a href="#方法一：在容器内增加一个兄弟元素，然后用它清除浮动" class="headerlink" title="方法一：在容器内增加一个兄弟元素，然后用它清除浮动"></a>方法一：在容器内增加一个兄弟元素，然后用它清除浮动</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>.clear&#123;<br>    clear: left;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时我们发现<code>clear</code>元素高度为0，浮动的<code>child1</code>和<code>child2</code>还原了文档流，使得<code>clear</code>元素处于正常的文档流上，即在他们下面一行。</p><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-1908dce62aa4e0cb30cdeda84f064217_720w.jpg" alt="img"></p><h3 id="方法二：使用容器的伪元素来clear清除浮动"><a href="#方法二：使用容器的伪元素来clear清除浮动" class="headerlink" title="方法二：使用容器的伪元素来clear清除浮动"></a>方法二：使用容器的伪元素来clear清除浮动</h3><p>首先我们来看看伪元素生产的原理：<code>::before</code>和<code>::after</code>这两个伪元素配<code>content</code>可以创建出两个伪元素。这样一来，一个HTML元素就具备多个盒模型，即有多个背景和边框等，正如下图所示：</p><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-ac8f805b021847ff7bf7cf655f385152_720w.jpg" alt="img"></p><p>比如下面我们通过<code>::before</code>和<code>::after</code>来创建盒子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-id">#main</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-id">#main</span><span class="hljs-selector-pseudo">::before</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-cab65345fec945454213795c08a4084c_720w.jpg" alt="img"></p><p>明白了伪元素的创建原理我们就可以用伪元素来模拟使用<code>clear</code>来清除浮动。</p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>#main::after&#123;<br>    content: &#x27;&#x27;;<br>    display:block;/*必须是块级元素*/<br>    clear: both;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-34b9249b1460aef2e7bf77c1da7286fb_720w.jpg" alt="img"></p><h3 id="方法三：创建BFC就可以包含住浮动的子元素了，设置overflow的方法（hidden和auto都可以实现）"><a href="#方法三：创建BFC就可以包含住浮动的子元素了，设置overflow的方法（hidden和auto都可以实现）" class="headerlink" title="方法三：创建BFC就可以包含住浮动的子元素了，设置overflow的方法（hidden和auto都可以实现）"></a>方法三：创建BFC就可以包含住浮动的子元素了，设置overflow的方法（hidden和auto都可以实现）</h3><p><a href="https://link.zhihu.com/?target=https://blog.csdn.net/sinat_36422236/article/details/88763187">如何创建BFC</a> 1、float的值不是none。 2、position的值不是static或者relative。  3、display的值是inline-block、table-cell、flex、table-caption或者inline-flex  4、overflow的值不是visible</p><p>这里的方法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;child2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>#main&#123;<br>    overflow: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-1e67a8e6ce74abbdbf1f272ddef5f654_720w.jpg" alt="img"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#main</span>&#123;<br>    <span class="hljs-attribute">overflow</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-2193d9784d9af15eb67bae242676802b_720w.jpg" alt="img"></p><h3 id="方法四：使容器也是浮动，这也也可以创建BFC"><a href="#方法四：使容器也是浮动，这也也可以创建BFC" class="headerlink" title="方法四：使容器也是浮动，这也也可以创建BFC"></a>方法四：使容器也是浮动，这也也可以创建BFC</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#main</span>&#123;<br>    <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/01/19/Css%E8%A1%8C%E5%AE%BD%E4%B8%8E%E6%B8%85%E7%90%86/v2-b395d6e298de9128795a869fc41b9faa_720w.jpg" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS块级作用域问题</title>
    <link href="/2022/01/19/JS%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <url>/2022/01/19/JS%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Javascript有关块级作用域的问题"><a href="#Javascript有关块级作用域的问题" class="headerlink" title="Javascript有关块级作用域的问题"></a>Javascript有关块级作用域的问题</h1><h2 id="一、块作用域"><a href="#一、块作用域" class="headerlink" title="一、块作用域 { }"></a>一、块作用域 { }</h2><ol><li><p>JS中作用域有：全局作用域、函数作用域。没有块作用域的概念。ECMAScript 6(简称ES6)中新增了块级作用域。<br>块作用域由 { } 包括，if语句和for语句里面的{ }也属于块作用域。</p></li><li><p>在javascript里是没有块级作用域的，而ES6添加了块级作用域。在ES6(ECMAScript6)之前的JS版本中没有块级作用域会出现以下问题：</p><p>(1) if 和 for语句中定义的变量泄露变成全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">5</span>;i++)&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">//6,记到6循环条件不通过</span><br></code></pre></td></tr></table></figure><p>(2) 内层变量可能会覆盖外层变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span>&#123;<br>     <span class="hljs-built_in">console</span>.log(temp);<br>     <span class="hljs-keyword">if</span>(<span class="hljs-literal">false</span>)&#123;<br>         <span class="hljs-keyword">var</span> temp = <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br>f(); <span class="hljs-comment">//undefined</span><br><br>==========================================<br>    <br><span class="hljs-comment">//上面的代码等价于下面的代码</span><br><span class="hljs-keyword">var</span> temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span>&#123;<br>     <span class="hljs-built_in">console</span>.log(temp);<br>     <span class="hljs-keyword">var</span> temp = <span class="hljs-string">&quot;hello&quot;</span>; <br>     <span class="hljs-comment">//var定义的变量在if中没有块级作用域的概念，从而泄露成函数作用域中的一个变量</span><br>&#125;<br>f(); <span class="hljs-comment">//undefined</span><br><br>==========================================<br>    <br><span class="hljs-comment">//上面的代码等价于下面的代码,变量将会 提升 到作用域的顶端去执行变量的定义，</span><br><span class="hljs-comment">//所以函数输出的是undefined代表的是temp变量的值是undefined，而不是理解成temp变量未定义。</span><br><span class="hljs-keyword">var</span> temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> temp;<br>    <span class="hljs-built_in">console</span>.log(temp);<br>    temp = <span class="hljs-string">&quot;hello&quot;</span>; <br>&#125;<br>f(); <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure></li><li><p>在ES6引入块级作用域之前的版本中，要想实现块级作用域的办法是<strong>立即执行函数</strong>。立即执行匿名函数的目的是建立一个块级作用域。ES6以前变量的作用域是函数范围，有时在函数内局部需要一些临时变量，因为没有块级作用域，所以就会将局部代码封装到IIEF（立即执行函数）中，这样达到了想要的效果。临时变量被封装在IIFE中，就不会污染上层函数(var 定义的变量泄露到函数作用域中，造成污染)；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//立即执行函数 达到了块级作用域的效果</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> temp = <span class="hljs-string">&quot;hello world&quot;</span>;<br>&#125;());<br><span class="hljs-built_in">console</span>.log(temp);<span class="hljs-comment">// 报错：Uncaught ReferenceError: temp is not defined</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="二、立即执行函数"><a href="#二、立即执行函数" class="headerlink" title="二、立即执行函数"></a>二、立即执行函数</h2><ol><li><p>立即执行函数模式是一种语法，可以让你的函数在定义后立即被执行。</p></li><li><p>立即执行函数的组成</p><ul><li>定义一个函数</li><li>将整个函数包裹在一对括号 ‘()’ 中<br>将函数声明转换为表达式</li><li>在结尾加上一对括号<br>让函数立即被执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hello&quot;</span>);<br>&#125;)()<br><br><span class="hljs-comment">//像其它任何函数一样，一个立即执行函数也能返回值并且可以赋值给其它变量</span><br><span class="hljs-keyword">var</span> num = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">4</span><br>&#125;)()<br><span class="hljs-built_in">console</span>.log(num); <span class="hljs-comment">//4</span><br><br></code></pre></td></tr></table></figure></li><li><p>作用：</p><p>页面加载完成后只执行一次的设置函数。</p><p>将设置函数中的变量包裹在局部作用域中，不会泄露成全局变量。</p></li></ol><h2 id="三、js中的变量提升和函数提升"><a href="#三、js中的变量提升和函数提升" class="headerlink" title="三、js中的变量提升和函数提升"></a>三、js中的变量提升和函数提升</h2><p>引擎会在解释JavaScript代码之前首先对齐进行编译，编译过程中的一部分工作就是找到所有的声明，并用合适的作用域将他们关联起来，这也正是词法作用域的核心内容。</p><p>☆☆☆☆☆简单说就是 在js代码执行前引擎会先进行预编译，<strong>预编译期间会将变量声明与函数声明提升至其对应作用域的最顶端</strong>。举例来说就是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">3</span>;<br><br><span class="hljs-comment">//预编译后的代码结构可以看做如下:</span><br><span class="hljs-keyword">var</span> a; <span class="hljs-comment">// 将变量a的声明提升至最顶端，赋值逻辑不提升。</span><br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// undefined</span><br>a = <span class="hljs-number">3</span>; <span class="hljs-comment">// 代码执行到原位置即执行原赋值逻辑</span><br></code></pre></td></tr></table></figure><h4 id="一-变量提升"><a href="#一-变量提升" class="headerlink" title="(一) 变量提升"></a>(一) 变量提升</h4><p>通常JS引擎会在正式执行之前先进行一次预编译，在这个过程中，首先将变量声明及函数声明提升至当前作用域的顶端，然后进行接下来的处理。(注：当前流行的JS引擎大都对源码进行了编译，由于引擎的不同，编译形式也会有所差异，这里说的预编译和提升其实是抽象出来的、易于理解的概念)</p><p>(1)变量提升示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(number);<br><span class="hljs-keyword">var</span> number = <span class="hljs-number">10</span>;<br>&#125;<br><br>output(); <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><p>预编译的代码逻辑为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> number;<br><span class="hljs-built_in">console</span>.log(number);<br>number = <span class="hljs-number">10</span>;<br>&#125;<br>output(); <span class="hljs-comment">//number值为undefined</span><br></code></pre></td></tr></table></figure><p>(2)<strong>JS没有块级作用域最直观的例子</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> number = <span class="hljs-number">10</span>;<br>&#123;<br><span class="hljs-keyword">var</span> number = <span class="hljs-number">20</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(number);<br>&#125;<br>output(); <span class="hljs-comment">//20</span><br></code></pre></td></tr></table></figure><p>预编译的代码逻辑为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> number = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> number = <span class="hljs-number">20</span>; <span class="hljs-comment">//变量覆盖</span><br><span class="hljs-built_in">console</span>.log(number);<br>&#125;<br>output(); <span class="hljs-comment">//20</span><br></code></pre></td></tr></table></figure><h4 id="二-函数提升"><a href="#二-函数提升" class="headerlink" title="(二) 函数提升"></a>(二) 函数提升</h4><ol><li>函数可以在声明之前就调用(但是在做任何开发之前作为一名合格的程序员要做的是先定义后使用)，其实引擎是把函数声明整个地提升到了当前作用域的顶部</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"></span>)</span>&#123;<br>foo();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">10</span>);<br>&#125;<br>&#125;<br><br>output(); <span class="hljs-comment">//10</span><br></code></pre></td></tr></table></figure><p>预编译后的逻辑为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//函数整体被提升</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">10</span>);<br>&#125;<br>foo();<br>&#125;<br>output(); <span class="hljs-comment">//10</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>如果在同一个作用域中存在多个同名函数声明，后面出现的将会覆盖前面的函数声明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"></span>)</span>&#123;<br>foo();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">10</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">100</span>);<br>&#125;<br>&#125;<br>output(); <span class="hljs-comment">//100</span><br></code></pre></td></tr></table></figure><p>预编译后的逻辑为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">10</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123; <span class="hljs-comment">//函数定义覆盖</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">100</span>);<br>&#125;<br>foo();<br>&#125;<br>output(); <span class="hljs-comment">//100</span><br></code></pre></td></tr></table></figure></li><li><p><strong>函数提升优先级高于变量提升</strong></p><p>(1)当函数声明遇到函数表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hoistFunction</span>(<span class="hljs-params"></span>) </span>&#123;<br>    foo(); <span class="hljs-comment">// 2</span><br><br>    <span class="hljs-keyword">var</span> foo = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    &#125;;<br><br>    foo(); <span class="hljs-comment">// 1</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>    &#125;<br><br>    foo(); <span class="hljs-comment">// 1</span><br>&#125;<br><br>hoistFunction();<br></code></pre></td></tr></table></figure><p>预编译后的逻辑为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hoistFunction</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-comment">//函数提升优先级最高，其次到 函数表达式 和 变量</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">var</span> foo <span class="hljs-comment">//函数表达式看做变量提升</span><br>    <br>    foo(); <span class="hljs-comment">// 2</span><br>    foo = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    &#125;;<br>    foo(); <span class="hljs-comment">// 1</span><br>    foo(); <span class="hljs-comment">// 1</span><br>&#125;<br><br>hoistFunction();<br></code></pre></td></tr></table></figure><p>上面的例子可以知道，函数hoistFunction存在变量提升和函数提升，首先进行的是foo函数提升，然后再是函数表达式foo看做是变量提升。函数提升<strong>只会提升函数声明</strong>而<strong>不会提升函数表达式</strong>（函数表达式就可以看作成变量提升）。</p><p><strong>函数提升优先级最高(提升的是函数声明，首先把函数声明放到作用域的顶头)，其次到函数表达式和变量(提升变量的声明，赋值逻辑不会提升)。</strong></p></li></ol><h2 id="四、var、let、const的区别"><a href="#四、var、let、const的区别" class="headerlink" title="四、var、let、const的区别"></a>四、var、let、const的区别</h2><p>有了上面变量和函数提升的基础，可以更好地理解var、let、const的区别。<code>ES6</code>新增了<code>let</code>和<code>const</code>关键字，使得<code>js</code>也有了“块”级作用域，而且使用<code>let</code>和<code>const</code>声明的变量和函数是不存在提升现象的(老老实实在{ }里面待着)，比较有利于我们养成良好的编程习惯。</p><ol><li><p>var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问，<strong>有变量提升</strong>。</p></li><li><p>let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问，<strong>无变量提升</strong>，不可以重复声明。</p></li><li><p>const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改，<strong>无变量提升</strong>，不可以重复声明。注意：const常量，指的是常量对应的内存地址不得改变，而不是对应的值不得改变，所有把应用类型的数据设置为常量，其内部的值是可以改变的，例如：const a={}; a.b=13; 不会报错</p></li></ol><h4 id="var："><a href="#var：" class="headerlink" title="var："></a>var：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(number);<br><span class="hljs-keyword">var</span> number = <span class="hljs-number">10</span>;<br>&#125;<br>output(); <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><h4 id="let："><a href="#let：" class="headerlink" title="let："></a>let：</h4><p>只在自己所处的块级作用域生效，且没有变量提升</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> number = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br><span class="hljs-keyword">let</span> Num1 = <span class="hljs-number">100</span>; <span class="hljs-comment">//只在自己所处的块级作用域生效</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(Num1); <span class="hljs-comment">//Uncaught ReferenceError: Num1 is not defined</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(number);<br><span class="hljs-keyword">let</span> number = <span class="hljs-number">10</span>;<br>&#125;<br>output(); <span class="hljs-comment">//Uncaught ReferenceError: Cannot access &#x27;number&#x27; before initialization(不能在初始化之前使用)</span><br></code></pre></td></tr></table></figure><h4 id="const："><a href="#const：" class="headerlink" title="const："></a>const：</h4><p>const 与 let 的使用规范一样，与之不同的是：const 声明的是一个常量，且声明完后立刻赋值，否则会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">const</span> PI;<br>PI = <span class="hljs-number">3.14</span>;<br><span class="hljs-built_in">console</span>.log(PI);<br>&#125;<br>output(); <span class="hljs-comment">//Uncaught SyntaxError: Missing initializer in const declaration</span><br></code></pre></td></tr></table></figure><p><strong>Summary：变量、函数先定义后使用；避免定义相同的变量名</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript基础</title>
    <link href="/2022/01/18/JavaScript%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/01/18/JavaScript%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Javascript基础（高程三第一到五章）"><a href="#Javascript基础（高程三第一到五章）" class="headerlink" title="Javascript基础（高程三第一到五章）"></a>Javascript基础（高程三第一到五章）</h1><h2 id="一、JavaScript简介"><a href="#一、JavaScript简介" class="headerlink" title="一、JavaScript简介"></a>一、JavaScript简介</h2><p>1.简介：Javascript由ECMAScript(脚本语言标准)、文档对象模型DOM（Document Object Model）、浏览器对象模型BOM（Browser Object Model）三部分组成。</p><p>1.1.ECMAScript(脚本语言标准)：类似于编程语言的变量怎么定义 操作符 保留字是什么的编程语言标准</p><p>1.2.文档对象模型DOM（Document Object Model）：针对XML但经过拓展用于HTML的应用程序接口API。DOM将整个页面映射为一个多层结点结构。(操作页面结点)</p><p>1.3.浏览器对象模型BOM（Browser Object Model）：处理浏览器窗口和框架，用于操作浏览器的功能(操作浏览器功能)</p><h2 id="二、Javascript的使用"><a href="#二、Javascript的使用" class="headerlink" title="二、Javascript的使用"></a>二、Javascript的使用</h2><ol><li>使用 script 标签在HTML页面插入Javascript代码,其中的代码由上到下解析</li></ol><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">标签的属性</span><br><span class="javascript">可选属性：</span><br><span class="javascript"><span class="hljs-comment">//1.async (异步脚本)：</span></span><br><span class="javascript"><span class="hljs-comment">//页面不用等待脚本的下载与执行，从而异步加载其他内容(只适用于外部js文件)</span></span><br><span class="javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-keyword">async</span> src=<span class="hljs-string">&quot;example1.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;example2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>第二个脚本可能会在第一个脚本之前执行<br></code></pre></td></tr></table></figure>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">2.charset：表示通过src属性指定代码的字符集<br></code></pre></td></tr></table></figure>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">3.defer：立即下载js脚本但是延迟执行,等到页面完全解析再运行。<br>HTML页面中的嵌入js代码将忽视defer (只适用于外部js文件)，但是会按照代码的顺序执行脚本，不同于async<br></code></pre></td></tr></table></figure>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">4.src：引入外部js文件脚本<br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;example.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;example.js&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            alert(<span class="hljs-string">&quot;Hi&quot;</span>);</span><br><span class="javascript">        &#125; <span class="hljs-comment">//中间这段代码不会被执行 只会执行外部引入的js脚本</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">必选属性：<br>1.type：表示编写代码使用的脚本语言内容类型<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>嵌入式的js代码写在页面内容的最后面， 标签的前面</li></ol><h2 id="三、Javascript基本概念"><a href="#三、Javascript基本概念" class="headerlink" title="三、Javascript基本概念"></a>三、Javascript基本概念</h2><h2 id="（一）变量"><a href="#（一）变量" class="headerlink" title="（一）变量"></a>（一）变量</h2><ol><li><p>区分大小写</p></li><li><p>标识符：第一个字符必须是一个字母、下划线或美元符号</p></li><li><p>变量：使用var定义变量，定义出来的变量属于松散类型(可以用于保存任何数据类型，变量名只是用来当做一个保存数据值的占位符)，使用var定义出来的变量是属于这个变量在其作用域中的局部变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> message; <span class="hljs-comment">//message的值为undefined</span><br><span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;hi&quot;</span>,number = <span class="hljs-number">100</span>,found = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure></li></ol><h2 id="（二）数据类型"><a href="#（二）数据类型" class="headerlink" title="（二）数据类型"></a>（二）数据类型</h2><ol><li><p>由Undefined、Null、Boolean、Number和String + 复杂类型数据类型（Object）组成。(Object类型是由一组无序的名值对组成)；Js不支持创建自定义类型数据(struct那些)。</p></li><li><p>typeof操作符：用于检测给定变量的数据类型</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>typeof操作符<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;hi&quot;</span>;</span><br><span class="javascript">    alert(<span class="hljs-keyword">typeof</span>(message)); <span class="hljs-comment">//string</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.五大数据类型+Object</p><p>3.1 <strong>Undefined类型</strong>：只有一个undefined值，使用var定义变量但是还没有初始化的时候该变量的值为undefined</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 数据类型1：Undefined</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> message = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">//var message; typeof输出的结果是一样的</span></span><br><span class="javascript">    <span class="hljs-comment">// var age;</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> message); <span class="hljs-comment">//undefined</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> age); <span class="hljs-comment">//undefined</span></span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的例子中可以看出 定义了值但是没有初始化的变量message和根本没有定义的变量age 使用typeof操作符判断的数据类型输出的都是undefined，输出结果一样但是技术层面上本质是完全不一样的</p><p>3.2 <strong>Null类型</strong>：只有一个值null，表示一个空对象指针，使用typeof操作符检测数据类型的时候会输出object</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 数据类型2：Null</span></span><br><span class="javascript">     <span class="hljs-keyword">var</span> car = <span class="hljs-literal">null</span>;</span><br><span class="javascript">     </span><br><span class="javascript">     <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> car);  <span class="hljs-comment">//object</span></span><br><span class="javascript">     <span class="hljs-built_in">console</span>.log(car == <span class="hljs-literal">undefined</span>);<span class="hljs-comment">//true      </span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当定义的变量要保存的数据类型为对象的时候将变量初始化为null值，以区分该变量存储其他数据类型时的默认值undefined；undefined值是派生自null值的(所以使用==比较得到的是true)。</p><p>3.3 <strong>Boolean类型</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 数据类型3.Boolean</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> found = <span class="hljs-literal">true</span>;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> notfound = <span class="hljs-literal">false</span>;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;hi&quot;</span>;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> booleanMessage = <span class="hljs-built_in">Boolean</span>(message);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(booleanMessage); <span class="hljs-comment">//true</span></span><br><span class="javascript">    </span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Js的数据类型都可以由Boolean()函数转化为对应的Boolean值，对应的转化如下</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>转换为true的值</strong></th><th><strong>转换为false的值</strong></th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>false</td></tr><tr><td>String</td><td>任何非空字符串</td><td>空字符串</td></tr><tr><td>Number</td><td>任何非零数字值（包括无穷大）</td><td>0和null</td></tr><tr><td>Object</td><td>任何对象</td><td>null</td></tr><tr><td>Undefined</td><td></td><td>Undefined</td></tr></tbody></table><p>3.4 <strong>Number类型</strong></p><p>3.4.1 进制转换</p><p>(1)Js的字面量格式的数值是十进制的；</p><p>(2)八进制(第一位必须是0，后面的数字序列要是0<del>7之间的数值，若字面值超过了0</del>7 那么八进制前面的0将会被忽略进而变成十进制的字面值)表示整数；</p><p>(3)十六进制(前两位必须是0x，后面的跟任何十六进制的数值0<del>9以及A</del>F 字母可以大写也可以小写)表示整数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//数据类型4.Number类型</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> intNum = <span class="hljs-number">10</span>; <span class="hljs-comment">//十进制</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> octalNum = <span class="hljs-number">070</span>; <span class="hljs-comment">//八进制</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> hexnum = <span class="hljs-number">0x1f</span>; <span class="hljs-comment">//十六进制</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(intNum); <span class="hljs-comment">//10</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(octalNum); <span class="hljs-comment">//56</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(hexnum); <span class="hljs-comment">//31</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;=======================&quot;</span>); </span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.4.2 浮点数值:数值中要包含小数点，且小数点后面至少要有一位数字。(浮点数值所需要的内存空间是保存整型数值的两倍)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> floatNum1 = <span class="hljs-number">10.0</span>;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> floatNum2 = <span class="hljs-number">3.14e3</span>; <span class="hljs-comment">//科学计数法</span></span><br><span class="javascript">    </span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(floatNum1); <span class="hljs-comment">//10</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(floatNum2); <span class="hljs-comment">//3140</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浮点数的最高精度是17位小数，算术运算的时候精确度远不足整数的精确度，所以0.1+0.2得不到0.3 ，而是0.30000000000000004 (小数点后面有17位小数)</p><p>3.4.3 数值范围：Number.MIN_VALUE 到 Number.MAX_VALUE</p><p>3.4.4 NaN(Not a Number):非数值是一个特殊的数值，任何涉及NaN的操作结果都是NaN，NaN不与任何值相等(即使是自己)；isNaN()用于判断一个参数是否”不是数值” </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">isNaN</span>(<span class="hljs-literal">NaN</span>); <span class="hljs-comment">//true</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">//false</span><br>参数不是数值范围<span class="hljs-literal">true</span>，是数值的话返回<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>3.4.5 数值转换：非数值转换为数值</p><p>Number():可用于任何数据类型</p><p><img src="/2022/01/18/JavaScript%E5%9F%BA%E7%A1%80/image-20220109162708750.png" alt="image-20220109162708750"></p><p>parseInt()与parseFloat():用于字符串数值转换为数值类型; </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;10&quot;</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//2 按二进制解析</span><br><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;10&quot;</span>,<span class="hljs-number">16</span>); <span class="hljs-comment">//16 按十六进制解析</span><br><br><span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&quot;1234blue&quot;</span>); <span class="hljs-comment">//1234</span><br><span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&quot;123.12.65&quot;</span>); <span class="hljs-comment">//123.12</span><br></code></pre></td></tr></table></figure><p>3.5 String类型：”” 和 ‘’引起来的字符序列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数据类型5.String类型</span><br>    <span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;Today is a good day!&quot;</span>;<br>    <span class="hljs-keyword">var</span> Num = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">console</span>.log(text.length); <span class="hljs-comment">//20 输出字符串的字符个数</span><br>    <span class="hljs-keyword">var</span> strNum = Num.toString(); <span class="hljs-comment">//将数值转换为字符串数值</span><br>    <span class="hljs-built_in">console</span>.log(strNum);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> strNum); <span class="hljs-comment">//string</span><br>    <span class="hljs-keyword">var</span> found = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">console</span>.log(found.toString()); <span class="hljs-comment">//输出字符串true; found.toString()不是布尔类型</span><br></code></pre></td></tr></table></figure><p>null 和 undefined 没有toString()函数；</p><p>3.6 <strong>Object类型</strong>：一组数据和功能结合起来的数据类型</p><h2 id="（三）语句"><a href="#（三）语句" class="headerlink" title="（三）语句"></a>（三）语句</h2><ol><li>for…in语句: 用于遍历对象属性。(遍历数组、对象属性(枚举对象属性))</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"> 遍历数组元素   <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// forin</span></span><br><span class="javascript">    <span class="hljs-comment">///用for...in遍历&quot;数组&quot;: 循环变量x是数组的下标 //</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>,<span class="hljs-number">55</span>,<span class="hljs-number">66</span>];</span><br><span class="javascript"><span class="hljs-keyword">for</span>(x <span class="hljs-keyword">in</span> arr)&#123;</span><br><span class="javascript"><span class="hljs-comment">//Java中的x是数组元素，而js中的x是数组下标</span></span><br><span class="javascript"><span class="hljs-comment">//document.write(x+&quot;&amp;nbsp;&quot;); //下标 : 0 1 2 3 4</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(arr[x]+<span class="hljs-string">&quot;&amp;&quot;</span>); <span class="hljs-comment">//元素</span></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    输出:<br>    22&amp;<br>    33&amp;<br>    44&amp;<br>    55&amp;<br>    66&amp;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">///用for...in遍历&quot;js对象&quot;: 循环变量x是json的成员---属性 与 方法名; 然后对对象中的属性值进行操作</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, age</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.name = name;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.age = age;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.toString = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;,&quot;</span> + <span class="hljs-built_in">this</span>.age;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"> </span><br><span class="javascript">    <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">22</span>);</span><br><span class="javascript">    <span class="hljs-keyword">for</span>(x <span class="hljs-keyword">in</span> p)&#123;</span><br><span class="javascript">        <span class="hljs-comment">//document.write(x+&quot;&amp;nbsp;&quot;); //属性与方法名: name age toString</span></span><br><span class="javascript">        <span class="hljs-comment">//document.write(p.x+&quot;&amp;nbsp;&quot;); </span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(p[x]+<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>); <span class="hljs-comment">//属性值与方法体</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>输出：<br>Jack<span class="hljs-symbol">&amp;nbsp;</span><br>22<span class="hljs-symbol">&amp;nbsp;</span><br>function()&#123;<br>return this.name + &quot;,&quot; + this.age;<br>&#125;<span class="hljs-symbol">&amp;nbsp;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>switch-case</li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">switch</span> (i)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">25</span>:<br>alert (<span class="hljs-string">&quot;25&quot;</span>);<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">35</span>:<br>alert (<span class="hljs-string">&quot;35&quot;</span>);<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">45</span>:<br>alert (<span class="hljs-string">&quot;45&quot;</span>);<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span> :<br>alert (<span class="hljs-string">&quot;other&quot;</span>) ;<br>&#125;<br>Js <span class="hljs-keyword">switch</span>特点：<br><span class="hljs-keyword">switch</span>中的值可以是任何值，<span class="hljs-keyword">case</span>值不一定是常量 可以是变量、表达式<br></code></pre></td></tr></table></figure><h2 id="（四）函数"><a href="#（四）函数" class="headerlink" title="（四）函数"></a>（四）函数</h2><ol><li>函数定义、参数、返回类型，函数是Function类型的一个实例，是一个对象(JS特色)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1,num2</span>)</span>&#123;<br><span class="hljs-keyword">return</span> sum1 + sum2;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1,num2</span>)</span>&#123;<br><span class="hljs-keyword">return</span>; <span class="hljs-comment">//返回undefined 一般用于提前结束函数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">number1,number2</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> number1 + number2;<br>&#125;<br><span class="hljs-keyword">var</span> res = sum(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>); <span class="hljs-comment">//函数调用</span><br><span class="hljs-built_in">console</span>.log(res);<br></code></pre></td></tr></table></figure><ol start="2"><li>arguments函数参数数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">arguments</span>.length==<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>] + <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>] + <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> res2 = sum(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>);<br><span class="hljs-keyword">var</span> res3 = sum(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2099</span>);<br><span class="hljs-built_in">console</span>.log(res2);<br><span class="hljs-built_in">console</span>.log(res3);<br><span class="hljs-comment">//使用函数的arguments属性数组模拟多态</span><br><br>==============================================================================<br><br><span class="hljs-comment">//定义了俩参数 但是只传一个参数的话arguments数组的第二个元素arguments[1]的值为undefined</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum2</span>(<span class="hljs-params">number1,number2</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">arguments</span>.length == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>] + <span class="hljs-number">100</span>);<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>]); <span class="hljs-comment">//undefined</span><br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;传入函数的参数个数为：&quot;</span> + <span class="hljs-built_in">arguments</span>.length);<br>        &#125;<br>    &#125;<br><br>    sum2(<span class="hljs-number">10</span>); <span class="hljs-comment">//110 undefined</span><br>    sum2(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2099</span>); <span class="hljs-comment">//传入函数的参数个数为：3</span><br><br><br></code></pre></td></tr></table></figure><ol start="3"><li><p>Js函数无重载(重载：函数名相同但是用不同的函数参数或者参数个数加以区分) 但是可以使用arguments数组进行模仿多态(判断传入参数的个数来进行对应的函数数据处理)</p></li><li><p>函数声明与函数表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数声明 : 直接声明一个函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hello&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//函数表达式：将函数写好之后赋值给一个用var声明的变量</span><br><span class="hljs-comment">// 匿名函数表达式(function后面没有函数名)</span><br><span class="hljs-keyword">var</span> foo = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;anonymous function expression&#x27;</span>);<br>&#125;;<br><br><span class="hljs-comment">// 具名函数表达式(function后面有函数名)</span><br><span class="hljs-keyword">var</span> foo = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;named function expression&#x27;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol><h2 id="四、Javascript变量、作用域和内存问题"><a href="#四、Javascript变量、作用域和内存问题" class="headerlink" title="四、Javascript变量、作用域和内存问题"></a>四、Javascript变量、作用域和内存问题</h2><h2 id="（一）基本类型和引用类型的值"><a href="#（一）基本类型和引用类型的值" class="headerlink" title="（一）基本类型和引用类型的值"></a>（一）基本类型和引用类型的值</h2><ol><li>JS的变量时松散类型的，这个本质决定了JS的变量只是在一段时间内用于保存某个特定值而已，不想其他的语言声明定义那样要向下面Java那样定义变量。JS定义的number可以是string类型的字符串 也可以是布尔类型的true，而variety就不能像JS这样定义的变量那样，只能是保存int类型数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">int variety = <span class="hljs-number">10</span>; <span class="hljs-comment">//Java定义变量</span><br><span class="hljs-keyword">var</span> number = <span class="hljs-number">10</span>; <span class="hljs-comment">//JS定义变量</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>JS变量会有两种值：基本类型和引用类型；</p><p>基本类型指的是简单的数据段：Undefined、Null、Boolean、Number、String都属于基本类型</p><p>引用类型指的是可能由多个值所构成的<strong>对象</strong>.引用类型的值是保存在内存中的对象，但是JS没有直接访问内存中对象的机制，操作对象实际上是操作对象的引用</p></li></ol><ol start="3"><li><p>JS引用类型变量的动态属性：定义基本类型值和引用类型值的方式是类似的：创建变量+赋值，但是引用类型和基本类型保存到内存之后对变量的操作有很大的差别如下，但是基本类型所创建的变量没有这种属性，这是两种类型的差异一。</p><p>引用类型：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>(); <span class="hljs-comment">//创建对象(引用类型)</span></span><br><span class="javascript">    person.name = <span class="hljs-string">&quot;Morant&quot;</span>;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(person.name); <span class="hljs-comment">//最基础的就是定义引用类型对象的属性，然后访问</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>复制变量值：基本类型值的赋值，操作完成之后变量之间的值都是一样的，但是变量之间是互不影响的，改变其中一个变量的值拷贝的值变量值不会发生改变。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num1 = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> num2 = num1;<br><span class="hljs-built_in">console</span>.log(num1); <span class="hljs-comment">//10</span><br><span class="hljs-built_in">console</span>.log(num2); <span class="hljs-comment">//10</span><br><br>num2 = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">console</span>.log(num1); <span class="hljs-comment">//10</span><br><span class="hljs-built_in">console</span>.log(num2); <span class="hljs-comment">//100</span><br></code></pre></td></tr></table></figure><p><img src="/2022/01/18/JavaScript%E5%9F%BA%E7%A1%80/image-20220111170109277.png" alt="image-20220111170109277"></p></li></ol><p>但是引用类型变量的复制会不同于上述的基本类型值的复制，当一个变量向另一个变量复制引用类型的值时，会将复制过来的值存放到新的内存中，但是，存放到新的内存中的副本值是一个指针，指向的是存储在堆中的一个对象，完成复制后实际上是在两个不同内存空间上的两个变量指向的同一个存储在堆中的一个对象，这时改变一个引用类型变量的某个属性之后，拷贝的副本对应的属性也会发生改变。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><span class="hljs-keyword">var</span> obj2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><br>obj1.name = <span class="hljs-string">&quot;Morant&quot;</span>;<br>obj2 = obj1;<br><span class="hljs-built_in">console</span>.log(obj2.name); <span class="hljs-comment">//Morant</span><br><br>obj2.name = <span class="hljs-string">&quot;Boom&quot;</span>;<br><span class="hljs-built_in">console</span>.log(obj2.name); <span class="hljs-comment">//Boom</span><br><span class="hljs-built_in">console</span>.log(obj1.name); <span class="hljs-comment">// Boom</span><br></code></pre></td></tr></table></figure><p><img src="/2022/01/18/JavaScript%E5%9F%BA%E7%A1%80/image-20220111170040924.png" alt="image-20220111170040924"></p><ol start="5"><li><p>传递参数(有意思的一点)：JS中所有的函数参数都是<strong>按值传递</strong>的！</p><p>当函数传递的参数是基本类型的话，和其他的开发语言是一样的，传进去改造加工，外面用一个值接收加工后的值，但是原料(number)是没有变的，函数中num只是原料(number)中的一个副本,这说明了函数的参数传递是按值传递。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> number = <span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num</span>)</span>&#123;<br><span class="hljs-keyword">return</span> num + <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">var</span> result = sum(number);<br><span class="hljs-built_in">console</span>.log(number); <span class="hljs-comment">//10</span><br><span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">//20</span><br></code></pre></td></tr></table></figure><p>当函数传递的参数是引用类型的话，这里就需要区分一下一个易混点，如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setName</span>(<span class="hljs-params">obj</span>)</span>&#123;<br>obj.name = <span class="hljs-string">&quot;Morant&quot;</span>;<br>&#125;<br>setName(person);<br><span class="hljs-built_in">console</span>.log(person.name);<span class="hljs-comment">//Morant</span><br></code></pre></td></tr></table></figure><p>这个例子表面上看上去是在函数这个局部作用域中为函数外的外部作用域中定义的person添加了name属性，然后外部作用域可以得到person的name就是Morant，这很明显符合按引用传递参数，(易混点：局部作用域中操作外部作用域中对象的引用为其加上name属性，就是按引用传递的函数参数，不然外部的变量怎么会被内部作用域的操作改变了外部作用域中对象的值呢？就像基本类型那样，经过了函数，出来之后发现原料自己变了，但实际上并不是这样的)</p><p>推翻上面的例子代码如下，真正说明函数的参数全部都是按值传递的，没有按引用传递：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setName</span>(<span class="hljs-params">obj</span>)</span>&#123;<br>obj.name = <span class="hljs-string">&quot;Morant&quot;</span>;<br>obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>(); <span class="hljs-comment">//新的引用</span><br>obj.name = <span class="hljs-string">&quot;Boom&quot;</span>;<br>&#125;<br>setName(person);<br><span class="hljs-built_in">console</span>.log(person.name);<span class="hljs-comment">//Morant</span><br></code></pre></td></tr></table></figure><p>上面的例子函数中再重新为传入函数的参数person设置完name属性之后，重新创建了一个对象赋值给参数person，然后这只person的name属性为Boom，但是外部输出person的name发现还是Morant。(如果有按引用传递参数的话，传进函数的person应该会存储堆中另一个对象B的引用值，并且这个对象B的name属性是Boom，这时按照引用传递参数的机制解释的话，外部的person指向的是在函数中新创建的对象B的引用，外部输出的name值应该是Boom，但并不是这样的) 这说明了JS的函数参数传递都是按值传递的，没有按引用传递。</p></li></ol><ol start="6"><li><p>检测类型</p><p>检测基本类型使用typeof，检测引用类型使用instanceof；(使用typeof检测引用类型(null、对象)的话返回的都是Object)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> number = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">var</span> res1 = person <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>;<br><span class="hljs-keyword">var</span> res2 = arr <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>;<br><span class="hljs-keyword">var</span> res3 = number <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>;<br><br><span class="hljs-built_in">console</span>.log(res1);<span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(res2);<span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(res3);<span class="hljs-comment">// false</span><br><span class="hljs-comment">//是引用类型的话返回的是true，否则返回false</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="（二）作用域-执行环境-与作用域链"><a href="#（二）作用域-执行环境-与作用域链" class="headerlink" title="（二）作用域(执行环境)与作用域链"></a>（二）作用域(执行环境)与作用域链</h2><p>执行环境官方解答(高程三第四章小结)：所有变量(包括基本类型和引用类型)都存在于一个执行环境(也成为作用域)中(以下称之为作用域)，这个作用域决定了变量的生命周期，以及哪一部分代码可以访问其中的变量。某个执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁（全局执行环境直到应用程序退出—–例如关闭网页或浏览器——时才会被销毁)</p><ol><li><p><strong>作用域</strong>：分为全局作用域 和 函数(私有)作用域；每个作用域都与一个<strong>变量对象</strong>相关联，<strong>这个作用域里面的东西归这个作用域里面的变量对象管控</strong>（就像一个对象里面有属性和方法那样，定义对象你可以定义属性和方法，对象里面类似一个作用域），那么从大局来看，直接写代码定义一个变量，那么这个变量也看成是属于一个“对象”,不过这个对象不是我们用的，是后台的解析器处理数据的时候使用的。</p><p>(1)<strong>全局作用域</strong>：最外围的一个作用域，Web浏览器中全局作用域被认为是window对象，所有的全局变量和函数都理解为是这个对象的属性与方法。</p><p>(2)<strong>函数作用域</strong>：函数执行都会形成一个局部作用域，<strong>函数</strong>形成的函数作用域的话函数的<strong>活动对象</strong>被看成是这个函数作用域的<strong>变量对象</strong>，活动对象刚开始会包含一个arguments变量(函数那章提到的函数参数存放的地方)，全局作用域没有arguments</p></li><li><p><strong>作用域链</strong>：当代码在一个环境中执行时，会创建变量对象的一个作用域链（作用域形成的链条）。<strong>这个作用域链始终是从当前代码所属的作用域出发，往外部延伸，最终到全局作用域中。</strong>这样的机制决定了为什么函数内部可以使用函数外部的变量，但是函数外部不能访问或使用函数内部的变量的原因(作用域链由前到后，由内及外（但仍是从上到下解析）)。变量的查找是沿着作用域链来实现的，所以也称作用域链为<strong>变量查找的机制</strong>。这个机制也说明了<strong>访问局部变量要比访问全局变量更快</strong>，但是这个快的程度可以忽略不计。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> number = <span class="hljs-number">10</span>;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> Num1 = <span class="hljs-number">100</span>;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> Num1 + number;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> res = sum();</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(res); <span class="hljs-comment">//110</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/01/18/JavaScript%E5%9F%BA%E7%A1%80/image-20220111235939808.png" alt="image-20220111235939808"></p></li></ol><p>​       作用域链前后首尾：</p><p><img src="/2022/01/18/JavaScript%E5%9F%BA%E7%A1%80/image-20220111211559198.png" alt="image-20220111211559198"></p><ol start="3"><li><p>标识符的解析过程就是沿着作用域链一级一级(由内及外)往外搜索的过程，直到找到标识符为止，最终会到全局作用域，如果这时还没有找到标识符(定义的变量名)的话，将会报错；如果有多个相同的标识符，以由内及外最先搜索到的为准。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> number = <span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> number = <span class="hljs-number">20</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum2</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> number + <span class="hljs-number">10</span>; <br>        <span class="hljs-comment">//往外找 首先找到sum函数里面有一个number 20 就用它了 找不到全局作用域中的number 10</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> sum2();<br>&#125;<br><span class="hljs-keyword">var</span> result = sum();<br><span class="hljs-built_in">console</span>.log(result);<span class="hljs-comment">//30</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">tips：测试代码对函数的返回值不熟悉的地方，与主题内容作用域无关，一个注意事项<br><br>=================================<br>    <br>注意要返回函数的结果是要调用函数之后再返回函数<span class="hljs-keyword">return</span>回来的结果<br><span class="hljs-keyword">var</span> res = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(res) <span class="hljs-comment">//控制台输出的是函数代码本身</span><br><br>要返回<span class="hljs-number">2</span>要是这样<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">var</span> res = sum();<br><span class="hljs-built_in">console</span>.log(res);<span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure></li><li><p>没有块级作用域：Js不会因为{ }的存在而产生在{ }内的块级作用域，其他的类C语言会有这样的机制，这是js与其他语言的区别:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>;i++)&#123;<br><span class="hljs-keyword">var</span> number = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(number);<br>&#125;<br><span class="hljs-built_in">console</span>.log(number); <span class="hljs-comment">//10</span><br></code></pre></td></tr></table></figure><p>在其他的类C语言中 这样的代码会报错，因为{ }中的代码在执行完之后，块级作用域的变量所占用的内存将会被释放，外部无法访问。但是Js可以访问。<strong>块级作用域详细见Javascript有关块级作用域的问题</strong></p></li></ol><h2 id="（三）垃圾收集"><a href="#（三）垃圾收集" class="headerlink" title="（三）垃圾收集"></a>（三）垃圾收集</h2><ol><li><p>垃圾回收机制：找出那些不再继续使用的变量释放其占用的内存。</p></li><li><p>就函数中的局部变量来说，当函数执行结束之后，函数中的变量就没用了，这个时候函数中的变量占据的内存就要被释放掉，但不是所有的变量情况都是这么简单判断的。垃圾收集器要跟踪哪些变量有用哪些变量没用来检测标识符，通常有两种策略。</p><p>（1）标记清除(mark-and-sweep)</p><p>​        JS最常用的垃圾收集方式，当变量”进入环境”(在函数中定义一个变量的时候)，将这个变量标记为进入环境，因为执行流进入函数的时候会用到那些进入环境的变量，所以不能释放这些将要用到的变量。当变量离开环境的时候(举例我理解为当函数执行结束的时候)，将其标记为”离开环境”。垃圾收集器会将内存中的所有变量加上标记(这一步可能是用来统计程序运行时内存中有多少个变量了)，然后再去掉标记，在这之后被加上标记的变量将被视为要删除的变量，最后垃圾收集器释放掉离开环境的变量所占的内存并回收。</p><p>（2）引用计数(reference counting)及其他可以垃圾回收可以康康下面的帖子，这部分内容暂时有点深奥，感觉目前由于概念问题扎进去感觉也不是能马上明白：<a href="https://www.jianshu.com/p/a8a04fd00c3c">https://www.jianshu.com/p/a8a04fd00c3c</a></p><p>​        </p></li></ol><h2 id="五、Javascript引用类型"><a href="#五、Javascript引用类型" class="headerlink" title="五、Javascript引用类型"></a>五、Javascript引用类型</h2><ol><li><p>引用类型：引用类型的值(对象)是引用类型的实例，在ES中引用类型是一种数据结构。    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br></code></pre></td></tr></table></figure></li></ol><h2 id="（一）Object类型"><a href="#（一）Object类型" class="headerlink" title="（一）Object类型"></a>（一）Object类型</h2><ol><li><p>创建Object实例的两种方式：构造函数法和字面量法(不会调用Object构造函数)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//构造函数法</span><br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>person.name = <span class="hljs-string">&quot;Morant&quot;</span>;<br>person.age = <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//字面量法,属性之间使用逗号隔开,</span><br><span class="hljs-keyword">var</span> person = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Morant&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">20</span>,<br>    <span class="hljs-attr">sayHello</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;My name is &quot;</span>+ <span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(person.name);<br><span class="hljs-built_in">console</span>.log(person.age);<br>person.sayHello();<br></code></pre></td></tr></table></figure></li><li><p>访问属性的方式：点表示法和[ ]表示法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Morant&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">20</span>,<br>    <span class="hljs-attr">sayHello</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;My name is &quot;</span>+ <span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(person.name); <span class="hljs-comment">//使用对象类型的方式访问属性</span><br><span class="hljs-built_in">console</span>.log(person[<span class="hljs-string">&quot;name&quot;</span>]);<span class="hljs-comment">//使用person 变量 的方式来访问属性</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="（二）Array类型"><a href="#（二）Array类型" class="headerlink" title="（二）Array类型"></a>（二）Array类型</h2><ol><li><p>JS中的数组与其他语言数组的区别：</p><p>(1)ES的数组每一项可以保存不同的数据类型(第一个保存字符串、第二个保存对象…)</p><p>(2)ES的数组大小可以动态调整</p></li><li><p>创建数组的两种方式：构造函数法和字面量法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//构造函数法</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;Morant&quot;</span>,<span class="hljs-string">&quot;Thomas&quot;</span>,<span class="hljs-string">&quot;Boom&quot;</span>]; <span class="hljs-comment">//字面量法</span><br></code></pre></td></tr></table></figure></li><li><p>JS的数组长度不是只读的，可以通过设置数组的长度达到调整数组的目的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&quot;Morant&quot;</span>,<span class="hljs-string">&quot;Thomas&quot;</span>,<span class="hljs-string">&quot;Boom&quot;</span>);<br><span class="hljs-built_in">console</span>.log(arr.length); <span class="hljs-comment">//3</span><br>arr.length = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">console</span>.log(arr[<span class="hljs-number">2</span>]);<span class="hljs-comment">//undefined</span><br><br>arr[arr.length] = <span class="hljs-string">&quot;Boom&quot;</span>;<br><span class="hljs-built_in">console</span>.log(arr[<span class="hljs-number">2</span>]); <span class="hljs-comment">//Boom</span><br></code></pre></td></tr></table></figure></li><li><p>输出数组的几种方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&quot;Morant&quot;</span>,<span class="hljs-string">&quot;Thomas&quot;</span>,<span class="hljs-string">&quot;Boom&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br><span class="hljs-built_in">console</span>.log(arr[i]);<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> i <span class="hljs-keyword">in</span> arr) &#123;<br><span class="hljs-built_in">console</span>.log(arr[i]);<br>&#125;<br><br>arr.forEach(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> &#123;<br><span class="hljs-built_in">console</span>.log(element);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>检测数组：检测某个变量是否是Array类型，使用Array.isArray(Value)方法判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&quot;Morant&quot;</span>,<span class="hljs-string">&quot;Thomas&quot;</span>,<span class="hljs-string">&quot;Boom&quot;</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.isArray(arr)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>也可以使用instanceof来检测，但是得到的结果是Object，原因是Array是起源自Object类型，但是具体的方式还是使用ES5新增的这个Array.isArray()较好</p></li><li><p>输出数组数据的字符串表示方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&quot;Morant&quot;</span>,<span class="hljs-string">&quot;Thomas&quot;</span>,<span class="hljs-string">&quot;Boom&quot;</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;输出数组数据的字符串形式&quot;</span>)<br><span class="hljs-built_in">console</span>.log(arr.toString()); <span class="hljs-comment">//Morant,Thomas,Boom</span><br><span class="hljs-built_in">console</span>.log(arr.valueOf()); <span class="hljs-comment">//(3) [&#x27;Morant&#x27;, &#x27;Thomas&#x27;, &#x27;Boom&#x27;]</span><br><span class="hljs-built_in">console</span>.log(arr.toLocaleString()); <span class="hljs-comment">//Morant,Thomas,Boom</span><br></code></pre></td></tr></table></figure><p><img src="/2022/01/18/JavaScript%E5%9F%BA%E7%A1%80/image-20220113144602580.png" alt="image-20220113144602580"></p></li><li><p>数据结构API：JS提供了模拟数据结构的方法</p><p>(1)模拟栈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&quot;Morant&quot;</span>,<span class="hljs-string">&quot;Thomas&quot;</span>,<span class="hljs-string">&quot;Boom&quot;</span>);<br>arr.push(<span class="hljs-string">&quot;Gorege&quot;</span>);<br><span class="hljs-built_in">console</span>.log(arr.valueOf()); <span class="hljs-comment">//[&#x27;Morant&#x27;, &#x27;Thomas&#x27;, &#x27;Boom&#x27;, &#x27;Gorege&#x27;] 从数组尾部push压入元素</span><br>arr.pop();<br><span class="hljs-built_in">console</span>.log(arr.valueOf()); <span class="hljs-comment">//[&#x27;Morant&#x27;, &#x27;Thomas&#x27;, &#x27;Boom&#x27;] 从数组尾部pop弹出元素</span><br></code></pre></td></tr></table></figure><p>(2)模拟队列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//正向模拟,队头出队，队尾入队</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&quot;Morant&quot;</span>,<span class="hljs-string">&quot;Thomas&quot;</span>,<span class="hljs-string">&quot;Boom&quot;</span>);<br>arr.push(<span class="hljs-string">&quot;Gorege&quot;</span>);<br><span class="hljs-built_in">console</span>.log(arr.valueOf()); <span class="hljs-comment">//[&#x27;Morant&#x27;, &#x27;Thomas&#x27;, &#x27;Boom&#x27;, &#x27;Gorege&#x27;] 从数组尾部push压入元素</span><br>arr.shift();<br><span class="hljs-built_in">console</span>.log(arr.valueOf()); <span class="hljs-comment">//[&#x27;Thomas&#x27;, &#x27;Boom&#x27;, &#x27;Gorege&#x27;] 将数组元素从数组首部弹出</span><br><br><span class="hljs-comment">//反向模拟,队头入队，队尾出队</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&quot;Morant&quot;</span>,<span class="hljs-string">&quot;Thomas&quot;</span>,<span class="hljs-string">&quot;Boom&quot;</span>);<br>arr.unshift(<span class="hljs-string">&quot;Gorege&quot;</span>);<br><span class="hljs-built_in">console</span>.log(arr.valueOf()); <span class="hljs-comment">//[&#x27;Gorege&#x27;, &#x27;Morant&#x27;, &#x27;Thomas&#x27;, &#x27;Boom&#x27;] 从数组首部压入元素</span><br>arr.pop();<br><span class="hljs-built_in">console</span>.log(arr.valueOf()); <span class="hljs-comment">//[&#x27;Gorege&#x27;, &#x27;Morant&#x27;, &#x27;Thomas&#x27;] 将数组元素从数组尾部弹出</span><br></code></pre></td></tr></table></figure><p>(3)重排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-built_in">console</span>.log(arr.reverse()); <span class="hljs-comment">//[5, 4, 3, 2, 1]</span><br><span class="hljs-built_in">console</span>.log(arr.reverse().sort()); <span class="hljs-comment">//[1, 2, 3, 4, 5]</span><br><br><span class="hljs-comment">//sort()会调用数组每一项的toString()方法，然后比较字符串确定排序,会有Bug</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">5</span>];<br><span class="hljs-built_in">console</span>.log(arr.sort()); <span class="hljs-comment">//[-1, 1, 10, 15, 5]</span><br></code></pre></td></tr></table></figure><p><strong>适合大多数数据类型的排序方法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">5</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compare</span>(<span class="hljs-params">value1,value2</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> value1 - value2; <span class="hljs-comment">//升序</span><br>    <span class="hljs-comment">//return value2 - value1; //降序</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(arr.sort(compare)); <span class="hljs-comment">//[-1, 1, 5, 10, 15]</span><br></code></pre></td></tr></table></figure></li><li><p>操作数组API</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">concat():连接创建新的数组<br><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;Morant&quot;</span>,<span class="hljs-string">&quot;Thomas&quot;</span>,<span class="hljs-string">&quot;Boom&quot;</span>];<br><span class="hljs-keyword">var</span> arr2 = arr.concat(<span class="hljs-string">&quot;Gorege&quot;</span>,[<span class="hljs-string">&quot;Lebron&quot;</span>,<span class="hljs-string">&quot;Irvine&quot;</span>]);<br><span class="hljs-built_in">console</span>.log(arr2); <span class="hljs-comment">//[&#x27;Morant&#x27;, &#x27;Thomas&#x27;, &#x27;Boom&#x27;, &#x27;Gorege&#x27;, &#x27;Lebron&#x27;, &#x27;Irvine&#x27;]</span><br>===========================<br>    <br>slice():基于当前数组创建几个数组<br>一个参数代表从数组下标当前位置到数组尾<br>两个参数代表返回从这两个数组下标参数之间的元素，但是不包括最后一个元素，头还是包括的<br><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;Morant&quot;</span>,<span class="hljs-string">&quot;Thomas&quot;</span>,<span class="hljs-string">&quot;Boom&quot;</span>];<br><span class="hljs-keyword">var</span> arr2 = arr.concat(<span class="hljs-string">&quot;Gorege&quot;</span>,[<span class="hljs-string">&quot;Lebron&quot;</span>,<span class="hljs-string">&quot;Irvine&quot;</span>]);<br><span class="hljs-built_in">console</span>.log(arr2); <span class="hljs-comment">//[&#x27;Morant&#x27;, &#x27;Thomas&#x27;, &#x27;Boom&#x27;, &#x27;Gorege&#x27;, &#x27;Lebron&#x27;, &#x27;Irvine&#x27;]</span><br><br><span class="hljs-built_in">console</span>.log(arr2.slice(<span class="hljs-number">0</span>)); <span class="hljs-comment">// [&#x27;Morant&#x27;, &#x27;Thomas&#x27;, &#x27;Boom&#x27;, &#x27;Gorege&#x27;, &#x27;Lebron&#x27;, &#x27;Irvine&#x27;]</span><br><span class="hljs-built_in">console</span>.log(arr2.slice(<span class="hljs-number">1</span>)); <span class="hljs-comment">//[&#x27;Thomas&#x27;, &#x27;Boom&#x27;, &#x27;Gorege&#x27;, &#x27;Lebron&#x27;, &#x27;Irvine&#x27;]</span><br><span class="hljs-built_in">console</span>.log(arr2.slice(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)); <span class="hljs-comment">//[&#x27;Thomas&#x27;, &#x27;Boom&#x27;] 下标1和下标2位置的元素</span><br>===========================<br>    <br>splice()：主要用途是向数组中部插入项<br><span class="hljs-number">1.</span>删除任意数量的数据项，第一个参数是从哪开始，第二个参数是往后几项<br><span class="hljs-number">2.</span>指定位置插入任意数量的项，起始位置，<span class="hljs-number">0</span>(删除项数)，插入的元素<br><span class="hljs-number">3.</span>指定位置插入任意项，同时删除任意项<br></code></pre></td></tr></table></figure></li><li><p>根据元素查找该元素在数组中的下标(用数据找下标)，没找到返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;Morant&quot;</span>,<span class="hljs-string">&quot;Thomas&quot;</span>,<span class="hljs-string">&quot;Boom&quot;</span>];<br><span class="hljs-built_in">console</span>.log(arr.indexOf(<span class="hljs-string">&quot;Morant&quot;</span>));  <span class="hljs-comment">//0</span><br><span class="hljs-built_in">console</span>.log(arr.lastIndexOf(<span class="hljs-number">2</span>)); <span class="hljs-comment">//-1</span><br><span class="hljs-built_in">console</span>.log(arr.lastIndexOf(<span class="hljs-string">&quot;Morant&quot;</span>)); <span class="hljs-comment">//0 从数组尾部开始找起，但是数组的下标还是重头开始0、1、2...</span><br></code></pre></td></tr></table></figure></li><li><p>迭代方法和缩小方法</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">迭代方法：<br>every()<br>filter()<br>forEach()<br>map()<br>some()<br><br>缩小方法：<br>reduce()<br>reduceRight()<br></code></pre></td></tr></table></figure><h2 id="（三）Date类型"><a href="#（三）Date类型" class="headerlink" title="（三）Date类型"></a>（三）Date类型</h2><ol><li><p>使用Date类型的构造方法创建Date对象，可以获取当前的时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-built_in">console</span>.log(date); <span class="hljs-comment">//Tue Jan 18 2022 16:48:39 GMT+0800 (中国标准时间)</span><br></code></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>创建指定时间的日起对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&quot;May 25,2004&quot;</span>);<br><span class="hljs-built_in">console</span>.log(date);<span class="hljs-comment">//Tue May 25 2004 00:00:00 GMT+0800 (中国标准时间)</span><br></code></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>Date类型常用API(用于获取日期)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-built_in">console</span>.log(date.toTimeString()); <span class="hljs-comment">//16:58:51 GMT+0800 (中国标准时间)</span><br><span class="hljs-built_in">console</span>.log(date.toDateString()); <span class="hljs-comment">//Tue Jan 18 2022</span><br><span class="hljs-built_in">console</span>.log(date.toUTCString()); <span class="hljs-comment">//Tue, 18 Jan 2022 09:00:01 GMT</span><br><br><span class="hljs-built_in">console</span>.log(date.getFullYear()); <span class="hljs-comment">//2022</span><br><span class="hljs-built_in">console</span>.log(date.getMonth()); <span class="hljs-comment">//0 (0表示1月，11表示12月)</span><br><span class="hljs-built_in">console</span>.log(date.getDate());  <span class="hljs-comment">//18</span><br><span class="hljs-built_in">console</span>.log(date.getDay());  <span class="hljs-comment">//2 (星期二)</span><br><span class="hljs-built_in">console</span>.log(date.getHours());  <span class="hljs-comment">//17 (时)</span><br><span class="hljs-built_in">console</span>.log(date.getMinutes()); <span class="hljs-comment">//3 (分)</span><br><span class="hljs-built_in">console</span>.log(date.getSeconds());  <span class="hljs-comment">//7 (秒)</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="（四）RegExp类型"><a href="#（四）RegExp类型" class="headerlink" title="（四）RegExp类型"></a>（四）RegExp类型</h2><ol><li>用于支持正则表达式</li></ol><h2 id="（五）Function类型"><a href="#（五）Function类型" class="headerlink" title="（五）Function类型"></a>（五）Function类型</h2><ol><li><p>在JS中函数是一个对象，函数名是指向函数对象的一个指针</p></li><li><p>函数的声明式语法与函数表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">声明式语法：<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1,num2</span>)</span>&#123;<br><span class="hljs-keyword">return</span> num1 + num2;<br>&#125;<br><br>函数表达式：<br><span class="hljs-keyword">var</span> sum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num1,num2</span>)</span>&#123;<br><span class="hljs-keyword">return</span> num1 + num2;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>函数名仅是指向函数对象的一个指针</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> sum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num1,num2</span>)</span>&#123;<br><span class="hljs-keyword">return</span> num1 + num2;<br>&#125;<br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)); <span class="hljs-comment">//3</span><br><span class="hljs-keyword">var</span> anotherSum = sum;<br>sum = <span class="hljs-literal">null</span>;<br><span class="hljs-built_in">console</span>.log(anotherSum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)); <span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>JS函数无重载：从函数名代表着一个指针就可以更好地理解为什么JS函数没有重载，每个函数的函数名对应着各自的指针(做不到类Java语言那种函数名相同但是可以通过函数参数来区分每个函数用来干什么),但是可以通过函数中的arguments对传入函数的参数进行判断进而作出不同的功能(模拟重载)。</p></li><li><p><strong>函数声明与函数表达式的区别！</strong></p><p>这涉及到函数提升与函数表达式提升的问题，JS的提升顺序从高到低:<strong>函数提升 &gt; 函数表达式 &gt; 变量</strong></p><p>(1)函数声明提升(function declareation hoisting)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)); <span class="hljs-comment">//3</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1,num2</span>)</span>&#123;<br><span class="hljs-keyword">return</span> num1 + num2;<br>&#125;<br><br>实际的代码逻辑：(将函数声明整体提升)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1,num2</span>)</span>&#123;<br><span class="hljs-keyword">return</span> num1 + num2;<br>&#125;<br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)); <span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure><p>(2)函数表达式提升</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)); <span class="hljs-comment">//Uncaught TypeError: sum is not a function</span><br><span class="hljs-keyword">var</span> sum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num1,num2</span>)</span>&#123;<br><span class="hljs-keyword">return</span> num1 + num2;<br>&#125;<br><br>实际的代码逻辑<br><span class="hljs-keyword">var</span> sum; <span class="hljs-comment">//undefined</span><br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)); <span class="hljs-comment">//Uncaught TypeError: sum is not a function</span><br>sum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num1,num2</span>)</span>&#123;<br><span class="hljs-keyword">return</span> num1 + num2;<br>&#125;<br><br>体现出函数表达式提升的例子<br><span class="hljs-built_in">console</span>.log(sum); <span class="hljs-comment">//undefined</span><br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)); <span class="hljs-comment">//Uncaught TypeError: sum is not a function</span><br><span class="hljs-keyword">var</span> sum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num1,num2</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> num1 + num2;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>作为值的函数(函数看成一个值来进行操作)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 返回其他函数执行结果的函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">returnOther</span>(<span class="hljs-params">someFunction,args</span>)</span>&#123;<br><span class="hljs-keyword">return</span> someFunction(args);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1</span>)</span>&#123;<br><span class="hljs-keyword">return</span> num1 + <span class="hljs-number">100</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(returnOther(sum,<span class="hljs-number">100</span>));<span class="hljs-comment">//200</span><br></code></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>函数的属性与方法</p><p>(1)内部属性arguments与this</p><p>arguments对象：类数组对象，包含着传入函数的参数</p><p>this对象：代表当前的引用类型具体是哪个，处于”这个”引用类型的执行环境(作用域)下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">window</span>.color = <span class="hljs-string">&quot;red&quot;</span>;<br><span class="hljs-keyword">var</span> o = &#123;<br><span class="hljs-attr">color</span> : <span class="hljs-string">&quot;blue&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayColor</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.color);<span class="hljs-comment">//输出当前执行环境的color值(当前属于哪个引用类型的执行环境(作用域))</span><br>&#125;<br>sayColor();<span class="hljs-comment">//red</span><br>o.sayColor = sayColor; <span class="hljs-comment">//引用值给到它</span><br>o.sayColor();<span class="hljs-comment">//blue</span><br></code></pre></td></tr></table></figure><p>(2)length属性与prototype属性</p><p>length：指明当前函数接收多少个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayColor</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.color);<span class="hljs-comment">//输出当前执行环境的color值(当前属于哪个引用类型的执行环境(作用域))</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(sayColor.length); <span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><p>prototype：</p><p>(3)apply()方法与call()方法：专出一篇仔细区分 ：<a href="https://blog.csdn.net/weixin_42321292/article/details/82352997">https://blog.csdn.net/weixin_42321292/article/details/82352997</a></p></li></ol><h2 id="（六）基本包装类型-少用"><a href="#（六）基本包装类型-少用" class="headerlink" title="（六）基本包装类型(少用)"></a>（六）基本包装类型(少用)</h2><ol><li><p>将基本类型包装成<strong>引用类型</strong>进行操作，基本类型就有了像对象那样可以添加属性和方法，可分为Boolean类型、Number类型、String类型。(自己就是基本类型，但是有引用类型的属性与方法)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">String</span>类型的包装：<br><span class="hljs-keyword">var</span> s1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-built_in">console</span>.log(s1); <span class="hljs-comment">//String &#123;&#x27;Hello&#x27;&#125;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> s1); <span class="hljs-comment">//object</span><br>s1.name = <span class="hljs-string">&quot;Aloha&quot;</span>;<br><span class="hljs-built_in">console</span>.log(s1.name); <span class="hljs-comment">//Aloha</span><br><br><span class="hljs-built_in">Number</span>类型的包装：<br><span class="hljs-keyword">var</span> num = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-number">100</span>);<br><span class="hljs-built_in">console</span>.log(num); <span class="hljs-comment">//Number &#123;100&#125;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> num);<span class="hljs-comment">//object</span><br><span class="hljs-built_in">console</span>.log(num.toString()); <span class="hljs-comment">//100</span><br><br><span class="hljs-built_in">Boolean</span>类型的包装：<br><span class="hljs-keyword">var</span> flag = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> flag);<span class="hljs-comment">//object</span><br><span class="hljs-built_in">console</span>.log(flag);<span class="hljs-comment">//Boolean &#123;false&#125;</span><br><span class="hljs-built_in">console</span>.log(flag &amp;&amp; <span class="hljs-literal">true</span>);<span class="hljs-comment">//true (object &amp;&amp; true);</span><br><span class="hljs-built_in">console</span>.log(flag &amp;&amp; <span class="hljs-literal">false</span>);<span class="hljs-comment">//false (object &amp;&amp; false);</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="（七）单体内置对象"><a href="#（七）单体内置对象" class="headerlink" title="（七）单体内置对象"></a>（七）单体内置对象</h2><ol><li><p>程序执行之前就已经存在的对象，不用实例化就能用(例如Object、Array、String)。还有两个单体内置对象Global和Math</p></li><li><p>Global对象：看上去不存在的对象，但是是JS里面兜底的对象，所有不属于其他对象的属性与方法都属于这个对象</p><p>(1)Global的 <strong>eval()</strong> 方法：一个完整的JS解析器，它接收的参数就是JS代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;console.log(message)&quot;</span>);<span class="hljs-comment">//Hello (参数就是JS代码，字符串形式的)</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;function sayHello()&#123;console.log(&#x27;Hello&#x27;);&#125;&quot;</span>); <span class="hljs-comment">//要写在一行里面</span><br>sayHello(); <span class="hljs-comment">//Hello</span><br></code></pre></td></tr></table></figure></li><li><p>Math对象：其对象与方法用于辅助完成数学运算</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS函数中的apply与call</title>
    <link href="/2022/01/18/JS%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84apply%E4%B8%8Ecall/"/>
    <url>/2022/01/18/JS%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84apply%E4%B8%8Ecall/</url>
    
    <content type="html"><![CDATA[<h1 id="JS中的call和apply方法"><a href="#JS中的call和apply方法" class="headerlink" title="JS中的call和apply方法"></a>JS中的call和apply方法</h1><h2 id="一、方法定义："><a href="#一、方法定义：" class="headerlink" title="一、方法定义："></a>一、方法定义：</h2><p>(1)apply：调用一个对象的一个方法，用另一个对象替换当前对象。例如：B.apply(A, arguments);即A对象应用B对象的方法。<br>(2)call：调用一个对象的一个方法，用另一个对象替换当前对象。例如：B.call(A, args1,args2);即A对象调用B对象的方法。</p><h2 id="二、call-与-apply-的相同点与差异"><a href="#二、call-与-apply-的相同点与差异" class="headerlink" title="二、call 与 apply 的相同点与差异"></a>二、call 与 apply 的相同点与差异</h2><p>相同点：</p><ul><li>方法的含义是一样的，即方法功能是一样的；</li><li>第一个参数的作用是一样的；</li></ul><p>不同点：两者传入的列表形式不一样</p><ul><li>call可以传入多个参数；</li><li>apply只能传入两个参数，所以其第二个参数往往是作为数组形式传入</li><li>函数的第一个参数都是this的指向对象</li></ul><h2 id="三、apply-与call-的作用"><a href="#三、apply-与call-的作用" class="headerlink" title="三、apply()与call()的作用"></a>三、apply()与call()的作用</h2><p>如何理解这两个函数的实际作用，首先要从JS中函数的本质上理解。JS中函数的本质是对象(引用类型)，函数名是指向引用的一个指针，那么函数内部的作用域可以看做是函数名指向的那个引用A的作用域，这个时候函数里面的this指代的就是引用A，而函数有call和apply方法，<strong>可以改变当前这个函数所指向的引用，进而改变函数内部this的指向，用于重新定义this</strong>。</p><h2 id="四、举例"><a href="#四、举例" class="headerlink" title="四、举例"></a>四、举例</h2><h4 id="一-、理解this指向"><a href="#一-、理解this指向" class="headerlink" title="(一)、理解this指向"></a>(一)、理解this指向</h4><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Morant&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMessage</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>&#125;<br><span class="hljs-comment">//这时调用的this指向的是window对象,(直接调用可以看成是兜底的对象调用的)</span><br>getMessage();<span class="hljs-comment">//Morant </span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> Morant = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Morant&quot;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">21</span>,<br><span class="hljs-attr">sayHello</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;My name is &quot;</span>+<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;,&quot;</span>+<span class="hljs-string">&quot;I&#x27;m &quot;</span>+<span class="hljs-built_in">this</span>.age+<span class="hljs-string">&quot; years old&quot;</span> );<br>&#125;<br>&#125;<br><span class="hljs-comment">//这里的this指向的是Morant</span><br>Morant.sayHello(); <span class="hljs-comment">//My name is Morant,I&#x27;m 21 years old</span><br></code></pre></td></tr></table></figure><h4 id="二-、使用方法改变this指向"><a href="#二-、使用方法改变this指向" class="headerlink" title="(二)、使用方法改变this指向"></a>(二)、使用方法改变this指向</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> Morant = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Morant&quot;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">21</span>,<br><span class="hljs-attr">sayHello</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;My name is &quot;</span>+<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;,&quot;</span>+<span class="hljs-string">&quot;I&#x27;m &quot;</span>+<span class="hljs-built_in">this</span>.age+<span class="hljs-string">&quot; years old&quot;</span> );<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> Boom = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Boom&quot;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">20</span><br>&#125;<br><br>Morant.sayHello(); <span class="hljs-comment">//My name is Morant,I&#x27;m 21 years old</span><br><br><span class="hljs-comment">//将Morant调用方法的this指向从Morant指向Boom,进而使用Morant的方法输出Boom的信息</span><br>Morant.sayHello.call(Boom); <span class="hljs-comment">//My name is Boom,I&#x27;m 20 years old</span><br>Morant.sayHello.apply(Boom); <span class="hljs-comment">//My name is Boom,I&#x27;m 20 years old</span><br><br>Morant.sayHello.bind(Boom)();<span class="hljs-comment">//My name is Boom,I&#x27;m 20 years old (bind()返回的是一个新的函数)</span><br></code></pre></td></tr></table></figure><h4 id="三-、方法的参数差别"><a href="#三-、方法的参数差别" class="headerlink" title="(三)、方法的参数差别"></a>(三)、方法的参数差别</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> Morant = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Morant&quot;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">21</span>,<br><span class="hljs-attr">sayHello</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">fm,t</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;My name is &quot;</span>+<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;,&quot;</span>+<span class="hljs-string">&quot;I&#x27;m from &quot;</span>+fm+<span class="hljs-string">&quot; to &quot;</span>+t);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> Boom = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Boom&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">20</span><br>&#125;<br>        <br>Morant.sayHello(<span class="hljs-string">&quot;河南&quot;</span>,<span class="hljs-string">&quot;北京&quot;</span>); <span class="hljs-comment">//My name is Morant,I&#x27;m from 河南 to 北京</span><br><br>Morant.sayHello.call(Boom,<span class="hljs-string">&quot;西班牙&quot;</span>,<span class="hljs-string">&quot;比利时&quot;</span>); <span class="hljs-comment">//My name is Boom,I&#x27;m from 西班牙 to 比利时</span><br>Morant.sayHello.apply(Boom,[<span class="hljs-string">&quot;西班牙&quot;</span>,<span class="hljs-string">&quot;比利时&quot;</span>]);<span class="hljs-comment">// My name is Boom,I&#x27;m from 西班牙 to 比利时(只接收两个参数)</span><br>Morant.sayHello.bind(Boom,<span class="hljs-string">&quot;西班牙&quot;</span>,<span class="hljs-string">&quot;比利时&quot;</span>)();<span class="hljs-comment">// My name is Boom,I&#x27;m from 西班牙 to 比利时</span><br></code></pre></td></tr></table></figure><p>call、 bind、 apply 这三个函数的第一个参数都是this的指向对象，第二个参数差别就来了：</p><p>call 的参数是直接放进去的，第二第三第n个参数全都用逗号分隔</p><p>apply的所有参数都必须放在一个数组里面传进去。</p><p>bind除了返回函数以外，它的参数和call 一样。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo网站图标及标题</title>
    <link href="/2022/01/16/HexoWebsiteIcon/"/>
    <url>/2022/01/16/HexoWebsiteIcon/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo设置博客网站图标及标题"><a href="#Hexo设置博客网站图标及标题" class="headerlink" title="Hexo设置博客网站图标及标题"></a>Hexo设置博客网站图标及标题</h1><p>在配置好博客的其他样式设置之后，发现使用Hexo主题的话默认的网站主题不是很好看，可以通过以下设置进行修改浏览器在选项卡中显示的图标。</p><p>原选项卡标签图标</p><p><img src="/2022/01/16/HexoWebsiteIcon/image-20220116155240416.png" alt="image-20220116155240416"></p><p>修改之后的图标及标题</p><p><img src="/2022/01/16/HexoWebsiteIcon/image-20220116162721976.png" alt="image-20220116162721976"></p><h2 id="一、图标选择"><a href="#一、图标选择" class="headerlink" title="一、图标选择"></a>一、图标选择</h2><p>可以去阿里巴巴矢量图标库的插图库里面选择一个下载下来</p><p>链接地址：<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p><h2 id="二、修改图标"><a href="#二、修改图标" class="headerlink" title="二、修改图标"></a>二、修改图标</h2><p>将图标保存到 source / img / websiteAvatar 文件夹下，打开主题设置yml文件，修改favicon为图标文件所存放的位置</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs js"># 用于浏览器标签的图标<br># Icon <span class="hljs-keyword">for</span> browser tab<br><span class="hljs-attr">favicon</span>: <span class="hljs-regexp">/img/</span>websiteAvatar/blackcat.png<br></code></pre></td></tr></table></figure><h2 id="三、修改博客标签页标题"><a href="#三、修改博客标签页标题" class="headerlink" title="三、修改博客标签页标题"></a>三、修改博客标签页标题</h2><p>修改.deploy_git / index.html 里面的 Title 标签内的文字 为自己的网站网页标题，最后更新上github即可</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客配置(解决图片显示问题)</title>
    <link href="/2022/01/11/Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/01/11/Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客配置"><a href="#Hexo博客配置" class="headerlink" title="Hexo博客配置"></a>Hexo博客配置</h1><h2 id="一、Hexo主题美化"><a href="#一、Hexo主题美化" class="headerlink" title="一、Hexo主题美化"></a>一、Hexo主题美化</h2><ol><li><p>进入Hexo中文官网：<code>https://hexo.io/zh-cn/</code>，官网底部有主题选择，本题以Fluid为例，进入Fluid的Github仓库(仓库下有安装教程)</p><p>预览网址：<code>https://hexo.fluid-dev.com/</code></p><p>demo：<code>https://jythomas.github.io/</code></p></li><li><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录(Blog)执行命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>然后在博客目录下手动创建 <code>_config.fluid.yml</code>文件，将这个网址：<code>https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml</code></p><p>中的代码内容复制到手动创建的 <code>_config.fluid.yml</code> 文件中</p></li><li><p>指定主题：</p><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>(注意不是自己手动创建的yml文件)：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure></li><li><p>进入Blog文件目录，进入cmd命令行执行下面的命令，最后访问本地调试的预览页面就可以看见新的主题引用到了原蓝landscape主题的hexo博客上 显示新的Fluid主题</p></li></ol><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo clean<br>hexo s <span class="hljs-meta">#这里好像默认使用的端口号是4000</span><br><br>要想指定端口号可以使用<br>hexo <span class="hljs-keyword">server</span> -p <span class="hljs-number">5000</span> 指定端口号(解决端口被占用的问题)<br></code></pre></td></tr></table></figure><p><img src="/2022/01/11/Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/image-20220111123634657.png" alt="image-20220111123634657"></p><h2 id="二、Hexo主题配置"><a href="#二、Hexo主题配置" class="headerlink" title="二、Hexo主题配置"></a>二、Hexo主题配置</h2><p>​        同样的这里以Fluid主题为例，主要的配置还是参照Fluid的官方文档：<code>https://hexo.fluid-dev.com/docs/start/</code> </p><div class="code-wrapper"><pre><code class="hljs">    配置指南：``https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97``  </code></pre></div><ol><li>在配置指南里面的tip的定义要看明白，这说明的是文档下面的配置操作的是什么文件</li></ol><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">TIP<br>致主题的新用户：<br>- 本指南经过数个版本打磨，绝大部分的功能都有详细说明，请仔细阅读，节约自己和他人的时间；<br>- 本指南中提到的：<span class="hljs-string">&quot;博客配置&quot;</span> 指的 Hexo 博客目录下的 `_config.yml`，<span class="hljs-string">&quot;主题配置&quot;</span> 指的是 `theme/fluid/_config.yml` 或者 `_config.fluid.yml` ，注意区分；<br>- 本指南中提到的 `source` 目录都指的是博客目录下的 `source` 文件夹，不推荐修改主题内 `source` 目录；<br>- 每次无论 `hexo g` 或 `hexo s`，都最好先使用 `hexo clean`；<br>- 页面结果以本地 `hexo s` 为准，部署后的异常大部分是缓存原因，在确认没有报错的情况下，等待若干时间后即可正常；<br>- 由于主题的不同版本会存在配置差异，本指南以最新版本为准。<br></code></pre></td></tr></table></figure><ol start="2"><li><p>页面顶部大图</p><p> 主题配置中(_config.fluid.yml文件中)，每个页面都有名为 <code>banner_img</code> 的属性，可以使用本地图片的相对路径，也可以为外站链接，比如指向本地图片：</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/example.jpg</span> <br><span class="hljs-comment"># 对应存放在 /source/img/bg/example.jpg，对应的文件夹自行创建，对应上就行</span><br><span class="hljs-comment"># 如果是本地图片，目录文件夹可自定义，但必须在 source 目录下，博客与主题的 source 目录最终会合并，因此优先选择博客的 source。</span><br><span class="hljs-comment"># 图片大小建议压缩到 1MB 以内，否则会严重拖慢页面加载</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>页面左上角的博客标题</p><p>默认使用<strong>博客配置</strong>中的 <code>title</code>，这个配置同时控制着网页在浏览器标签中的标题。</p><p>如需单独区别设置，可在<strong>主题配置</strong>中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">navbar:</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">博客标题</span><br></code></pre></td></tr></table></figure></li></ol><p><img src="/2022/01/11/Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/image-20220111124731378.png" alt="image-20220111124731378"></p><ol start="4"><li><p>Slogan打字机</p><p>首页大图中的标题文字，可在  **主题配置 ** (_config.fluid.yml文件中) 中设定是否开启： </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;睡觉能解决一半的烦恼.&quot;</span><br>    <span class="hljs-attr">api:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://v1.hitokoto.cn/&quot;</span><br>      <span class="hljs-attr">method:</span> <span class="hljs-string">&quot;GET&quot;</span><br>      <span class="hljs-attr">headers:</span> &#123;&#125;<br>      <span class="hljs-attr">keys:</span> [<span class="hljs-string">&quot;hitokoto&quot;</span>]<br></code></pre></td></tr></table></figure><p>如果 <code>text</code> 为空则按<strong>博客配置</strong>的 <code>subtitle</code> 显示。</p></li></ol><h2 id="三、Hexo发布文章及图片显示问题"><a href="#三、Hexo发布文章及图片显示问题" class="headerlink" title="三、Hexo发布文章及图片显示问题"></a>三、Hexo发布文章及图片显示问题</h2><h3 id="I、创建文章命令"><a href="#I、创建文章命令" class="headerlink" title="I、创建文章命令"></a>I、创建文章命令</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">Hexo <span class="hljs-keyword">new</span> <span class="hljs-type"></span>文章名<br></code></pre></td></tr></table></figure><p><img src="/2022/01/11/Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/image-20220111130750040.png" alt="image-20220111130750040"></p><p>事先说明：在刚开始摸怎么发布文章的时候，如果文章中有图片的话这会是有一个棘手的问题，因为我的文章是在Typora中写好的，然后Typora的图片保存设置如下</p><p><img src="/2022/01/11/Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/image-20220111125703629.png" alt="image-20220111125703629"></p><p>这个是保存在对应的Typora文件同名的文件夹下面。当时我将写好的文章拷贝到 hexo new 文件名 命令创建好的md文件中后，保存 运行命令进行本地预览的时候发现文章中的图片显示不出来。这就是为什么在发布文章之前要说这一段事先说明。以下是我的解决方法：</p><ol><li><p>以后写文章记笔记的话直接在hexo new 文章名 创建的md文件下写(有点捆绑销售的感觉，写好的文章一定就要准备发出来的状态，但是这是解决图片显示问题最简单粗暴的方法，虽然显得有点不太友好)，这个操作接下来要设置一下</p><p>(1)安装插件，在hexo根目录打开Git Bash,执行</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">npm install hexo-asset-<span class="hljs-built_in">image</span> --<span class="hljs-built_in">save</span><br></code></pre></td></tr></table></figure><p>(2)打开hexo的配置文件_config.yml , 找到 post_asset_folder，把这个选项从false改成true,这样的话之后使用命令创建的md文章会有一个同名文件夹，在创建好的md文件下直接写笔记，插入的图片会自动插入到这个伴随生成保存图片的文件夹，之后预览或者hexo d上传到仓库发布到互联网上都可以看见图片显示已正常</p></li><li><p>在本地的其他文件夹下写好文章，然后使用命令创建md文章，最后将写好的文章图片复制到伴随着命令生成md文件对应的文件夹下，复制方式如下</p></li></ol><p><img src="/2022/01/11/Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/image-20220111131235024.png" alt="image-20220111131235024"></p><p>鼠标放到图片的小图标上，右击鼠标，选择 复制图片到 将图片复制到对应的博客图片文件夹中，这时在将要发布的md文件中显示的是有 ../../ 的一个图片路径，将图片路径删除掉前面的一部分直到保存图片的文件夹，就像上图中的那样格式就可以看见图片在typora中显示出来了，这样操作后的图片在本地预览和发布的时候也能看见图片， <strong>最后返回本地写笔记的文档按住ctrl+z回滚 (因为在本地的文档里面你是保存在本地的随着md文件生成的一个md文件夹里面，经过上面的操作之后本地的图片路径会变成博客里面那个存图片的文件夹的路径，ctrl+z是为了不改变本地的文档保存图片路径，我也有点奇怪明明是复制操作咋把本地的图片文件路径给改了==&gt; 实际上是没有改的，图片的确是复制到了博客的图片文件夹下，但是本地的图片链到了博客的文件夹下，就很奇怪，要注意这一点)</strong> 。</p><ol start="3"><li>还有一种就是设置配置文件的方式，我试过了好像没啥作用，感兴趣的可以康康这篇的操作：<code>https://www.jianshu.com/p/f72aaad7b852</code></li></ol><h3 id="II、设置文章信息"><a href="#II、设置文章信息" class="headerlink" title="II、设置文章信息"></a>II、设置文章信息</h3><p>设置文章的信息可以直接在hexo new命令创建的md文件中配置Front-matter中设置(文件最顶部的那几行小字)</p><p>一般的配置信息如下：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: HTML笔记  #文章的标题<br>date: 2022<span class="hljs-string">-01</span><span class="hljs-string">-10</span> 19:08:58<br><span class="hljs-keyword">tags:</span> HTML  #文章标签<br>index_img: /index_img/HTML5.jpg  #在文章列表中显示的文章图片<br>banner_img: /text_headerImg/TextHeader_img.jpg  #文章详情中显示的顶部图片<br>excerpt: 这是文章简述。 #文章简述，显示在文章列表中<br></code></pre></td></tr></table></figure><p>注意图片的路径，和 Banner(博客的首页) 配置相同，<code>/img/example.jpg</code> 对应的是存放在 <code>/source/img/example.jpg</code> 目录下的图片（目录也可自定义，但必须在 source 目录下）。</p><p>III、创建关于页</p><p>(1) 首次使用主题的「关于页」需要手动创建(在Blog文件下进入cmd)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里可以写正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span> <span class="hljs-string">啥也不写的话就啥也不显式</span><br></code></pre></td></tr></table></figure><p>WARNING： <code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p><p>(2) 关于信息</p><p>在关于页介绍自己的基础信息，可以在<strong>主题配置</strong>中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/avatar.png</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Fluid&quot;</span><br>  <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;An elegant theme for Hexo&quot;</span><br></code></pre></td></tr></table></figure><p>​        到这 一个属于自己的个人博客就差不多做好了 包括了日常的写文章遇到的问题，还想接着美化的话可以自己学学Fluid的官方文章，注意操作哪个文件就行，不难；有帮助到你的话希望可以分享给身边跟多的朋友，有哪里说的不够好的话可以发送邮件到 <a href="mailto:&#49;&#55;&#52;&#x31;&#54;&#x38;&#x36;&#54;&#48;&#57;&#x40;&#113;&#x71;&#46;&#99;&#111;&#109;">&#49;&#55;&#52;&#x31;&#54;&#x38;&#x36;&#54;&#48;&#57;&#x40;&#113;&#x71;&#46;&#99;&#111;&#109;</a> 提出指导意见</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建Hexo博客</title>
    <link href="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo搭配Github搭建个人博客"><a href="#Hexo搭配Github搭建个人博客" class="headerlink" title="Hexo搭配Github搭建个人博客"></a>Hexo搭配Github搭建个人博客</h1><h2 id="一、设置搭建所需的环境"><a href="#一、设置搭建所需的环境" class="headerlink" title="一、设置搭建所需的环境"></a>一、设置搭建所需的环境</h2><ol><li><p>安装Node.js</p><p>参考链接：<a href="https://blog.csdn.net/qq_40712862/article/details/120231621">https://blog.csdn.net/qq_40712862/article/details/120231621</a></p></li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span> <br>npm -v<br>检查是否安装成功node.js和npm<br></code></pre></td></tr></table></figure><ol start="2"><li>安装git</li></ol><p>​    参考链接：<a href="https://blog.csdn.net/eno_yang/article/details/114782695">https://blog.csdn.net/eno_yang/article/details/114782695</a></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git --<span class="hljs-keyword">version</span> <span class="hljs-comment">#检查版本号 判断是否安装成功</span><br></code></pre></td></tr></table></figure><ol start="3"><li>下载Hexo：win+r键打开命令行输入cmd，下载hexo。下载完之后出现版本号表明安装成功</li></ol><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g <span class="hljs-meta">#安装hexo脚手架 注意全局安装 -g 不要漏了</span><br>hexo -v <span class="hljs-meta">#检查版本号 确认是否安装成功</span><br></code></pre></td></tr></table></figure><h2 id="二、搭建仓库"><a href="#二、搭建仓库" class="headerlink" title="二、搭建仓库"></a>二、搭建仓库</h2><ol><li>注册github账号</li><li>记住注册名、注册邮箱、注册密码(后面的命令需要用到)</li><li>进入个人主页之后找到your profile，找到Repositories，然后点击绿色的new创建仓库</li></ol><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220110232255985.png" alt="image-20220110232255985"></p><ol start="4"><li>设置仓库名：github账号名.github.io,然后勾选下面的 Add a ReadMe file，最后点击 Create repository创建仓库（我的仓库已经创建好了 所以提示该仓库已经创建好了而已）</li></ol><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220110232558971.png" alt="image-20220110232558971"></p><h2 id="三、生成SSH-Keys"><a href="#三、生成SSH-Keys" class="headerlink" title="三、生成SSH Keys"></a>三、生成SSH Keys</h2><ol><li><p>这是为了将Github与本地进行绑定 为的是以后在本地运行配置hexo博客发布好文章或者配置好博客之后更新到github仓库上，然后使用github的方式访问博客</p></li><li><p>进入任何一个文件夹，在空白处右键点击Git Bash Here进入Git，然后输入ssh检查是否已经安装有ssh(ssh在安装git的时候一般会默认安装好) 这里的Git命令行不要关 后面还有用。</p></li><li><p>输入  ssh-keygen -t rsa -C “注册邮箱”  （此处的””中是注册github账号时使用的邮箱 ） 然后按四次回车</p></li><li><p>打开c盘，Users，你自己电脑的用户名文件夹(Administrator之类的)，找到 .ssh 文件夹 打开会见到一个 .pub 文件 使用记事本打开它，复制里面的全部内容</p></li><li><p>打开github，点击右上角的个人圆形头像找到settings &gt; 找到 SSH and GPG Keys</p></li></ol><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220110234035703.png" alt="image-20220110234035703"></p><ol start="6"><li>创建SSH keys，然后将复制的公钥(pub文件里面的那一大堆)粘贴到Key中(不要做任何改动) 最后点击SSH Key。</li></ol><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220110234140849.png" alt="image-20220110234140849"></p><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220110234312762.png" alt="image-20220110234312762"></p><ol start="7"><li>将刚刚的git命令行打开，输入： ssh -T <a href="mailto:&#103;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#109;">&#103;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#109;</a>  。最后出现下图提示的内容就说明绑定号了秘钥</li></ol><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220110234740207.png" alt="image-20220110234740207"></p><h2 id="四、本地生成博客内容"><a href="#四、本地生成博客内容" class="headerlink" title="四、本地生成博客内容"></a>四、本地生成博客内容</h2><ol><li>在本地盘中创建一个Blog文件夹，进入Blog文件夹 右键点击Git Bash Here进入git</li><li>输入 hexo init 初始化 hexo (有时候会出现FATAL错误，这是因为github是国外的网站 网络连接的问题 再试几次就行)。初始化成功的标志是出现 start blogging with hexo</li></ol><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220110235408416.png" alt="image-20220110235408416"></p><ol start="3"><li>打开Blog文件夹会看见生成的博客配置文件，在git界面输入 hexo s (hexo server的简写)，命令行中出现的ip就可以用浏览器访问看见有一个本地的网页可以生成了</li><li><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220110235800510.png" alt="image-20220110235800510"></li></ol><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220110235731738.png" alt="image-20220110235731738"></p><h2 id="五、发布博客"><a href="#五、发布博客" class="headerlink" title="五、发布博客"></a>五、发布博客</h2><ol><li>进入Blog文件夹看到 _config.yml 文件，打开拉到最下面把deploy和其下面的全都删掉修改配置文件；repository的内容是仓库的地址，配置好之后保存yml文件。</li></ol><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">deploy:</span>  <br><span class="hljs-symbol">type:</span> git<br><span class="hljs-symbol">repository:</span> https://github.com/JYThomas/JYThomas.github.io.git  <span class="hljs-meta">#仓库地址 </span><br><span class="hljs-symbol">branch:</span> main<br><span class="hljs-meta">###注意这里是英文的冒号 冒号后面要打一个空格再输入内容(这点很重要 后面配置博客文章的时候也要用到这个细节)</span><br></code></pre></td></tr></table></figure><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220111002236645.png" alt="image-20220111002236645"></p><ol start="2"><li>在Blog文件夹下右键点击Git Bash Here打开git，安装hexo自动部署发布工具：hexo-deployer-git，输入</li></ol><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br><br>hexo g <span class="hljs-comment">#生成页面</span><br><br>hexo d <br><span class="hljs-comment">#将本地的文件上传到github仓库上，出现FATAL报错的话可能是网络问题 多试几次</span><br></code></pre></td></tr></table></figure><p>之后会出现要求输入github账号和密码，账号可以输入github用户名或者是注册邮箱(是一个白色的弹窗，上面是用户名，下面是密码，或者是一个弹窗 先要求输入用户名，然后再要求输入秘钥)。</p><p>密码一栏注意不是输入github账号的密码，而是将密码换成令牌token，进入github，点击右上角账号头像找到settings之后找到 Developer settings</p><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220111003303479.png" alt="image-20220111003303479"></p><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220111003408839.png" alt="image-20220111003408839"></p><p>点击Generate new token，然后打钩的全选上，最后点击 Generate token，最后出现的序列号就是令牌，用来代替前面的密码(令牌的有效期是30天 只出现一次 第一次生成的时候 最好将它保留下来)</p><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220111003541965.png" alt="image-20220111003541965"></p><p>最后就会看见本地的文件夹全部上传到github仓库上了，可以通过仓库的网址来访问网站博客(默认样式)</p><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220111003713156.png" alt="image-20220111003713156"></p><p><img src="/2022/01/10/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20220111004118434.png" alt="image-20220111004118434"></p><h2 id="六、注意事项"><a href="#六、注意事项" class="headerlink" title="六、注意事项"></a>六、注意事项</h2><ol><li>如果执行hexo s命令发现端口被占用可以指定使用那个端口</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hexo</span> server -p <span class="hljs-number">5000</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在配置好本地博客内容以及配置文件之后 将其上传到github仓库前使用如下顺序(同步本地Hexo到Github)</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">hexo clean  <span class="hljs-regexp">//</span> clean本地项目，防止缓存<br>hexo g      <span class="hljs-regexp">//</span> 根据你编辑的md格式的博客，生成静态网页<br>hexo d      <span class="hljs-regexp">//</span> 将本地博客发布到github<br></code></pre></td></tr></table></figure><ol start="3"><li>在本地做修改 用如下命令进行预览，配置好文件之后再将其上传到github仓库</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">本地测试预览：<br>hexo clean<br>hexo s<br><br>上传本地文件到github<br>hexo clean  <span class="hljs-regexp">//</span> clean本地项目，防止缓存<br>hexo g      <span class="hljs-regexp">//</span> 根据你编辑的md格式的博客，生成静态网页<br>hexo d      <span class="hljs-regexp">//</span> 将本地博客发布到github <br><span class="hljs-regexp">//</span>最后这一步还是有可能会有网络连接的问题 (显示FATAL错误) 多试几次就能上传到github仓库<br></code></pre></td></tr></table></figure><ol start="4"><li>搭建参考视频：<a href="https://www.bilibili.com/video/BV1mU4y1j72n">https://www.bilibili.com/video/BV1mU4y1j72n</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Css笔记</title>
    <link href="/2022/01/10/Css%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/01/10/Css%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS知识点复习"><a href="#CSS知识点复习" class="headerlink" title="CSS知识点复习"></a>CSS知识点复习</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>**<code>CSS</code>**（层叠样式表）：用于控制网页的表现。</p><p>优点：</p><ol><li>实现表现和内容相分离（方便维护、错误修改、界面调整更加容易）。</li><li>便于页面风格的统一和修改（样式重用、高效率开发）。</li><li>简化网页，提高页面浏览速度（减少文件量，降低服务器带宽成本，加快网页解析速度，有利于SEO）。</li></ol><hr><hr><hr><h2 id="二、在html中使用CSS的四种方法"><a href="#二、在html中使用CSS的四种方法" class="headerlink" title="二、在html中使用CSS的四种方法"></a>二、在html中使用CSS的四种方法</h2><h3 id="1-行内样式：混合在HTML标记里使用，对每个元素单独定义样式。"><a href="#1-行内样式：混合在HTML标记里使用，对每个元素单独定义样式。" class="headerlink" title="1. 行内样式：混合在HTML标记里使用，对每个元素单独定义样式。"></a>1. <strong>行内样式</strong>：混合在HTML标记里使用，对每个元素单独定义样式。</h3><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:blue&quot;</span>&gt;</span>文字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>虽然这种方法比较直接，在制作页面的时候需要为很多的标签设置 **<code>style </code>**属性，所以会导致HTML页面不够纯净，文件体积过大，不利于搜索蜘蛛爬行，而且会导致后期维护成本高。</p><hr><h3 id="2-页面内部样式：在HTML的头部标签-lt-head-gt-与-lt-head-gt-之间添加样式。"><a href="#2-页面内部样式：在HTML的头部标签-lt-head-gt-与-lt-head-gt-之间添加样式。" class="headerlink" title="2. 页面内部样式：在HTML的头部标签 **&lt;head&gt;与&lt;/head&gt; **之间添加样式。"></a>2. <strong>页面内部样式</strong>：在HTML的头部标签 **<code>&lt;head&gt;与&lt;/head&gt; </code>**之间添加样式。</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">color</span>:blue;&#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果一个网站页面很多，每一个文件都会变大，重用性差，后期维护难度不小，如果文件很少，CSS代码也不多，这种方式还是很不错的。</p><hr><h3 id="3-链入外部样式：把样式表保存为一个样式表文件，然后在页面中使用-标签链接到这个CSS文件。"><a href="#3-链入外部样式：把样式表保存为一个样式表文件，然后在页面中使用-标签链接到这个CSS文件。" class="headerlink" title="3. 链入外部样式：把样式表保存为一个样式表文件，然后在页面中使用  标签链接到这个CSS文件。"></a>3. <strong>链入外部样式</strong>：把样式表保存为一个样式表文件，然后在页面中使用 <link> 标签链接到这个CSS文件。</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>= <span class="hljs-string">&quot;CSS文件URL&quot;</span> <span class="hljs-attr">type</span>= <span class="hljs-string">&quot;text/css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这种方式将HTML文件和CSS文件彻底分成两个或者多个文件，实现了页面框架HTML代码与表现CSS代码的完全分离，使得前期制作和后期维护都十分方便，并且如果要保持页面风格统一，只需要把这些公共的CSS文件单独保存成一个文件，其他的页面就可以分别调用自身的CSS文件，如果需要改变网站风格，叧需要修改公共CSS文件就可以了，非常的方便，这才是html+CSS制作页面提倡的方式。</p><hr><h3 id="4-导入外部样式：导入样式和链接样式比较相似，采用-import方式导入CSS样式表（可以将css分成小模块），但兼容性以及用户体验的问题，建议使用链接样式-。"><a href="#4-导入外部样式：导入样式和链接样式比较相似，采用-import方式导入CSS样式表（可以将css分成小模块），但兼容性以及用户体验的问题，建议使用链接样式-。" class="headerlink" title="4. 导入外部样式：导入样式和链接样式比较相似，采用**import方式导入CSS样式表（可以将css分成小模块），但兼容性以及用户体验的问题，建议使用链接样式**。"></a>4. <strong>导入外部样式</strong>：导入样式和链接样式比较相似，采用**<code>import</code><strong>方式导入CSS样式表（可以将css分成小模块），但兼容性以及用户体验的问题，建议使用</strong>链接样式**。</h3><p>四种样式的优先级按照“就近原则”：<strong>行内样式&gt;页面内部样式&gt;链接样式&gt;导入样式</strong>。</p><hr><hr><hr><h2 id="三、CSS的基本语法"><a href="#三、CSS的基本语法" class="headerlink" title="三、CSS的基本语法"></a>三、CSS的基本语法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">选择符&#123;属性<span class="hljs-number">1</span>:值<span class="hljs-number">1</span>;属性<span class="hljs-number">2</span>:值<span class="hljs-number">2</span>;……&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227104648705-1433258351-16418180272911.png" alt="img"></p><p><strong>CSS选择器：</strong></p><h3 id="1-HTML标签选择器（HTML标记）："><a href="#1-HTML标签选择器（HTML标记）：" class="headerlink" title="1. HTML标签选择器（HTML标记）："></a><strong>1. HTML标签选择器（HTML标记）：</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">h1 &#123;font-size:32px;&#125;<br></code></pre></td></tr></table></figure><p>HTML选择器很方便，但是一下就把整个页面的所有相应的标记都改变了样式，但是不好细节控制，显得不够灵活。</p><h3 id="2-类选择器：允许同一元素有不同样式-通过选择类实现"><a href="#2-类选择器：允许同一元素有不同样式-通过选择类实现" class="headerlink" title="2. 类选择器：允许同一元素有不同样式(通过选择类实现)"></a>2. 类选择器：允许同一元素有不同样式(通过选择类实现)</h3><p>定义：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">.redone&#123;color:red;&#125;<br></code></pre></td></tr></table></figure><p>应用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;redone&quot;</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;redone&quot;</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-id选择器：id选择器可以在html标记中定位元素，但是相同的id号只能使用一次，不能重复，这与-class-不同。"><a href="#3-id选择器：id选择器可以在html标记中定位元素，但是相同的id号只能使用一次，不能重复，这与-class-不同。" class="headerlink" title="3. id选择器：id选择器可以在html标记中定位元素，但是相同的id号只能使用一次，不能重复，这与 **class **不同。"></a>3. id选择器：id选择器可以在html标记中定位元素，但是相同的id号只能使用一次，不能重复，这与 **<code>class </code>**不同。</h3><p>定义：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">#header&#123;width:960px;border:1px solid #666;&#125;<br></code></pre></td></tr></table></figure><p> 应用：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;我的网站&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="4-通用选择器：-表示所有的html标签。"><a href="#4-通用选择器：-表示所有的html标签。" class="headerlink" title="4. 通用选择器：**\* **表示所有的html标签。"></a>4. 通用选择器：**<code>\* </code>**表示所有的html标签。</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">*&#123;<span class="hljs-attribute">margin</span>:<span class="hljs-number">0px</span>;<span class="hljs-attribute">padding</span>:<span class="hljs-number">0px</span>;&#125;<br></code></pre></td></tr></table></figure><h3 id="5、分组选择器："><a href="#5、分组选择器：" class="headerlink" title="5、分组选择器："></a>5、分组选择器：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">h1,h2,h3,h4,h5,h6&#123;color:#900;&#125;<br></code></pre></td></tr></table></figure><h3 id="6-后代选择器：通过依据元素在其位置的上下文关系来定义样式，可以使标记更加简洁。"><a href="#6-后代选择器：通过依据元素在其位置的上下文关系来定义样式，可以使标记更加简洁。" class="headerlink" title="6. 后代选择器：通过依据元素在其位置的上下文关系来定义样式，可以使标记更加简洁。"></a>6. 后代选择器：通过依据元素在其位置的上下文关系来定义样式，可以使标记更加简洁。</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#div1</span> <span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">a</span>&#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#900</span>;&#125; <span class="hljs-comment">/*意思是在ID为div1内的p标签内的链接a标签的文字颜色为红色*/</span><br></code></pre></td></tr></table></figure><h3 id="7-子选择器：选择父元素的直接子元素。"><a href="#7-子选择器：选择父元素的直接子元素。" class="headerlink" title="7. 子选择器：选择父元素的直接子元素。"></a>7. 子选择器：选择父元素的直接子元素。</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">a</span>&#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#f00</span>;&#125; <span class="hljs-comment">/*将div元素下的a子元素设置为红色的*/</span><br></code></pre></td></tr></table></figure><h3 id="8-属性选择器：选择属性匹配的元素。"><a href="#8-属性选择器：选择属性匹配的元素。" class="headerlink" title="8. 属性选择器：选择属性匹配的元素。"></a>8. 属性选择器：选择属性匹配的元素。</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[title]</span> <span class="hljs-comment">//选择带有title属性的a标记</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[title=详细信息]</span> <span class="hljs-comment">//选择title属性的值为详细信息的a标记</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[href^=http]</span> <span class="hljs-comment">//选择herf属性以http开头的a标记</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[href$=.pdf]</span> <span class="hljs-comment">//选择herf属性以pdf结尾的a标记</span><br></code></pre></td></tr></table></figure><hr><hr><hr><h2 id="四、多重样式CSS权重计算"><a href="#四、多重样式CSS权重计算" class="headerlink" title="四、多重样式CSS权重计算"></a>四、多重样式CSS权重计算</h2><p>Css<strong>权重</strong>决定了哪一条规则会被浏览器应用在元素上</p><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227155040455-1344923007.png" alt="img"></p><p>\1.  内联样式表的权值最高 1000。</p><p>\2.  ID 选择器的权值为 100。</p><p>\3.  Class 类选择器的权值为 10。</p><p>\4.  HTML 标签选择器的权值为1。</p><p>对于多重样式CSS权重，由上述规则计算而得，权重越大越优先，但是要注意标有 “<strong>!important”</strong> 规则的优先级最大。</p><p>默认样式&lt;标签选择器&lt;类选择器&lt;id选择器&lt;行内样式&lt;!important</p><p>   0       1       10     100     1000    1000以上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">color</span>:red;&#125; <span class="hljs-comment">/*标签，权值为1*/</span><br><span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">span</span>&#123;<span class="hljs-attribute">color</span>:green;&#125; <span class="hljs-comment">/*两个标签，权值为1+1=2*/</span><br><span class="hljs-selector-tag">p</span>&gt;<span class="hljs-selector-tag">span</span>&#123;<span class="hljs-attribute">color</span>:purple;&#125;<span class="hljs-comment">/*权值与上面的相同，因此采取就近原则*/</span><br><span class="hljs-selector-class">.warning</span>&#123;<span class="hljs-attribute">color</span>:white;&#125; <span class="hljs-comment">/*类选择符，权值为10*/</span><br><span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-class">.warning</span>&#123;<span class="hljs-attribute">color</span>:purple;&#125; <span class="hljs-comment">/*权值为1+1+10=12*/</span><br><span class="hljs-selector-id">#footer</span> <span class="hljs-selector-class">.note</span> <span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">color</span>:yellow;&#125; <span class="hljs-comment">/*权值为100+10+1=111*/</span><br><span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">color</span>:red<span class="hljs-meta">!important</span>; &#125;      <span class="hljs-comment">/*!important要写在分号前,优先级最高*/</span><br></code></pre></td></tr></table></figure><p>css权重指的是css6大基础选择符的优先级，优先级高的css样式会覆盖优先级底的css样式，优先级越高说明权重越高，反之亦然。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">a</span>）、<span class="hljs-selector-tag">id</span>选择器(#box&#123;&#125;)<br><span class="hljs-selector-tag">b</span>）、类选择器(.box&#123;&#125;)<br><span class="hljs-selector-tag">c</span>）、属性选择器(a[href=<span class="hljs-string">&quot;http://www.xxx.com&quot;</span>])<br><span class="hljs-selector-tag">d</span>）、伪类和伪对象选择器(:hoevr&#123;&#125;和::after&#123;&#125;)<br><span class="hljs-selector-tag">e</span>）、标签类型选择器(p&#123;&#125;)<br><span class="hljs-selector-tag">f</span>）、通配符选择器(*&#123;&#125;)<br></code></pre></td></tr></table></figure><hr><hr><hr><h2 id="五、常用伪类"><a href="#五、常用伪类" class="headerlink" title="五、常用伪类"></a>五、常用伪类</h2><p><strong><code>:focus</code></strong> 将样式添加到被选中的元素。</p><p><strong><code>:hover</code></strong> 当鼠标悬浮在元素上方时，向元素添加样式。</p><hr><hr><hr><h2 id="六、CSS属性"><a href="#六、CSS属性" class="headerlink" title="六、CSS属性"></a>六、CSS属性</h2><h3 id="1-字体属性"><a href="#1-字体属性" class="headerlink" title="1. 字体属性:"></a><strong>1. 字体属性</strong>:</h3><table><thead><tr><th>属性</th><th>属性含义</th><th>属性值</th></tr></thead><tbody><tr><td>font-family</td><td>使用什么字体</td><td>所有字体</td></tr><tr><td>font-style</td><td>字体是否斜体</td><td>normal,italic,oblique</td></tr><tr><td>font-weight</td><td>字体的粗细</td><td>normal,bold</td></tr><tr><td>font-size</td><td>字体的大小</td><td>绝对大小</td></tr></tbody></table><h3 id><a href="#" class="headerlink" title></a></h3><p>说明：</p><p>1）不建议在 **<code>font-family </code>**中设置超过宋体/黑体之外的字体，会导致未装字体的计算机显示不正常，也可以采用一</p><p>个字体系列，当某种字体不存在时，用后面的字体，由于中文文字的复杂性，点阵装的字体并不是全都适合于浏览器</p><p>观看，因此推荐使用标准的宋体或微软雅黑用于中文文字的显示，如果需要其他装饰性字体，应当多使用图片方式来</p><p>替代纯文本的显示。</p><p>2）字体大小的单位，绝对单位：in，cm，mm，pt；相对单位：em，ex，px，%；浏览器默认文字大小为<strong>16px</strong>。</p><hr><h3 id="2-文本属性"><a href="#2-文本属性" class="headerlink" title="2. 文本属性:"></a><strong>2. 文本属性:</strong></h3><table><thead><tr><th>属性</th><th>属性含义</th><th>属性值</th></tr></thead><tbody><tr><td>color</td><td>设置文本颜色</td><td>#xxx rgb() rgba()</td></tr><tr><td>text-indent</td><td>设置文本首行缩进</td><td>缩进值</td></tr><tr><td>text-align</td><td>文本对齐</td><td>left,right,center,justify</td></tr><tr><td>word-spacing</td><td>单词间距</td><td>间距值</td></tr><tr><td>letter-spacing</td><td>字母间距</td><td>间距值</td></tr><tr><td>text-decoration</td><td>文本修饰</td><td>none,underline,overline,line-through,blink</td></tr><tr><td>line-height</td><td>设置行高</td><td></td></tr><tr><td>vertical-align</td><td>垂直对齐</td><td>baseline,top,bottom,middle等</td></tr></tbody></table><hr><h3 id="3-背景属性"><a href="#3-背景属性" class="headerlink" title="3. 背景属性:"></a><strong>3. 背景属性:</strong></h3><table><thead><tr><th>属性</th><th>属性含义</th><th>属性值</th></tr></thead><tbody><tr><td>background-color</td><td>定义背景图</td><td>颜色</td></tr><tr><td>background-image</td><td>定义背景图案</td><td>图片路径 例：body{background-image:url(.jpg)}</td></tr><tr><td>background-repeat</td><td>背景图案重复方式</td><td>Repeat-x, Repeat-y, no-repeat</td></tr><tr><td>background-attachment</td><td>背景图案的初始位置</td><td>Scroll, Fixed（背景固定）</td></tr><tr><td>background-position</td><td>背景图案的初始位置</td><td>百分数，长度值，top, left, right, bottom, center等</td></tr><tr><td>background</td><td>合集</td><td>color image repeat attachment position</td></tr></tbody></table><hr><h3 id="4-列表属性"><a href="#4-列表属性" class="headerlink" title="4. 列表属性:"></a><strong>4. 列表属性:</strong></h3><table><thead><tr><th>属性</th><th>属性含义</th><th>属性值</th></tr></thead><tbody><tr><td>list-style-image</td><td>将图像设置为列表标志</td><td>ul li {list-style-image: url(xxx.gif)}</td></tr><tr><td>list-style-position</td><td>设置列表中列表项标志的位置</td><td>inside, outside</td></tr><tr><td>list-style-type</td><td>设置列表项标志的类型</td><td>disc, circle, square, decimal等</td></tr><tr><td>list-style</td><td>简写属性。(用于所有列表的属性设置于一个声明中)</td><td>合集 type position image</td></tr></tbody></table><hr><h3 id="5-表格属性"><a href="#5-表格属性" class="headerlink" title="*5. 表格属性*:"></a><strong><em>*5. 表格属性*</em>:</strong></h3><table><thead><tr><th>属性</th><th>属性含义</th><th>属性值</th></tr></thead><tbody><tr><td>border-collapse</td><td>设置是否把表格边框合并为单一的边框</td><td>separate, collapse</td></tr></tbody></table><hr><h3 id="6-尺寸属性"><a href="#6-尺寸属性" class="headerlink" title="*6. 尺寸属性:*"></a><em><strong>*6. 尺寸属性:*</strong></em></h3><table><thead><tr><th>属性</th><th>属性含义</th><th>属性值</th></tr></thead><tbody><tr><td>width</td><td>宽度</td><td>width: 960px;</td></tr><tr><td>min-width</td><td>最小宽度</td><td></td></tr><tr><td>max-width</td><td>最大宽度</td><td></td></tr><tr><td>height</td><td>高度</td><td>height:100px;</td></tr><tr><td>min-height</td><td>最小高度</td><td></td></tr><tr><td>max-height</td><td>最大高度</td><td></td></tr></tbody></table><p>需要明确元素盒子默认的宽度与高度。</p><p><strong>块级元素</strong>，默认宽度100%，高度由内容决定。</p><p><strong>行内元素</strong>，默认宽度与高度由内容决定。</p><hr><h3 id="7-边框属性"><a href="#7-边框属性" class="headerlink" title="7. 边框属性:"></a><strong>7. 边框属性:</strong></h3><h4 id="1）每个元素外面都可以有一个边框。"><a href="#1）每个元素外面都可以有一个边框。" class="headerlink" title="1）每个元素外面都可以有一个边框。"></a>1）每个元素外面都可以有一个边框。</h4><h4 id="2）边框可分为上，下，左，右，四个边框。"><a href="#2）边框可分为上，下，左，右，四个边框。" class="headerlink" title="2）边框可分为上，下，左，右，四个边框。"></a>2）边框可分为上，下，左，右，四个边框。</h4><h4 id="3）每个边框可以有颜色（-color），样式（style）、宽度（width-）三种属性。"><a href="#3）每个边框可以有颜色（-color），样式（style）、宽度（width-）三种属性。" class="headerlink" title="3）每个边框可以有颜色（**color），样式（style）、宽度（width**）三种属性。"></a>3）每个边框可以有颜色（**<code>color</code><strong>），样式（</strong><code>style</code><strong>）、宽度（</strong><code>width</code>**）三种属性。</h4><table><thead><tr><th>属性</th><th>属性描述</th><th>属性值</th></tr></thead><tbody><tr><td>border-style</td><td>边框样式</td><td>solid | none | dotted | dashed | double等</td></tr><tr><td>border-width</td><td>边框宽度</td><td>border-width: 2px;</td></tr><tr><td>border-color</td><td>边框颜色</td><td>颜色值</td></tr></tbody></table><hr><hr><hr><h2 id="七、盒模型"><a href="#七、盒模型" class="headerlink" title="七、盒模型"></a>七、盒模型</h2><h3 id="1-盒模型是-xhtml-css-布局页面中的核心。"><a href="#1-盒模型是-xhtml-css-布局页面中的核心。" class="headerlink" title="1. 盒模型是 **xhtml+css **布局页面中的核心。"></a>1. 盒模型是 **<code>xhtml+css </code>**布局页面中的核心。</h3><p>每个HTML元素都可以看作一个装了东西的盒子，盒子具有宽度（**<code>width</code><strong>）和高度（</strong><code>height</code>**），盒子里面的内容到盒</p><p>子的边框之间的距离即填充（**<code>padding</code><strong>），盒子本身有边框（</strong><code>border</code>**），而盒子边框外和其他盒子之间，还有边界</p><p>（**<code>margin</code>**）。</p><hr><h3 id="2-盒模型的四要素：content（内容）、padding（内边距）、border（边框）、margin（外边距）。"><a href="#2-盒模型的四要素：content（内容）、padding（内边距）、border（边框）、margin（外边距）。" class="headerlink" title="2. 盒模型的四要素：content（内容）、padding（内边距）、border（边框）、margin（外边距）。"></a>2. 盒模型的四要素：<strong>content（内容）、padding（内边距）、border（边框）、margin（外边距）</strong>。</h3><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227203543990-1747529267.png" alt="img"></p><p>**<code>margin</code>**：是盒子外面与其他元素的距离，用1到4个值来设置元素的外边距，每一个值都是长度、百分比或 **<code>auto</code>**，</p><p>允许使用负值。还可以使用**<code>margin-top</code><strong>、</strong><code>margin-right</code><strong>、</strong><code>margin-bottom</code><strong>、</strong><code>margin-left</code>**，外边距顺序依次是</p><p>上、右、下、左。</p><p>**<code>padding</code>**：内边距，指文本边框与文本之间的距离，使用方法和 **<code>margin </code>**相同。</p><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227203716740-46683690.gif" alt="img"></p><p>在 CSS 中，**<code>width</code>** 和 **<code>height </code>**指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，</p><p>但是会增加元素框的尺寸。</p><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227203815419-659688704.gif" alt="img"></p><p>如果有如下的CSS定义：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">#box&#123;<br>    width:70px;<br>    margin:10px;<br>    padding:5px;<br>   &#125;<br></code></pre></td></tr></table></figure><p> 则整个盒子占用的空间计算如下：</p><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227203940524-1496078203.jpg" alt="img"></p><hr><h3 id="3-IE6兼容性问题："><a href="#3-IE6兼容性问题：" class="headerlink" title="3. IE6兼容性问题："></a>3. IE6兼容性问题：</h3><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227204025987-170562459.jpg" alt="img"></p><hr><hr><hr><h2 id="八、块级元素与行内元素"><a href="#八、块级元素与行内元素" class="headerlink" title="八、块级元素与行内元素"></a>八、块级元素与行内元素</h2><p><strong>1. 块级元素（<code>block</code>）</strong>：一般是其他元素的容器，可容纳内联元素和其他块级元素，块级元素独占一行，宽度(<strong><code>width</code></strong>)默认为100%，高度(<strong><code>height</code></strong>)由内容决定(自行设置高度控制)。常见块级元素为**<code>div</code>和 <code>p</code>，<code>h</code>，**<code>**ul**。</code></p><hr><p><strong>2. 内联元素（<code>inline</code>）</strong>：内联元素只能容纳文本或者其他行内元素，它允许其他行内元素与其位于同一行，但宽度(<strong><code>width</code></strong>)和高度(<strong><code>height</code></strong>)不起作用，元素的宽度就是它包含的文字或图片的宽度，不可改变。常见的行内元素为**<code>a</code>**和 **<code>span</code>**。</p><p>块级元素和行内元素可通过 **<code>display </code>**属性进行强制转换：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">display : <span class="hljs-keyword">block</span> || <span class="hljs-keyword">inline</span> || none || <span class="hljs-keyword">inline</span>-<span class="hljs-keyword">block</span><br></code></pre></td></tr></table></figure><hr><p><strong>3. 内联块状元素（<code>inline-block</code>）</strong>就是同时具备内联元素、块状元素的特点，代码 **<code>display:inline-block</code><strong>就是将元素设置为内联块状元素。，</strong><code>&lt;img&gt;</code><strong>、</strong><code>&lt;input&gt; </code><strong>标签就是这种内联块状标签。</strong><code>inline-block</code>**元素特点：1、和其他元素都在一行上(内联特点)；2、元素的高度、宽度、行高以及顶和底边距都可设置(块状特点)。</p><hr><hr><hr><h2 id="九、CSS定位"><a href="#九、CSS定位" class="headerlink" title="九、CSS定位"></a>九、CSS定位</h2><p>CSS 有三种基本的定位机制：普通流、浮动和绝对定位（固定）。</p><h3 id="1-普通流"><a href="#1-普通流" class="headerlink" title="1. 普通流"></a><strong>1. 普通流</strong></h3><p>除非专门指定，否则所有框都在<strong>普通流</strong>中定位。也就是说，普通流中的元素的位置由元素在 X(HTML) 中的位置决定。</p><p>块级框从上到下一个接一个地排列，框之间的垂直距离是由框的垂直外边距计算出来。</p><hr><h3 id="2-浮动"><a href="#2-浮动" class="headerlink" title="2. 浮动"></a><strong>2. 浮动</strong></h3><p><strong>浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。</strong></p><p><strong>由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。</strong></p><p>浮动的元素<strong>脱离文档流</strong>，之前占用<strong>空间会释放</strong>。</p><p><strong>浮动定位</strong>：可以设置元素的**<code>float </code>**属性为 <code>left </code>或 **<code>right </code>**，才设置元素浮动，使得块级元素可以 并排显示。</p><p>但一定注意，设置浮动的同时一定要先设置块状元素的宽度(先设置大的框)，且需要浮动的几个元素宽度加起来一定要<strong>小于</strong>容器元素的宽度。</p><p>请看下图，当把框 1 向右浮动时，它脱离文档流并且向右移动，直到它的右边缘碰到包含框的右边缘：</p><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227205538346-295491566.png" alt="img"></p><p>再看下图，当框 1 向左浮动时，它脱离文档流并且向左移动，直到它的左边缘碰到包含框的左边缘。因为它不再处于文档流中，所以它不占据空间，实际上覆盖住了框 2，使框 2 从视图中消失。**(脱离文档流:不受普通流从上到下的管控)**</p><p>如果把所有三个框都向左移动，那么框 1 向左浮动直到碰到包含框，另外两个框向左浮动直到碰到前一个浮动框。</p><p> <img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227205634961-540188892.png" alt="img"></p><p>如下图所示，如果包含框太窄，无法容纳水平排列的三个浮动元素，那么其它浮动块向下移动，直到有足够的空间。如果浮动元素的高度不同，那么当它们向下移动时可能被其它浮动元素“卡住”：</p><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/1618284-20191227205700722-2036155830.png" alt="img"></p><hr><h3 id="3-行框和清理"><a href="#3-行框和清理" class="headerlink" title="3. 行框和清理"></a><strong>3. 行框和清理</strong></h3><p><code>float</code>属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使<strong>文本围绕在图像周围</strong></p><p>浮动框旁边的行框被缩短，从而给浮动框留出空间，行框围绕浮动框。</p><p>因此，创建浮动框可以使文本围绕图像：<img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/image-20220106110627366.png" alt="image-20220106110627366"></p><p>要想阻止行框围绕浮动框(围绕浮动框会使浮动起来的部分盖住下面的文档流中元素内容？不是 是下面的块级元素的文字会贴着图片环绕显示 但是要想用文字不饶图片 例如块级元素p使用clear可以清除环绕)，需要对该框应用 <strong><code>clear</code></strong> 属性。clear 属性的值可以是 <strong><code>left</code><strong>、</strong><code>right</code><strong>、</strong><code>both</code></strong> 或 **<code>none</code>**，它表示框的哪些边不应该挨着浮动框。</p><p>为了实现这种效果，在被清理的元素的上外边距上添加足够的空间，使元素的顶边缘垂直下降到浮动框下面：</p><p><img src="/2022/01/10/Css%E7%AC%94%E8%AE%B0/image-20220106110606624.png" alt="image-20220106110606624"></p><p>浮动本来是用来实现图文混排的，可是在具体实践中，常常用来将纵向排列的块级元素变成水平排列，但是浮动有一个缺陷，就是浮动元素会脱离文档流，从而造成父元素的塌陷，为了使得父元素也能包裹浮动元素，需要做浮动的清理。</p><p>清理浮动的方法1：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sidebar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 额外标签法 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;clear:both&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 清理浮动的方法2：使父元素形成BFC</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 通过父元素overflow:hidden来形成BFC --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;overflow: hidden;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sidebar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><hr><h3 id="4-相对、绝对定位"><a href="#4-相对、绝对定位" class="headerlink" title="4. 相对、绝对定位"></a><strong>4. 相对、绝对定位</strong></h3><p>定位属性</p><p>**<code>position </code>**属性：</p><p>**<code>static</code>**：position的默认值，一般不设置position属性时，会按照正常的文档流进行排列。</p><p><strong><code>relative</code><strong>：元素框相对于</strong>原本的位置</strong>偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。</p><p>**<code>absolute</code><strong>：当元素的父对象(或曾祖父，只要是父级对象)<strong>parent</strong> 的</strong><code>position</code><strong>属性不是默认值的情况，此时按照这个parent来进行定位，如果没有这个对象，相对</strong><code>body</code>**元素定位（元素将脱离文档流）。</p><p>**<code>fixed</code><strong>：总是以</strong><code>body</code>**为定位对象的，按照浏览器的窗口进行定位，元素将脱离文档流。</p><table><thead><tr><th>属性</th><th>属性描述</th><th>属性值</th></tr></thead><tbody><tr><td>position</td><td>把元素放置到一个静态的、相对的、绝对的、或固定的位置中。</td><td><strong>absolute/fixed/relative/static</strong></td></tr><tr><td>top</td><td>定义了一个定位元素的上外边距边界与其包含块上边界之间的偏移。</td><td></td></tr><tr><td>right</td><td>定义了定位元素右外边距边界与其包含块右边界之间的偏移。</td><td></td></tr><tr><td>bottom</td><td>定义了定位元素下外边距边界与其包含块下边界之间的偏移。</td><td></td></tr><tr><td>left</td><td>定义了定位元素左外边距边界与其包含块左边界之间的偏移。</td><td></td></tr><tr><td>overflow</td><td>设置当元素的内容溢出其区域时发生的事情。</td><td><strong>visible/hidden/scroll/auto</strong></td></tr><tr><td>clip</td><td>设置元素的形状。元素被剪入这个形状之中，然后显示出来。</td><td><em><strong>*rect（top, right, bottom, left）*</strong></em></td></tr><tr><td>z-index</td><td>设置元素的堆叠顺序。</td><td>如果为正数，则离用户更近，为负数则表示离用户更远</td></tr></tbody></table><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><table><thead><tr><th>属性</th><th>属性描述</th><th>属性值</th></tr></thead><tbody><tr><td>visibility</td><td>规定元素是否可见（不脱离文档流）</td><td><strong>visible/hidden</strong></td></tr><tr><td>display</td><td>设置为none值，元素不可见（脱离文档流）</td><td><strong>none/block/inline/inline-block</strong></td></tr></tbody></table><p>**<code>float </code>**浮动与清除参考：</p><p><a href="http://www.w3school.com.cn/css/css_positioning_floating.asp">http://www.w3school.com.cn/css/css_positioning_floating.asp</a></p><p><a href="https://zhuanlan.zhihu.com/p/159461355">https://zhuanlan.zhihu.com/p/159461355</a></p><h2 id="十、清除网页默认样式"><a href="#十、清除网页默认样式" class="headerlink" title="十、清除网页默认样式"></a>十、清除网页默认样式</h2><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">*&#123;<br><span class="hljs-string">margin</span>：<span class="hljs-string">0</span>；<br><span class="hljs-string">padding</span>：<span class="hljs-string">0</span><br>&#125;<br> <span class="hljs-string">li</span>&#123;<br>  <span class="hljs-built_in">list-style:none;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>复杂项目可用<strong>reset.css</strong>清除css默认样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html">html, body, div, span, applet, object, iframe,<br>h1, h2, h3, h4, h5, h6, p, blockquote, pre,<br>a, abbr, acronym, address, big, cite, code,<br>del, dfn, em, img, ins, kbd, q, s, samp,<br>small, strike, strong, sub, sup, tt, var,<br>b, u, i, center,<br>dl, dt, dd, ol, ul, li,<br>fieldset, form, label, legend,<br>table, caption, tbody, tfoot, thead, tr, th, td,<br>article, aside, canvas, details, embed, <br>figure, figcaption, footer, header, hgroup, <br>menu, nav, output, ruby, section, summary,<br>time, mark, audio, video &#123;<br>margin: 0;<br>padding: 0;<br>border: 0;<br>font-size: 100%;<br>font: inherit;<br>vertical-align: baseline;<br>&#125;<br>/* HTML5 display-role reset for older browsers */<br>article, aside, details, figcaption, figure, <br>footer, header, hgroup, menu, nav, section &#123;<br>display: block;<br>&#125;<br>body &#123;<br>line-height: 1;<br>&#125;<br>ol, ul &#123;<br>list-style: none;<br>&#125;<br>blockquote, q &#123;<br>quotes: none;<br>&#125;<br>blockquote:before, blockquote:after,<br>q:before, q:after &#123;<br>content: &#x27;&#x27;;<br>content: none;<br>&#125;<br>table &#123;<br>border-collapse: collapse;<br>border-spacing: 0;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML笔记</title>
    <link href="/2022/01/10/HTML%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/01/10/HTML%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="一、head标签"><a href="#一、head标签" class="headerlink" title="一、head标签"></a>一、head标签</h3><p>1.作用：head标签用于保存页面的元数据</p><p>2.包含的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs html">1. <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>我的测试站点<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> 它可以为文档添加标题<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">2. 元数据：<span class="hljs-tag">&lt;<span class="hljs-name">meta</span>&gt;</span>元素<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> 指定文档中字符的编码<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span>&gt;</span> 元素包含了name 和 content 特性：<br>name 指定了meta 元素的类型； 说明该元素包含了什么类型的信息。<br>content 指定了实际的元数据内容。<br><br><span class="hljs-comment">&lt;!-- &lt;meta http-equiv=&quot;refresh&quot; content=&quot;3&quot;&gt;  每隔三秒刷新一次当前页面 --&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">3. 应用CSS和JavaScript<br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span>&gt;</span> 元素经常位于文档的头部。这个link元素有2个属性，rel=&quot;stylesheet&quot;表明这是文档的样式表，而 href包含了样式表文件的路径：<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;my-css-file.css&quot;</span>&gt;</span><br>连接外部的Css样式表<br><br>js脚本位于 <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span> 与 <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> 标签之间。<br>在HTML body部分中的JavaScripts会在页面加载的时候被执行。<br>在HTML head部分中的JavaScripts会在被调用的时候才执行。<br></code></pre></td></tr></table></figure><h3 id="二、img标签"><a href="#二、img标签" class="headerlink" title="二、img标签"></a>二、img标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;some_text&quot;</span>&gt;</span> <br>1. 源属性（Src）<br>URL 指存储图像的位置。如果名为 &quot;pulpit.jpg&quot; 的图像位于 www.runoob.com 的 images 目录中，那么其 URL 为 http://www.runoob.com/images/pulpit.jpg。 <br><br>2. Alt属性<br>在浏览器无法载入图像时，替换文本属性告诉读者她们失去的信息<br><br>3. 设置图片的宽高<br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;pulpit.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Pulpit rock&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;304&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;228&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="三、Table表格"><a href="#三、Table表格" class="headerlink" title="三、Table表格"></a>三、Table表格</h3><p>表格由  <code>&lt;table&gt;</code>  标签来定义。每个表格均有若干行（由 <code>&lt;tr&gt;</code> 标签定义），每行被分割为若干单元格（由  <code>&lt;td&gt; </code>标签定义）。字母 td 指表格数据（table  data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Header 1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Header 2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 1, cell 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 1, cell 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 2, cell 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 2, cell 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>一行行排列 每行里面有td(table data)单元格 th为表头<br></code></pre></td></tr></table></figure><h3 id="四、List列表"><a href="#四、List列表" class="headerlink" title="四、List列表"></a>四、List列表</h3><p>List列表分为有序列表<ol></ol>  无序列表<ul></ul>  定义列表<dl></dl></p><ol><li>有序列表<ol></ol></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span> <br><br>列表前有个圆点<br>Coffee<br>Milk<br><br></code></pre></td></tr></table></figure><ol start="2"><li>无序列表<ul></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span> <br><br><br>1. Coffee<br>2. Milk<br><br></code></pre></td></tr></table></figure><ol start="3"><li>定义列表<dl></dl></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>- black hot drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>- white cold drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span> <br><br><br>Coffee<br>    - black hot drink<br>Milk<br>    - white cold drink <br></code></pre></td></tr></table></figure><h3 id="五、div-和span"><a href="#五、div-和span" class="headerlink" title="五、div 和span"></a>五、div 和span</h3><h3 id="六、表单元素"><a href="#六、表单元素" class="headerlink" title="六、表单元素"></a>六、表单元素</h3><ol><li>表单元素</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>.<br>input 元素<br>.<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>表单内部元素</li></ol><p>文本域（Text Fields）输入框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>First name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;firstname&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>Last name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastname&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span> 密码暗文<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>单选按钮（Radio Buttons）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>Male<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>Female<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>复选框（Checkboxes）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;vehicle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Bike&quot;</span>&gt;</span>I have a bike<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;vehicle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Car&quot;</span>&gt;</span>I have a car<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>提交按钮(Submit Button)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span> 定义了提交按钮.<br><br>当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收到的输入数据进行相关的处理。<br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;input&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;html_form_action.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>Username: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span> <br></code></pre></td></tr></table></figure><p><img src="/2022/01/10/HTML%E7%AC%94%E8%AE%B0/image-20220105165430266-16418131253401.png" alt="image-20220105165430266"></p><p><img src="/2022/01/10/HTML%E7%AC%94%E8%AE%B0/image-20220105165455417-16418131253472.png" alt="image-20220105165455417"></p><h3 id="七、Css"><a href="#七、Css" class="headerlink" title="七、Css"></a>七、Css</h3><p>Css的使用有三种方法：</p><p>1.内联样式在标签内部使用style属性设置标签的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-family:arial;color:red;font-size:20px;&quot;</span>&gt;</span>一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.内部样式表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">在<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> 部分通过 <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="xml">标签定义内部样式表</span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml"><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-color</span>:yellow;&#125;</span></span><br><span class="css"><span class="xml"><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">color</span>:blue;&#125;</span></span><br><span class="css"><span class="xml"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.外部样式表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mystyle.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>CSS样式按照优先级排序如下：一、内联式：使用当前元素的style属性进行样式设置。只作用于当前元素，对于另一个同名的元素则不起作用。二、内嵌式：在HTML文档头部定义多个style元素，实现多个样式。三、外部引用式</p><h3 id="八、Javascript"><a href="#八、Javascript" class="headerlink" title="八、Javascript"></a>八、Javascript</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html">javascript代码可以写在：<br>1、用script标签，写在Html网页的Body部分中；<br>2、用script标签，写在Html网页的head部分中<br><br>3、写在后缀名为“.js”的文本文件里，并用script标签的src属性引入Html网页。<br>Javascript写在外部js文件中<br>将Javascript程序放到一个后缀名为.js的文本文件里。<br>在HTML里引用外部文件里的Javascript，应在Head里写一句，其中src的值，就是Javascript所在文件的文件路径。<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/001.js&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br><br>js脚本位于 <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span> 与 <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> 标签之间。<br>在HTML body部分中的JavaScripts会在 页面加载 的时候被执行。通常被用来生成页面的内容<br>在HTML head部分中的JavaScripts会在 被调用 的时候才执行。把脚本放在head中时，可以保证脚本在任何调用之前被加载。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
